/// <reference path="Scripts/typings/node/node.d.ts" />
import http = require("http");
import ai = require("./ai");
declare class AppInsights extends ai.AppInsights {
    config: ai.IConfig;
    context: ai.TelemetryContext;
    private _url;
    private _os;
    private _ignoredRequests;
    private _requestListener;
    private _originalServer;
    private _exceptionListenerHandle;
    private _enableCacheOnError;
    constructor(config?: AppInsights.IConfig);
    /**
     * Wrap http.createServer to automatically track requests
     */
    trackAllHttpServerRequests(ignoredRequests?: string): any;
    trackAllHttpServerRequests(ignoredRequests?: string[]): any;
    /**
     * Restore original http.createServer (disable auto-collection of requests)
     */
    restoreHttpServerRequests(): void;
    /**
     * Wrap process.on('uncaughtException') to automatically track exceptions
     */
    trackAllUncaughtExceptions(): AppInsights;
    /**
     * Restore original http.createServer (disable auto-collection of requests)
     */
    restoreUncaughtExceptions(): void;
    /**
     * Tracks a request
     */
    trackRequest(request: http.ServerRequest, response: http.ServerResponse): void;
    /**
     * filters requests specified in the filteredRequests array
     */
    private _shouldTrack(request);
    private _getClientIp(request);
    private _configureCookieHandlers(request, response);
}
declare module AppInsights {
    interface IConfig {
        instrumentationKey: string;
        endpointUrl?: string;
        accountId?: string;
        appUserId?: string;
        sessionRenewalMs?: number;
        sessionExpirationMs?: number;
        maxPayloadSizeInBytes?: number;
        maxBatchSizeInBytes?: number;
        maxBatchInterval?: number;
        enableDebug?: boolean;
        autoCollectErrors?: boolean;
        disableTelemetry?: boolean;
        verboseLogging?: boolean;
        diagnosticLogInterval?: number;
        enableCacheOnError?: boolean;
    }
    var NodeAppInsights: typeof AppInsights;
}
export = AppInsights;
