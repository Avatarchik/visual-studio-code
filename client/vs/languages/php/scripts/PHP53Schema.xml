<php version="5.3"
     schemaversion="1.0">
  <relformatstring>http://www.php.net/{0}</relformatstring>
  <globalfunctions>
    <items>
      <!-- PHP 5.5 only functions -->
      <item name="password_get_info">
        <description>Returns information about the given hash. (5.5 only)</description>
        <signature>array password_get_info ( string $hash )</signature>
        <docrelurl>password-get-info</docrelurl>
      </item>
      <item name="password_hash">
        <description>Creates a password hash. (5.5 only)</description>
        <signature>string password_hash ( string $password , integer $algo [, array $options ] )</signature>
        <docrelurl>password-hash</docrelurl>
      </item>
      <item name="password_needs_rehash">
        <description>Checks if the given hash matches the given options. (5.5 only)</description>
        <signature>boolean password_needs_rehash ( string $hash , string $algo [, string $options ] )</signature>
        <docrelurl>password-needs-rehash</docrelurl>
      </item>
      <item name="password_verify">
        <description>Verifies that a password matches a hash. (5.5 only)</description>
        <signature>boolean password_verify ( string $password , string $hash )</signature>
        <docrelurl>password-verify</docrelurl>
      </item>

      <!-- PHP 5.4 only functions -->
      <item name="hex2bin">
        <description>Decodes a hexadecimally encoded binary string. (5.4 only)</description>
        <signature>string hex2bin (string $data)</signature>
        <docrelurl>hex2bin</docrelurl>
      </item>
      <item name="http_response_code">
        <description>If you pass no parameters then http_response_code will get the current status code. If you pass a parameter it will set the response code. (5.4 only)</description>
        <signature>int http_response_code ([ int $response_code ] )</signature>
        <docrelurl>http-response-code</docrelurl>
      </item>
      <item name="get_declared_traits">
        <description>Returns an array of all declared traits. (5.4 only)</description>
        <signature>array get_declared_traits ( void )</signature>
        <docrelurl>get-declared-traits</docrelurl>
      </item>
      <item name="getimagesizefromstring">
        <description>Get the size of an image from a string. (5.4 only)</description>
        <signature>int stream_set_chunk_size ( resource $fp , int $chunk_size )</signature>
        <docrelurl>getimagesizefromstring</docrelurl>
      </item>
      <item name="socket_import_stream">
        <description>Imports a stream that encapsulates a socket into a socket extension resource. (5.4 only)</description>
        <signature>void socket_import_stream ( resource $stream )</signature>
        <docrelurl>socket-import-stream</docrelurl>
      </item>
      <item name="stream_set_chunk_size">
        <description>Set the stream chunk size. (5.4 only)</description>
        <signature>array getimagesizefromstring ( string $imagedata [, array $imageinfo ] )</signature>
        <docrelurl>stream-set-chunk-size</docrelurl>
      </item>
      <item name="trait_exists">
        <description>Checks if the trait exists. (5.4 only)</description>
        <signature>bool trait_exists ( string $traitname [, bool $autoload ] )</signature>
        <docrelurl>trait-exists</docrelurl>
      </item>
      <item name="header_register_callback">
        <description>Registers a function that will be called when PHP starts sending output.  The callback is executed just after PHP prepares all headers to be sent, and before any other output is sent, creating a window to manipulate the outgoing headers before being sent. (5.4 only)</description>
        <signature>bool header_register_callback ( callable $callback )</signature>
        <docrelurl>header-register-callback</docrelurl>
      </item>
      <item name="class_uses">
        <description>Returns an array with the names of the traits that the given class uses. This does however not include any traits used by a parent class. (5.4 only)</description>
        <signature>array class_uses ( mixed $class [, bool $autoload = true ] )</signature>
        <docrelurl>class-uses</docrelurl>
      </item>
      <item name="session_status">
        <description>Returns the current session status. (5.4 only)</description>
        <signature>int session_status ( void )</signature>
        <docrelurl>session-status</docrelurl>
      </item>
      <item name="session_register_shutdown">
        <description>Registers session_write_close() as a shutdown function. (5.4 only)</description>
        <signature>void session_register_shutdown ( void )</signature>
        <docrelurl>session-register-shutdown</docrelurl>
      </item>
      <item name="mysqli_error_list">
        <description>Returns a array of errors for the most recent MySQLi function call that can succeed or fail. (5.4 only)</description>
        <signature>array mysqli_error_list ( mysqli $link )</signature>
        <docrelurl>mysqli.error-list</docrelurl>
      </item>
      <item name="mysqli_stmt_error_list">
        <description>Returns an array of errors for the most recently invoked statement function that can succeed or fail. (5.4 only)</description>
        <signature>array mysqli_stmt_error_list ( mysqli_stmt $stmt )</signature>
        <docrelurl>mysqli-stmt.error-list</docrelurl>
      </item>
      <item name="libxml_set_external_entity_loader">
        <description>Changes the default external entity loader. (5.4 only)</description>
        <signature>void libxml_set_external_entity_loader ( callable $resolver_function )</signature>
        <docrelurl>libxml-set-external-entity-loader</docrelurl>
      </item>
      <item name="zlib_decode">
        <description>Uncompress any raw/gzip/zlib encoded data. (5.4 only)</description>
        <signature>string zlib_decode ( string $data [, string $max_decoded_len ] )</signature>
        <docrelurl>zlib_decode</docrelurl>
      </item>
      <item name="zlib_encode">
        <description>Compress data with the specified encoding. (5.4 only)</description>
        <signature>string zlib_encode ( string $data , string $encoding [, string $level = -1 ] )</signature>
        <docrelurl>zlib_encode</docrelurl>
      </item>

      <!-- end PHP 5.4 -->

      <item name="zend_version">
        <description>Returns a string containing the version of the currently running Zend Engine.</description>
        <signature>string zend_version (void)</signature>
        <docrelurl>zend_version</docrelurl>
      </item>
      <item name="func_num_args">
        <description>Gets the number of arguments passed to the function.</description>
        <signature>int func_num_args (void)</signature>
        <docrelurl>func_num_args</docrelurl>
      </item>
      <item name="func_get_arg">
        <description>Gets the specified argument from a user-defined function&apos;s argument list.</description>
        <signature>mixed func_get_arg (int $arg_num)</signature>
        <docrelurl>func_get_arg</docrelurl>
      </item>
      <item name="func_get_args">
        <description>Gets an array of the function&apos;s argument list.</description>
        <signature>array func_get_args (void)</signature>
        <docrelurl>func_get_args</docrelurl>
      </item>
      <item name="strlen">
        <description>Returns the length of the given string.</description>
        <signature>int strlen (string $string)</signature>
        <docrelurl>strlen</docrelurl>
      </item>
      <item name="strcmp">
        <description>int strcmp ( string $str1 , string $str2) Note that this comparison is case sensitive.</description>
        <signature>int strcmp (string $str1 , string $str2)</signature>
        <docrelurl>strcmp</docrelurl>
      </item>
      <item name="strncmp">
        <description>This function is similar to strcmp(), with the difference that you can specify the (upper limit of the) number of characters from each string to be used in the comparison.</description>
        <signature>int strncmp (string $str1 , string $str2 , int $len)</signature>
        <docrelurl>strncmp</docrelurl>
      </item>
      <item name="strcasecmp">
        <description>Binary safe case-insensitive string comparison.</description>
        <signature>int strcasecmp (string $str1 , string $str2)</signature>
        <docrelurl>strcasecmp</docrelurl>
      </item>
      <item name="strncasecmp">
        <description>This function is similar to strcasecmp(), with the difference that you can specify the (upper limit of the) number of characters from each string to be used in the comparison.</description>
        <signature>int strncasecmp (string $str1 , string $str2 , int $len)</signature>
        <docrelurl>strncasecmp</docrelurl>
      </item>
      <item name="each">
        <description>Return the current key and value pair from an array and advance the array cursor.</description>
        <signature>array each (array &amp;$array)</signature>
        <docrelurl>each</docrelurl>
      </item>
      <item name="error_reporting">
        <description>The error_reporting() function sets the error_reporting directive at runtime. PHP has many levels of errors, using this function sets that level for the duration (runtime) of your script. If the optional level is not set, error_reporting() will just return the current error reporting level.</description>
        <signature>int error_reporting ([ int $level ])</signature>
        <docrelurl>error_reporting</docrelurl>
      </item>
      <item name="define">
        <description>Defines a named constant at runtime.</description>
        <signature>bool define (string $name , mixed $value [, bool $case_insensitive = false ])</signature>
        <docrelurl>define</docrelurl>
      </item>
      <item name="defined">
        <description>Checks whether the given constant exists and is defined.</description>
        <signature>bool defined (string $name)</signature>
        <docrelurl>defined</docrelurl>
      </item>
      <item name="get_class">
        <description>Gets the name of the class of the given object.</description>
        <signature>string get_class ([ object $object = NULL ])</signature>
        <docrelurl>get_class</docrelurl>
      </item>
      <item name="get_called_class">
        <description>Gets the name of the class the static method is called in.</description>
        <signature>string get_called_class (void)</signature>
        <docrelurl>get_called_class</docrelurl>
      </item>
      <item name="get_parent_class">
        <description>Retrieves the parent class name for object or class.</description>
        <signature>string get_parent_class ([ mixed $object ])</signature>
        <docrelurl>get_parent_class</docrelurl>
      </item>
      <item name="method_exists">
        <description>Checks if the class method exists in the given object.</description>
        <signature>bool method_exists (mixed $object , string $method_name)</signature>
        <docrelurl>method_exists</docrelurl>
      </item>
      <item name="property_exists">
        <description>This function checks if the given property exists in the specified class.</description>
        <signature>bool property_exists (mixed $class , string $property)</signature>
        <docrelurl>property_exists</docrelurl>
      </item>
      <item name="class_exists">
        <description>This function checks whether or not the given class has been defined.</description>
        <signature>bool class_exists (string $class_name [, bool $autoload = true ])</signature>
        <docrelurl>class_exists</docrelurl>
      </item>
      <item name="interface_exists">
        <description>Checks if the given interface has been defined.</description>
        <signature>bool interface_exists (string $interface_name [, bool $autoload = true ])</signature>
        <docrelurl>interface_exists</docrelurl>
      </item>
      <item name="function_exists">
        <description>Checks the list of defined functions, both built-in (internal) and user-defined, for function_name.</description>
        <signature>bool function_exists (string $function_name)</signature>
        <docrelurl>function_exists</docrelurl>
      </item>
      <item name="class_alias">
        <description>Creates an alias named alias based on the defined class original. The aliased class is exactly the same as the original class.</description>
        <signature>bool class_alias ([ string $original [, string $alias ]])</signature>
        <docrelurl>class_alias</docrelurl>
      </item>
      <item name="get_included_files">
        <description>Gets the names of all files that have been included using include(), include_once(), require() or require_once().</description>
        <signature>array get_included_files (void)</signature>
        <docrelurl>get_included_files</docrelurl>
      </item>
      <item name="get_required_files">
        <description>Alias of get_included_files get_magic_quotes_runtime getenv PHP Options/Info Functions PHP Manual get_required_files (PHP 4, PHP 5)</description>
        <signature>Alias of get_included_files get_magic_quotes_runtime</signature>
        <docrelurl>get_required_files</docrelurl>
      </item>
      <item name="is_subclass_of">
        <description>Checks if the given object has the class class_name as one of its parents.</description>
        <signature>bool is_subclass_of (mixed $object , string $class_name)</signature>
        <docrelurl>is_subclass_of</docrelurl>
      </item>
      <item name="is_a">
        <description>Checks if the given object is of this class or has this class as one of its parents.</description>
        <signature>bool is_a (object $object , string $class_name)</signature>
        <docrelurl>is_a</docrelurl>
      </item>
      <item name="get_class_vars">
        <description>Get the default properties of the given class.</description>
        <signature>array get_class_vars (string $class_name)</signature>
        <docrelurl>get_class_vars</docrelurl>
      </item>
      <item name="get_object_vars">
        <description>Gets the accessible non-static properties of the given object according to scope.</description>
        <signature>array get_object_vars (object $object)</signature>
        <docrelurl>get_object_vars</docrelurl>
      </item>
      <item name="get_class_methods">
        <description>Gets the class methods names.</description>
        <signature>array get_class_methods (mixed $class_name)</signature>
        <docrelurl>get_class_methods</docrelurl>
      </item>
      <item name="trigger_error">
        <description>Used to trigger a user error condition, it can be used by in conjunction with the built-in error handler, or with a user defined function that has been set as the new error handler (set_error_handler()).</description>
        <signature>bool trigger_error (string $error_msg [, int $error_type = E_USER_NOTICE ])</signature>
        <docrelurl>trigger_error</docrelurl>
      </item>
      <item name="user_error">
        <description>Alias of trigger_error trigger_error htscanner Error Handling Functions PHP Manual user_error (PHP 4, PHP 5)</description>
        <signature>Alias of trigger_error trigger_error</signature>
        <docrelurl>user_error</docrelurl>
      </item>
      <item name="set_error_handler">
        <description>Sets a user function (error_handler) to handle errors in a script.</description>
        <signature>mixed set_error_handler (callback $error_handler [, int $error_types = E_ALL | E_STRICT ])</signature>
        <docrelurl>set_error_handler</docrelurl>
      </item>
      <item name="restore_error_handler">
        <description>Used after changing the error handler function using set_error_handler(), to revert to the previous error handler (which could be the built-in or a user defined function).</description>
        <signature>bool restore_error_handler (void)</signature>
        <docrelurl>restore_error_handler</docrelurl>
      </item>
      <item name="set_exception_handler">
        <description>Sets the default exception handler if an exception is not caught within a try/catch block. Execution will stop after the exception_handler is called.</description>
        <signature>callback set_exception_handler (callback $exception_handler)</signature>
        <docrelurl>set_exception_handler</docrelurl>
      </item>
      <item name="restore_exception_handler">
        <description>Used after changing the exception handler function using set_exception_handler(), to revert to the previous exception handler (which could be the built-in or a user defined function).</description>
        <signature>bool restore_exception_handler (void)</signature>
        <docrelurl>restore_exception_handler</docrelurl>
      </item>
      <item name="get_declared_classes">
        <description>Gets the declared classes.</description>
        <signature>array get_declared_classes (void)</signature>
        <docrelurl>get_declared_classes</docrelurl>
      </item>
      <item name="get_declared_interfaces">
        <description>Gets the declared interfaces.</description>
        <signature>array get_declared_interfaces (void)</signature>
        <docrelurl>get_declared_interfaces</docrelurl>
      </item>
      <item name="get_defined_functions">
        <description>Gets an array of all defined functions.</description>
        <signature>array get_defined_functions (void)</signature>
        <docrelurl>get_defined_functions</docrelurl>
      </item>
      <item name="get_defined_vars">
        <description>This function returns a multidimensional array containing a list of all defined variables, be them environment, server or user-defined variables, within the scope that get_defined_vars() is called.</description>
        <signature>array get_defined_vars (void)</signature>
        <docrelurl>get_defined_vars</docrelurl>
      </item>
      <item name="create_function">
        <description>Creates an anonymous function from the parameters passed, and returns a unique name for it.</description>
        <signature>string create_function (string $args , string $code)</signature>
        <docrelurl>create_function</docrelurl>
      </item>
      <item name="get_resource_type">
        <description>This function gets the type of the given resource.</description>
        <signature>string get_resource_type (resource $handle)</signature>
        <docrelurl>get_resource_type</docrelurl>
      </item>
      <item name="get_loaded_extensions">
        <description>This function returns the names of all the modules compiled and loaded in the PHP interpreter.</description>
        <signature>array get_loaded_extensions ([ bool $zend_extensions = false ])</signature>
        <docrelurl>get_loaded_extensions</docrelurl>
      </item>
      <item name="extension_loaded">
        <description>Finds out whether the extension is loaded.</description>
        <signature>bool extension_loaded (string $name)</signature>
        <docrelurl>extension_loaded</docrelurl>
      </item>
      <item name="get_extension_funcs">
        <description>This function returns the names of all the functions defined in the module indicated by module_name.</description>
        <signature>array get_extension_funcs (string $module_name)</signature>
        <docrelurl>get_extension_funcs</docrelurl>
      </item>
      <item name="get_defined_constants">
        <description>Returns the names and values of all the constants currently defined. This includes those created by extensions as well as those created with the define() function.</description>
        <signature>array get_defined_constants ([ bool $categorize = false ])</signature>
        <docrelurl>get_defined_constants</docrelurl>
      </item>
      <item name="debug_backtrace">
        <description>debug_backtrace() generates a PHP backtrace.</description>
        <signature>array debug_backtrace ([ int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT [, int $limit = 0 ]])</signature>
        <docrelurl>debug_backtrace</docrelurl>
      </item>
      <item name="debug_print_backtrace">
        <description>debug_print_backtrace() prints a PHP backtrace. It prints the function calls, included/required files and eval()ed stuff.</description>
        <signature>void debug_print_backtrace ([ int $options = 0 [, int $limit = 0 ]])</signature>
        <docrelurl>debug_print_backtrace</docrelurl>
      </item>
      <item name="gc_collect_cycles">
        <description>int gc_collect_cycles ( void) WarningThis function iscurrently not documented; only its argument list is available.</description>
        <signature>int gc_collect_cycles (void)</signature>
        <docrelurl>gc_collect_cycles</docrelurl>
      </item>
      <item name="gc_enabled">
        <description>bool gc_enabled ( void) WarningThis function iscurrently not documented; only its argument list is available.</description>
        <signature>bool gc_enabled (void)</signature>
        <docrelurl>gc_enabled</docrelurl>
      </item>
      <item name="gc_enable">
        <description>void gc_enable ( void) WarningThis function iscurrently not documented; only its argument list is available.</description>
        <signature>void gc_enable (void)</signature>
        <docrelurl>gc_enable</docrelurl>
      </item>
      <item name="gc_disable">
        <description>void gc_disable ( void) WarningThis function iscurrently not documented; only its argument list is available.</description>
        <signature>void gc_disable (void)</signature>
        <docrelurl>gc_disable</docrelurl>
      </item>
      <item name="bcadd">
        <description>Sums left_operand and right_operand.</description>
        <signature>string bcadd (string $left_operand , string $right_operand [, int $scale ])</signature>
        <docrelurl>bcadd</docrelurl>
      </item>
      <item name="bcsub">
        <description>Subtracts the right_operand from the left_operand.</description>
        <signature>string bcsub (string $left_operand , string $right_operand [, int $scale ])</signature>
        <docrelurl>bcsub</docrelurl>
      </item>
      <item name="bcmul">
        <description>Multiply the left_operand by the right_operand.</description>
        <signature>string bcmul (string $left_operand , string $right_operand [, int $scale ])</signature>
        <docrelurl>bcmul</docrelurl>
      </item>
      <item name="bcdiv">
        <description>Divides the left_operand by the right_operand.</description>
        <signature>string bcdiv (string $left_operand , string $right_operand [, int $scale ])</signature>
        <docrelurl>bcdiv</docrelurl>
      </item>
      <item name="bcmod">
        <description>Get the modulus of the left_operand using modulus.</description>
        <signature>string bcmod (string $left_operand , string $modulus)</signature>
        <docrelurl>bcmod</docrelurl>
      </item>
      <item name="bcpow">
        <description>Raise left_operand to the power right_operand.</description>
        <signature>string bcpow (string $left_operand , string $right_operand [, int $scale ])</signature>
        <docrelurl>bcpow</docrelurl>
      </item>
      <item name="bcsqrt">
        <description>Return the square root of the operand.</description>
        <signature>string bcsqrt (string $operand [, int $scale ])</signature>
        <docrelurl>bcsqrt</docrelurl>
      </item>
      <item name="bcscale">
        <description>Sets the default scale parameter for all subsequent bc math functions that do not explicitly specify a scale parameter.</description>
        <signature>bool bcscale (int $scale)</signature>
        <docrelurl>bcscale</docrelurl>
      </item>
      <item name="bccomp">
        <description>Compares the left_operand to the right_operand and returns the result as an integer.</description>
        <signature>int bccomp (string $left_operand , string $right_operand [, int $scale ])</signature>
        <docrelurl>bccomp</docrelurl>
      </item>
      <item name="bcpowmod">
        <description>Use the fast-exponentiation method to raise left_operand to the power right_operand with respect to the modulus modulus.</description>
        <signature>string bcpowmod (string $left_operand , string $right_operand , string $modulus [, int $scale ])</signature>
        <docrelurl>bcpowmod</docrelurl>
      </item>
      <item name="jdtogregorian">
        <description>Converts Julian Day Count to a string containing the Gregorian date in the format of &quot;month/day/year&quot;.</description>
        <signature>string jdtogregorian (int $julianday)</signature>
        <docrelurl>jdtogregorian</docrelurl>
      </item>
      <item name="gregoriantojd">
        <description>Valid Range for Gregorian Calendar 4714 B.C. to 9999 A.D.</description>
        <signature>int gregoriantojd (int $month , int $day , int $year)</signature>
        <docrelurl>gregoriantojd</docrelurl>
      </item>
      <item name="jdtojulian">
        <description>Converts Julian Day Count to a string containing the Julian Calendar Date in the format of &quot;month/day/year&quot;.</description>
        <signature>string jdtojulian (int $julianday)</signature>
        <docrelurl>jdtojulian</docrelurl>
      </item>
      <item name="juliantojd">
        <description>Valid Range for Julian Calendar 4713 B.C. to 9999 A.D.</description>
        <signature>int juliantojd (int $month , int $day , int $year)</signature>
        <docrelurl>juliantojd</docrelurl>
      </item>
      <item name="jdtojewish">
        <description>Converts a Julian Day Count to the Jewish Calendar.</description>
        <signature>string jdtojewish (int $juliandaycount [, bool $hebrew = false [, int $fl = 0 ]])</signature>
        <docrelurl>jdtojewish</docrelurl>
      </item>
      <item name="jewishtojd">
        <description>Although this function can handle dates all the way back to the year 1 (3761 B.C.), such use may not be meaningful. The Jewish calendar has been in use for several thousand years, but in the early days there was no formula to determine the start of a month. A new month was started when the new moon was first observed.</description>
        <signature>int jewishtojd (int $month , int $day , int $year)</signature>
        <docrelurl>jewishtojd</docrelurl>
      </item>
      <item name="jdtofrench">
        <description>Converts a Julian Day Count to the French Republican Calendar.</description>
        <signature>string jdtofrench (int $juliandaycount)</signature>
        <docrelurl>jdtofrench</docrelurl>
      </item>
      <item name="frenchtojd">
        <description>Converts a date from the French Republican Calendar to a Julian Day Count.</description>
        <signature>int frenchtojd (int $month , int $day , int $year)</signature>
        <docrelurl>frenchtojd</docrelurl>
      </item>
      <item name="jddayofweek">
        <description>Returns the day of the week. Can return a string or an integer depending on the mode.</description>
        <signature>mixed jddayofweek (int $julianday [, int $mode = CAL_DOW_DAYNO ])</signature>
        <docrelurl>jddayofweek</docrelurl>
      </item>
      <item name="jdmonthname">
        <description>Returns a string containing a month name. mode tells this function which calendar to convert the Julian Day Count to, and what type of month names are to be returned. Calendar modes Mode Meaning Values 0 Gregorian - abbreviated Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec 1 Gregorian January, February, March, April, May, June, July, August, September, October, November, December 2 Julian - abbreviated Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec 3 Julian January, February, March, April, May, June, July, August, September, October, November, December 4 Jewish Tishri, Heshvan, Kislev, Tevet, Shevat, AdarI, AdarII, Nisan, Iyyar, Sivan, Tammuz, Av, Elul 5 French Republican Vendemiaire, Brumaire, Frimaire, Nivose, Pluviose, Ventose, Germinal, Floreal, Prairial, Messidor, Thermidor, Fructidor, Extra</description>
        <signature>string jdmonthname (int $julianday , int $mode)</signature>
        <docrelurl>jdmonthname</docrelurl>
      </item>
      <item name="easter_date">
        <description>Returns the Unix timestamp corresponding to midnight on Easter of the given year.</description>
        <signature>int easter_date ([ int $year ])</signature>
        <docrelurl>easter_date</docrelurl>
      </item>
      <item name="easter_days">
        <description>Returns the number of days after March 21 on which Easter falls for a given year. If no year is specified, the current year is assumed.</description>
        <signature>int easter_days ([ int $year [, int $method = CAL_EASTER_DEFAULT ]])</signature>
        <docrelurl>easter_days</docrelurl>
      </item>
      <item name="unixtojd">
        <description>Return the Julian Day for a Unix timestamp (seconds since 1.1.1970), or for the current day if no timestamp is given.</description>
        <signature>int unixtojd ([ int $timestamp = time() ])</signature>
        <docrelurl>unixtojd</docrelurl>
      </item>
      <item name="jdtounix">
        <description>This function will return a Unix timestamp corresponding to the Julian Day given in jday or FALSE if jday is not inside the Unix epoch (Gregorian years between 1970 and 2037 or 2440588 &lt;= jday &lt;= 2465342). The time returned is localtime (and not GMT).</description>
        <signature>int jdtounix (int $jday)</signature>
        <docrelurl>jdtounix</docrelurl>
      </item>
      <item name="cal_to_jd">
        <description>cal_to_jd() calculates the Julian day count for a date in the specified calendar. Supported calendars are CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH and CAL_FRENCH.</description>
        <signature>int cal_to_jd (int $calendar , int $month , int $day , int $year)</signature>
        <docrelurl>cal_to_jd</docrelurl>
      </item>
      <item name="cal_from_jd">
        <description>cal_from_jd() converts the Julian day given in jd into a date of the specified calendar. Supported calendar values are CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH and CAL_FRENCH.</description>
        <signature>array cal_from_jd (int $jd , int $calendar)</signature>
        <docrelurl>cal_from_jd</docrelurl>
      </item>
      <item name="cal_days_in_month">
        <description>This function will return the number of days in the month of year for the specified calendar.</description>
        <signature>int cal_days_in_month (int $calendar , int $month , int $year)</signature>
        <docrelurl>cal_days_in_month</docrelurl>
      </item>
      <item name="cal_info">
        <description>cal_info() returns information on the specified calendar.</description>
        <signature>array cal_info ([ int $calendar = -1 ])</signature>
        <docrelurl>cal_info</docrelurl>
      </item>
      <item name="variant_set">
        <description>Converts value to a variant and assigns it to the variant object; no new variant object is created, and the old value of variant is freed/released.</description>
        <signature>void variant_set (variant $variant , mixed $value)</signature>
        <docrelurl>variant_set</docrelurl>
      </item>
      <item name="variant_add">
        <description>Adds left to right using the following rules (taken from the MSDN library), which correspond to those of Visual Basic: Variant Addition Rules If Then Both expressions are of the string type Concatenation One expression is a string type and the other a character Addition One expression is numeric and the other is a string Addition Both expressions are numeric Addition Either expression is NULL NULL is returned Both expressions are empty Integer subtype is returned</description>
        <signature>mixed variant_add (mixed $left , mixed $right)</signature>
        <docrelurl>variant_add</docrelurl>
      </item>
      <item name="variant_cat">
        <description>Concatenates left with right and returns the result.</description>
        <signature>mixed variant_cat (mixed $left , mixed $right)</signature>
        <docrelurl>variant_cat</docrelurl>
      </item>
      <item name="variant_sub">
        <description>Subtracts right from left.</description>
        <signature>mixed variant_sub (mixed $left , mixed $right)</signature>
        <docrelurl>variant_sub</docrelurl>
      </item>
      <item name="variant_mul">
        <description>Multiplies left by right.</description>
        <signature>mixed variant_mul (mixed $left , mixed $right)</signature>
        <docrelurl>variant_mul</docrelurl>
      </item>
      <item name="variant_and">
        <description>Performs a bitwise AND operation. Note that this is slightly different from a regular AND operation.</description>
        <signature>mixed variant_and (mixed $left , mixed $right)</signature>
        <docrelurl>variant_and</docrelurl>
      </item>
      <item name="variant_div">
        <description>Divides left by right and returns the result.</description>
        <signature>mixed variant_div (mixed $left , mixed $right)</signature>
        <docrelurl>variant_div</docrelurl>
      </item>
      <item name="variant_eqv">
        <description>Performs a bitwise equivalence on two variants.</description>
        <signature>mixed variant_eqv (mixed $left , mixed $right)</signature>
        <docrelurl>variant_eqv</docrelurl>
      </item>
      <item name="variant_idiv">
        <description>Converts left and right to integer values, and then performs integer division.</description>
        <signature>mixed variant_idiv (mixed $left , mixed $right)</signature>
        <docrelurl>variant_idiv</docrelurl>
      </item>
      <item name="variant_imp">
        <description>Performs a bitwise implication operation.</description>
        <signature>mixed variant_imp (mixed $left , mixed $right)</signature>
        <docrelurl>variant_imp</docrelurl>
      </item>
      <item name="variant_mod">
        <description>Divides left by right and returns the remainder.</description>
        <signature>mixed variant_mod (mixed $left , mixed $right)</signature>
        <docrelurl>variant_mod</docrelurl>
      </item>
      <item name="variant_or">
        <description>Performs a bitwise OR operation. Note that this is slightly different from a regular OR operation.</description>
        <signature>mixed variant_or (mixed $left , mixed $right)</signature>
        <docrelurl>variant_or</docrelurl>
      </item>
      <item name="variant_pow">
        <description>Returns the result of left to the power of right.</description>
        <signature>mixed variant_pow (mixed $left , mixed $right)</signature>
        <docrelurl>variant_pow</docrelurl>
      </item>
      <item name="variant_xor">
        <description>Performs a logical exclusion.</description>
        <signature>mixed variant_xor (mixed $left , mixed $right)</signature>
        <docrelurl>variant_xor</docrelurl>
      </item>
      <item name="variant_abs">
        <description>Returns the absolute value of a variant.</description>
        <signature>mixed variant_abs (mixed $val)</signature>
        <docrelurl>variant_abs</docrelurl>
      </item>
      <item name="variant_fix">
        <description>Gets the integer portion of a variant.</description>
        <signature>mixed variant_fix (mixed $variant)</signature>
        <docrelurl>variant_fix</docrelurl>
      </item>
      <item name="variant_int">
        <description>Gets the integer portion of a variant.</description>
        <signature>mixed variant_int (mixed $variant)</signature>
        <docrelurl>variant_int</docrelurl>
      </item>
      <item name="variant_neg">
        <description>Performs logical negation of variant.</description>
        <signature>mixed variant_neg (mixed $variant)</signature>
        <docrelurl>variant_neg</docrelurl>
      </item>
      <item name="variant_not">
        <description>Performs bitwise not negation on variant and returns the result.</description>
        <signature>mixed variant_not (mixed $variant)</signature>
        <docrelurl>variant_not</docrelurl>
      </item>
      <item name="variant_round">
        <description>Returns the value of variant rounded to decimals decimal places.</description>
        <signature>mixed variant_round (mixed $variant , int $decimals)</signature>
        <docrelurl>variant_round</docrelurl>
      </item>
      <item name="variant_cmp">
        <description>Compares left with right.</description>
        <signature>int variant_cmp (mixed $left , mixed $right [, int $lcid [, int $flags ]])</signature>
        <docrelurl>variant_cmp</docrelurl>
      </item>
      <item name="variant_date_to_timestamp">
        <description>Converts variant from a VT_DATE (or similar) value into a Unix timestamp. This allows easier interopability between the Unix-ish parts of PHP and COM.</description>
        <signature>int variant_date_to_timestamp (variant $variant)</signature>
        <docrelurl>variant_date_to_timestamp</docrelurl>
      </item>
      <item name="variant_date_from_timestamp">
        <description>Converts timestamp from a unix timestamp value into a variant of type VT_DATE. This allows easier interopability between the unix-ish parts of PHP and COM.</description>
        <signature>variant variant_date_from_timestamp (int $timestamp)</signature>
        <docrelurl>variant_date_from_timestamp</docrelurl>
      </item>
      <item name="variant_get_type">
        <description>Returns the type of a variant object.</description>
        <signature>int variant_get_type (variant $variant)</signature>
        <docrelurl>variant_get_type</docrelurl>
      </item>
      <item name="variant_set_type">
        <description>This function is similar to variant_cast() except that the variant is modified &quot;in-place&quot;; no new variant is created. The parameters for this function have identical meaning to those of variant_cast().</description>
        <signature>void variant_set_type (variant $variant , int $type)</signature>
        <docrelurl>variant_set_type</docrelurl>
      </item>
      <item name="variant_cast">
        <description>This function makes a copy of variant and then performs a variant cast operation to force the copy to have the type given by type.</description>
        <signature>variant variant_cast (variant $variant , int $type)</signature>
        <docrelurl>variant_cast</docrelurl>
      </item>
      <item name="com_create_guid">
        <description>Generates a Globally Unique Identifier (GUID).</description>
        <signature>string com_create_guid (void)</signature>
        <docrelurl>com_create_guid</docrelurl>
      </item>
      <item name="com_event_sink">
        <description>Instructs COM to sink events generated by comobject into the PHP object sinkobject.</description>
        <signature>bool com_event_sink (variant $comobject , object $sinkobject [, mixed $sinkinterface ])</signature>
        <docrelurl>com_event_sink</docrelurl>
      </item>
      <item name="com_print_typeinfo">
        <description>The purpose of this function is to help generate a skeleton class for use as an event sink. You may also use it to generate a dump of any COM object, provided that it supports enough of the introspection interfaces, and that you know the name of the interface you want to display.</description>
        <signature>bool com_print_typeinfo (object $comobject [, string $dispinterface [, bool $wantsink = false ]])</signature>
        <docrelurl>com_print_typeinfo</docrelurl>
      </item>
      <item name="com_message_pump">
        <description>This function will sleep for up to timeoutms milliseconds, or until a message arrives in the queue.</description>
        <signature>bool com_message_pump ([ int $timeoutms = 0 ])</signature>
        <docrelurl>com_message_pump</docrelurl>
      </item>
      <item name="com_load_typelib">
        <description>Loads a type-library and registers its constants in the engine, as though they were defined using define().</description>
        <signature>bool com_load_typelib (string $typelib_name [, bool $case_insensitive = true ])</signature>
        <docrelurl>com_load_typelib</docrelurl>
      </item>
      <item name="com_get_active_object">
        <description>com_get_active_object() is similar to creating a new instance of a COM object, except that it will only return an object to your script if the object is already running. OLE applications use something known as the Running Object Table to allow well-known applications to be launched only once; this function exposes the COM library function GetActiveObject() to get a handle on a running instance.</description>
        <signature>variant com_get_active_object (string $progid [, int $code_page ])</signature>
        <docrelurl>com_get_active_object</docrelurl>
      </item>
      <item name="ctype_alnum">
        <description>Checks if all of the characters in the provided string, text, are alphanumeric. In the standard C locale letters are just [A-Za-z].</description>
        <signature>bool ctype_alnum (string $text)</signature>
        <docrelurl>ctype_alnum</docrelurl>
      </item>
      <item name="ctype_alpha">
        <description>Checks if all of the characters in the provided string, text, are alphabetic. In the standard C locale letters are just [A-Za-z] and ctype_alpha() is equivalent to (ctype_upper($text) || ctype_lower($text)) if $text is just a single character, but other languages have letters that are considered neither upper nor lower case.</description>
        <signature>bool ctype_alpha (string $text)</signature>
        <docrelurl>ctype_alpha</docrelurl>
      </item>
      <item name="ctype_cntrl">
        <description>Checks if all of the characters in the provided string, text, are control characters. Control characters are e.g. line feed, tab, escape.</description>
        <signature>bool ctype_cntrl (string $text)</signature>
        <docrelurl>ctype_cntrl</docrelurl>
      </item>
      <item name="ctype_digit">
        <description>Checks if all of the characters in the provided string, text, are numerical.</description>
        <signature>bool ctype_digit (string $text)</signature>
        <docrelurl>ctype_digit</docrelurl>
      </item>
      <item name="ctype_lower">
        <description>Checks if all of the characters in the provided string, text, are lowercase letters.</description>
        <signature>bool ctype_lower (string $text)</signature>
        <docrelurl>ctype_lower</docrelurl>
      </item>
      <item name="ctype_graph">
        <description>Checks if all of the characters in the provided string, text, creates visible output.</description>
        <signature>bool ctype_graph (string $text)</signature>
        <docrelurl>ctype_graph</docrelurl>
      </item>
      <item name="ctype_print">
        <description>Checks if all of the characters in the provided string, text, are printable.</description>
        <signature>bool ctype_print (string $text)</signature>
        <docrelurl>ctype_print</docrelurl>
      </item>
      <item name="ctype_punct">
        <description>Checks if all of the characters in the provided string, text, are punctuation character.</description>
        <signature>bool ctype_punct (string $text)</signature>
        <docrelurl>ctype_punct</docrelurl>
      </item>
      <item name="ctype_space">
        <description>Checks if all of the characters in the provided string, text, creates whitespace.</description>
        <signature>bool ctype_space (string $text)</signature>
        <docrelurl>ctype_space</docrelurl>
      </item>
      <item name="ctype_upper">
        <description>Checks if all of the characters in the provided string, text, are uppercase characters.</description>
        <signature>bool ctype_upper (string $text)</signature>
        <docrelurl>ctype_upper</docrelurl>
      </item>
      <item name="ctype_xdigit">
        <description>Checks if all of the characters in the provided string, text, are hexadecimal &apos;digits&apos;.</description>
        <signature>bool ctype_xdigit (string $text)</signature>
        <docrelurl>ctype_xdigit</docrelurl>
      </item>
      <item name="strtotime">
        <description>int strtotime ( string $time [, int $now ]) The function expects to be given a string containing an English date format and will try to parse that format into a Unix timestamp (the number of seconds since January 1 1970 00:00:00 UTC), relative to the timestamp given in now, or the current time if now is not supplied.</description>
        <signature>int strtotime (string $time [, int $now ])</signature>
        <docrelurl>strtotime</docrelurl>
      </item>
      <item name="date">
        <description>Returns a string formatted according to the given format string using the given integer timestamp or the current time if no timestamp is given. In other words, timestamp is optional and defaults to the value of time().</description>
        <signature>string date (string $format [, int $timestamp = time() ])</signature>
        <docrelurl>date</docrelurl>
      </item>
      <item name="idate">
        <description>Returns a number formatted according to the given format string using the given integer timestamp or the current local time if no timestamp is given. In other words, timestamp is optional and defaults to the value of time().</description>
        <signature>int idate (string $format [, int $timestamp = time() ])</signature>
        <docrelurl>idate</docrelurl>
      </item>
      <item name="gmdate">
        <description>Identical to the date() function except that the time returned is Greenwich Mean Time (GMT).</description>
        <signature>string gmdate (string $format [, int $timestamp = time() ])</signature>
        <docrelurl>gmdate</docrelurl>
      </item>
      <item name="mktime">
        <description>Returns the Unix timestamp corresponding to the arguments given. This timestamp is a long integer containing the number of seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time specified.</description>
        <signature>int mktime ([ int $hour = date(&quot;H&quot;) [, int $minute = date(&quot;i&quot;) [, int $second = date(&quot;s&quot;) [, int $month = date(&quot;n&quot;) [, int $day = date(&quot;j&quot;) [, int $year = date(&quot;Y&quot;) [, int $is_dst = -1 ]]]]]]])</signature>
        <docrelurl>mktime</docrelurl>
      </item>
      <item name="gmmktime">
        <description>Identical to mktime() except the passed parameters represents a GMT date. gmmktime() internally uses mktime() so only times valid in derived local time can be used.</description>
        <signature>int gmmktime ([ int $hour = gmdate(&quot;H&quot;) [, int $minute = gmdate(&quot;i&quot;) [, int $second = gmdate(&quot;s&quot;) [, int $month = gmdate(&quot;n&quot;) [, int $day = gmdate(&quot;j&quot;) [, int $year = gmdate(&quot;Y&quot;) [, int $is_dst = -1 ]]]]]]])</signature>
        <docrelurl>gmmktime</docrelurl>
      </item>
      <item name="checkdate">
        <description>Checks the validity of the date formed by the arguments. A date is considered valid if each parameter is properly defined.</description>
        <signature>bool checkdate (int $month , int $day , int $year)</signature>
        <docrelurl>checkdate</docrelurl>
      </item>
      <item name="strftime">
        <description>Format the time and/or date according to locale settings. Month and weekday names and other language-dependent strings respect the current locale set with setlocale().</description>
        <signature>string strftime (string $format [, int $timestamp = time() ])</signature>
        <docrelurl>strftime</docrelurl>
      </item>
      <item name="gmstrftime">
        <description>Behaves the same as strftime() except that the time returned is Greenwich Mean Time (GMT). For example, when run in Eastern Standard Time (GMT -0500), the first line below prints &quot;Dec 31 1998 20:00:00&quot;, while the second prints &quot;Jan 01 1999 01:00:00&quot;.</description>
        <signature>string gmstrftime (string $format [, int $timestamp = time() ])</signature>
        <docrelurl>gmstrftime</docrelurl>
      </item>
      <item name="time">
        <description>Returns the current time measured in the number of seconds since the Unix Epoch (January 1 1970 00:00:00 GMT).</description>
        <signature>int time (void)</signature>
        <docrelurl>time</docrelurl>
      </item>
      <item name="localtime">
        <description>The localtime() function returns an array identical to that of the structure returned by the C function call.</description>
        <signature>array localtime ([ int $timestamp = time() [, bool $is_associative = false ]])</signature>
        <docrelurl>localtime</docrelurl>
      </item>
      <item name="getdate">
        <description>Returns an associative array containing the date information of the timestamp, or the current local time if no timestamp is given.</description>
        <signature>array getdate ([ int $timestamp = time() ])</signature>
        <docrelurl>getdate</docrelurl>
      </item>
      <item name="date_create">
        <description>Alias of DateTime::__construct date_create_from_format date_date_set Date/Time Functions PHP Manual date_create (PHP 5 &gt;= 5.2.0)</description>
        <signature>Alias of DateTime::__construct date_create_from_format</signature>
        <docrelurl>date_create</docrelurl>
      </item>
      <item name="date_create_from_format">
        <description>Alias of DateTime::createFromFormat date_add date_create Date/Time Functions PHP Manual date_create_from_format (PHP 5 &gt;= 5.3.0)</description>
        <signature>Alias of DateTime::createFromFormat date_add</signature>
        <docrelurl>date_create_from_format</docrelurl>
      </item>
      <item name="date_parse">
        <description>array date_parse ( string $date) Parameters date Date in format accepted by strtotime().</description>
        <signature>array date_parse (string $date)</signature>
        <docrelurl>date_parse</docrelurl>
      </item>
      <item name="date_parse_from_format">
        <description>Returns associative array with detailed info about given date.</description>
        <signature>array date_parse_from_format (string $format , string $date)</signature>
        <docrelurl>date_parse_from_format</docrelurl>
      </item>
      <item name="date_get_last_errors">
        <description>Alias of DateTime::getLastErrors date_format date_interval_create_from_date_string Date/Time Functions PHP Manual date_get_last_errors (PHP 5 &gt;= 5.3.0)</description>
        <signature>Alias of DateTime::getLastErrors date_format</signature>
        <docrelurl>date_get_last_errors</docrelurl>
      </item>
      <item name="date_format">
        <description>Alias of DateTime::format date_diff date_get_last_errors Date/Time Functions PHP Manual date_format (PHP 5 &gt;= 5.2.0)</description>
        <signature>Alias of DateTime::format date_diff</signature>
        <docrelurl>date_format</docrelurl>
      </item>
      <item name="date_modify">
        <description>Alias of DateTime::modify date_isodate_set date_offset_get Date/Time Functions PHP Manual date_modify (PHP 5 &gt;= 5.2.0)</description>
        <signature>Alias of DateTime::modify date_isodate_set</signature>
        <docrelurl>date_modify</docrelurl>
      </item>
      <item name="date_add">
        <description>Alias of DateTime::add checkdate date_create_from_format Date/Time Functions PHP Manual date_add (PHP 5 &gt;= 5.3.0)</description>
        <signature>Alias of DateTime::add checkdate</signature>
        <docrelurl>date_add</docrelurl>
      </item>
      <item name="date_sub">
        <description>Alias of DateTime::sub date_parse date_sun_info Date/Time Functions PHP Manual date_sub (PHP 5 &gt;= 5.3.0)</description>
        <signature>Alias of DateTime::sub date_parse</signature>
        <docrelurl>date_sub</docrelurl>
      </item>
      <item name="date_timezone_get">
        <description>Alias of DateTime::getTimezone date_timestamp_set date_timezone_set Date/Time Functions PHP Manual date_timezone_get (PHP 5 &gt;= 5.2.0)</description>
        <signature>Alias of DateTime::getTimezone date_timestamp_set</signature>
        <docrelurl>date_timezone_get</docrelurl>
      </item>
      <item name="date_timezone_set">
        <description>Alias of DateTime::setTimezone date_timezone_get date Date/Time Functions PHP Manual date_timezone_set (PHP 5 &gt;= 5.2.0)</description>
        <signature>Alias of DateTime::setTimezone date_timezone_get</signature>
        <docrelurl>date_timezone_set</docrelurl>
      </item>
      <item name="date_offset_get">
        <description>Alias of DateTime::getOffset date_modify date_parse_from_format Date/Time Functions PHP Manual date_offset_get (PHP 5 &gt;= 5.2.0)</description>
        <signature>Alias of DateTime::getOffset date_modify</signature>
        <docrelurl>date_offset_get</docrelurl>
      </item>
      <item name="date_diff">
        <description>Alias of DateTime::diff date_default_timezone_set date_format Date/Time Functions PHP Manual date_diff (PHP 5 &gt;= 5.3.0)</description>
        <signature>Alias of DateTime::diff date_default_timezone_set</signature>
        <docrelurl>date_diff</docrelurl>
      </item>
      <item name="date_time_set">
        <description>Alias of DateTime::setTime date_sunset date_timestamp_get Date/Time Functions PHP Manual date_time_set (PHP 5 &gt;= 5.2.0)</description>
        <signature>Alias of DateTime::setTime date_sunset</signature>
        <docrelurl>date_time_set</docrelurl>
      </item>
      <item name="date_date_set">
        <description>Alias of DateTime::setDate date_create date_default_timezone_get Date/Time Functions PHP Manual date_date_set (PHP 5 &gt;= 5.2.0)</description>
        <signature>Alias of DateTime::setDate date_create</signature>
        <docrelurl>date_date_set</docrelurl>
      </item>
      <item name="date_isodate_set">
        <description>Alias of DateTime::setISODate date_interval_format date_modify Date/Time Functions PHP Manual date_isodate_set (PHP 5 &gt;= 5.2.0)</description>
        <signature>Alias of DateTime::setISODate date_interval_format</signature>
        <docrelurl>date_isodate_set</docrelurl>
      </item>
      <item name="date_timestamp_set">
        <description>Alias of DateTime::setTimestamp date_timestamp_get date_timezone_get Date/Time Functions PHP Manual date_timestamp_set (PHP 5 &gt;= 5.3.0)</description>
        <signature>Alias of DateTime::setTimestamp date_timestamp_get</signature>
        <docrelurl>date_timestamp_set</docrelurl>
      </item>
      <item name="date_timestamp_get">
        <description>Alias of DateTime::getTimestamp date_time_set date_timestamp_set Date/Time Functions PHP Manual date_timestamp_get (PHP 5 &gt;= 5.3.0)</description>
        <signature>Alias of DateTime::getTimestamp date_time_set</signature>
        <docrelurl>date_timestamp_get</docrelurl>
      </item>
      <item name="timezone_open">
        <description>Alias of DateTimeZone::__construct timezone_offset_get timezone_transitions_get Date/Time Functions PHP Manual timezone_open (PHP 5 &gt;= 5.2.0)</description>
        <signature>Alias of DateTimeZone::__construct timezone_offset_get</signature>
        <docrelurl>timezone_open</docrelurl>
      </item>
      <item name="timezone_name_get">
        <description>Alias of DateTimeZone::getName timezone_name_from_abbr timezone_offset_get Date/Time Functions PHP Manual timezone_name_get (PHP 5 &gt;= 5.2.0)</description>
        <signature>Alias of DateTimeZone::getName timezone_name_from_abbr</signature>
        <docrelurl>timezone_name_get</docrelurl>
      </item>
      <item name="timezone_name_from_abbr">
        <description>string timezone_name_from_abbr ( string $abbr [, int $gmtOffset = -1 [, int $isdst = -1 ]]) Parameters abbr Time zone abbreviation.</description>
        <signature>string timezone_name_from_abbr (string $abbr [, int $gmtOffset = -1 [, int $isdst = -1 ]])</signature>
        <docrelurl>timezone_name_from_abbr</docrelurl>
      </item>
      <item name="timezone_offset_get">
        <description>Alias of DateTimeZone::getOffset timezone_name_get timezone_open Date/Time Functions PHP Manual timezone_offset_get (PHP 5 &gt;= 5.2.0)</description>
        <signature>Alias of DateTimeZone::getOffset timezone_name_get</signature>
        <docrelurl>timezone_offset_get</docrelurl>
      </item>
      <item name="timezone_transitions_get">
        <description>Alias of DateTimeZone::getTransitions timezone_open timezone_version_get Date/Time Functions PHP Manual timezone_transitions_get (PHP 5 &gt;= 5.2.0)</description>
        <signature>Alias of DateTimeZone::getTransitions timezone_open</signature>
        <docrelurl>timezone_transitions_get</docrelurl>
      </item>
      <item name="timezone_location_get">
        <description>Alias of DateTimeZone::getLocation timezone_identifiers_list timezone_name_from_abbr Date/Time Functions PHP Manual timezone_location_get (PHP 5 &gt;= 5.3.0)</description>
        <signature>Alias of DateTimeZone::getLocation timezone_identifiers_list</signature>
        <docrelurl>timezone_location_get</docrelurl>
      </item>
      <item name="timezone_identifiers_list">
        <description>Alias of DateTimeZone::listIdentifiers timezone_abbreviations_list timezone_location_get Date/Time Functions PHP Manual timezone_identifiers_list (PHP 5 &gt;= 5.2.0)</description>
        <signature>Alias of DateTimeZone::listIdentifiers timezone_abbreviations_list</signature>
        <docrelurl>timezone_identifiers_list</docrelurl>
      </item>
      <item name="timezone_abbreviations_list">
        <description>Alias of DateTimeZone::listAbbreviations time timezone_identifiers_list Date/Time Functions PHP Manual timezone_abbreviations_list (PHP 5 &gt;= 5.2.0)</description>
        <signature>Alias of DateTimeZone::listAbbreviations time</signature>
        <docrelurl>timezone_abbreviations_list</docrelurl>
      </item>
      <item name="timezone_version_get">
        <description>Returns the current version of the timezonedb.</description>
        <signature>string timezone_version_get (void)</signature>
        <docrelurl>timezone_version_get</docrelurl>
      </item>
      <item name="date_interval_create_from_date_string">
        <description>Alias of DateInterval::createFromDateString date_get_last_errors date_interval_format Date/Time Functions PHP Manual date_interval_create_from_date_string (PHP 5 &gt;= 5.3.0)</description>
        <signature>Alias of DateInterval::createFromDateString date_get_last_errors</signature>
        <docrelurl>date_interval_create_from_date_string</docrelurl>
      </item>
      <item name="date_interval_format">
        <description>Alias of DateInterval::format date_interval_create_from_date_string date_isodate_set Date/Time Functions PHP Manual date_interval_format (PHP 5 &gt;= 5.3.0)</description>
        <signature>Alias of DateInterval::format date_interval_create_from_date_string</signature>
        <docrelurl>date_interval_format</docrelurl>
      </item>
      <item name="date_default_timezone_set">
        <description>date_default_timezone_set() sets the default timezone used by all date/time functions.</description>
        <signature>bool date_default_timezone_set (string $timezone_identifier)</signature>
        <docrelurl>date_default_timezone_set</docrelurl>
      </item>
      <item name="date_default_timezone_get">
        <description>In order of preference, this function returns the default timezone by: Reading the timezone set using the date_default_timezone_set() function (if any)</description>
        <signature>string date_default_timezone_get (void)</signature>
        <docrelurl>date_default_timezone_get</docrelurl>
      </item>
      <item name="date_sunrise">
        <description>date_sunrise() returns the sunrise time for a given day (specified as a timestamp) and location.</description>
        <signature>mixed date_sunrise (int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get(&quot;date.default_latitude&quot;) [, float $longitude = ini_get(&quot;date.default_longitude&quot;) [, float $zenith = ini_get(&quot;date.sunrise_zenith&quot;) [, float $gmt_offset = 0 ]]]]])</signature>
        <docrelurl>date_sunrise</docrelurl>
      </item>
      <item name="date_sunset">
        <description>date_sunset() returns the sunset time for a given day (specified as a timestamp) and location.</description>
        <signature>mixed date_sunset (int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get(&quot;date.default_latitude&quot;) [, float $longitude = ini_get(&quot;date.default_longitude&quot;) [, float $zenith = ini_get(&quot;date.sunset_zenith&quot;) [, float $gmt_offset = 0 ]]]]])</signature>
        <docrelurl>date_sunset</docrelurl>
      </item>
      <item name="date_sun_info">
        <description>array date_sun_info ( int $time , float $latitude , float $longitude) Parameters time Timestamp.</description>
        <signature>array date_sun_info (int $time , float $latitude , float $longitude)</signature>
        <docrelurl>date_sun_info</docrelurl>
      </item>
      <item name="ereg">
        <description>int ereg ( string $pattern , string $string [, array &amp;$regs ]) Searches a string for matches to the regular expression given in pattern in a case-sensitive way.</description>
        <signature>int ereg (string $pattern , string $string [, array &amp;$regs ])</signature>
        <docrelurl>ereg</docrelurl>
      </item>
      <item name="ereg_replace">
        <description>string ereg_replace ( string $pattern , string $replacement , string $string) This function scans string for matches to pattern, then replaces the matched text with replacement.</description>
        <signature>string ereg_replace (string $pattern , string $replacement , string $string)</signature>
        <docrelurl>ereg_replace</docrelurl>
      </item>
      <item name="eregi">
        <description>This function is identical to ereg() except that it ignores case distinction when matching alphabetic characters.</description>
        <signature>int eregi (string $pattern , string $string [, array &amp;$regs ])</signature>
        <docrelurl>eregi</docrelurl>
      </item>
      <item name="eregi_replace">
        <description>This function is identical to ereg_replace() except that this ignores case distinction when matching alphabetic characters.</description>
        <signature>string eregi_replace (string $pattern , string $replacement , string $string)</signature>
        <docrelurl>eregi_replace</docrelurl>
      </item>
      <item name="split">
        <description>Splits a string into array by regular expression.</description>
        <signature>array split (string $pattern , string $string [, int $limit = -1 ])</signature>
        <docrelurl>split</docrelurl>
      </item>
      <item name="spliti">
        <description>Splits a string into array by regular expression.</description>
        <signature>array spliti (string $pattern , string $string [, int $limit = -1 ])</signature>
        <docrelurl>spliti</docrelurl>
      </item>
      <item name="sql_regcase">
        <description>Creates a regular expression for a case insensitive match.</description>
        <signature>string sql_regcase (string $string)</signature>
        <docrelurl>sql_regcase</docrelurl>
      </item>
      <item name="filter_input">
        <description>mixed filter_input ( int $type , string $variable_name [, int $filter = FILTER_DEFAULT [, mixed $options ]]) Parameters type One of INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER, or INPUT_ENV.</description>
        <signature>mixed filter_input (int $type , string $variable_name [, int $filter = FILTER_DEFAULT [, mixed $options ]])</signature>
        <docrelurl>filter_input</docrelurl>
      </item>
      <item name="filter_var">
        <description>mixed filter_var ( mixed $variable [, int $filter = FILTER_DEFAULT [, mixed $options ]]) Parameters variable Value to filter.</description>
        <signature>mixed filter_var (mixed $variable [, int $filter = FILTER_DEFAULT [, mixed $options ]])</signature>
        <docrelurl>filter_var</docrelurl>
      </item>
      <item name="filter_input_array">
        <description>This function is useful for retrieving many values without repetitively calling filter_input().</description>
        <signature>mixed filter_input_array (int $type [, mixed $definition ])</signature>
        <docrelurl>filter_input_array</docrelurl>
      </item>
      <item name="filter_var_array">
        <description>This function is useful for retrieving many values without repetitively calling filter_var().</description>
        <signature>mixed filter_var_array (array $data [, mixed $definition ])</signature>
        <docrelurl>filter_var_array</docrelurl>
      </item>
      <item name="filter_list">
        <description>array filter_list ( void) Return Values Returns an array of names of all supported filters, empty array if there are no such filters. Indexes of this array are not filter IDs, they can be obtained with filter_id() from a name instead.</description>
        <signature>array filter_list (void)</signature>
        <docrelurl>filter_list</docrelurl>
      </item>
      <item name="filter_has_var">
        <description>bool filter_has_var ( int $type , string $variable_name) Parameters type One of INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER, or INPUT_ENV.</description>
        <signature>bool filter_has_var (int $type , string $variable_name)</signature>
        <docrelurl>filter_has_var</docrelurl>
      </item>
      <item name="filter_id">
        <description>int filter_id ( string $filtername) Parameters filtername Name of a filter to get.</description>
        <signature>int filter_id (string $filtername)</signature>
        <docrelurl>filter_id</docrelurl>
      </item>
      <item name="ftp_connect">
        <description>ftp_connect() opens an FTP connection to the specified host.</description>
        <signature>resource ftp_connect (string $host [, int $port = 21 [, int $timeout = 90 ]])</signature>
        <docrelurl>ftp_connect</docrelurl>
      </item>
      <item name="ftp_login">
        <description>Logs in to the given FTP stream.</description>
        <signature>bool ftp_login (resource $ftp_stream , string $username , string $password)</signature>
        <docrelurl>ftp_login</docrelurl>
      </item>
      <item name="ftp_pwd">
        <description></description>
        <signature>string ftp_pwd (resource $ftp_stream)</signature>
        <docrelurl>ftp_pwd</docrelurl>
      </item>
      <item name="ftp_cdup">
        <description>Changes to the parent directory.</description>
        <signature>bool ftp_cdup (resource $ftp_stream)</signature>
        <docrelurl>ftp_cdup</docrelurl>
      </item>
      <item name="ftp_chdir">
        <description>Changes the current directory to the specified one.</description>
        <signature>bool ftp_chdir (resource $ftp_stream , string $directory)</signature>
        <docrelurl>ftp_chdir</docrelurl>
      </item>
      <item name="ftp_exec">
        <description>Sends a SITE EXEC command request to the FTP server.</description>
        <signature>bool ftp_exec (resource $ftp_stream , string $command)</signature>
        <docrelurl>ftp_exec</docrelurl>
      </item>
      <item name="ftp_raw">
        <description>Sends an arbitrary command to the FTP server.</description>
        <signature>array ftp_raw (resource $ftp_stream , string $command)</signature>
        <docrelurl>ftp_raw</docrelurl>
      </item>
      <item name="ftp_mkdir">
        <description>Creates the specified directory on the FTP server.</description>
        <signature>string ftp_mkdir (resource $ftp_stream , string $directory)</signature>
        <docrelurl>ftp_mkdir</docrelurl>
      </item>
      <item name="ftp_rmdir">
        <description>Removes the specified directory on the FTP server.</description>
        <signature>bool ftp_rmdir (resource $ftp_stream , string $directory)</signature>
        <docrelurl>ftp_rmdir</docrelurl>
      </item>
      <item name="ftp_chmod">
        <description>Sets the permissions on the specified remote file to mode.</description>
        <signature>int ftp_chmod (resource $ftp_stream , int $mode , string $filename)</signature>
        <docrelurl>ftp_chmod</docrelurl>
      </item>
      <item name="ftp_alloc">
        <description>Sends an ALLO command to the remote FTP server to allocate space for a file to be uploaded.</description>
        <signature>bool ftp_alloc (resource $ftp_stream , int $filesize [, string &amp;$result ])</signature>
        <docrelurl>ftp_alloc</docrelurl>
      </item>
      <item name="ftp_nlist">
        <description>array ftp_nlist ( resource $ftp_stream , string $directory) Parameters ftp_stream The link identifier of the FTP connection.</description>
        <signature>array ftp_nlist (resource $ftp_stream , string $directory)</signature>
        <docrelurl>ftp_nlist</docrelurl>
      </item>
      <item name="ftp_rawlist">
        <description>ftp_rawlist() executes the FTP LIST command, and returns the result as an array.</description>
        <signature>array ftp_rawlist (resource $ftp_stream , string $directory [, bool $recursive = false ])</signature>
        <docrelurl>ftp_rawlist</docrelurl>
      </item>
      <item name="ftp_systype">
        <description>Returns the system type identifier of the remote FTP server.</description>
        <signature>string ftp_systype (resource $ftp_stream)</signature>
        <docrelurl>ftp_systype</docrelurl>
      </item>
      <item name="ftp_pasv">
        <description>ftp_pasv() turns on or off passive mode. In passive mode, data connections are initiated by the client, rather than by the server. It may be needed if the client is behind firewall.</description>
        <signature>bool ftp_pasv (resource $ftp_stream , bool $pasv)</signature>
        <docrelurl>ftp_pasv</docrelurl>
      </item>
      <item name="ftp_get">
        <description>ftp_get() retrieves a remote file from the FTP server, and saves it into a local file.</description>
        <signature>bool ftp_get (resource $ftp_stream , string $local_file , string $remote_file , int $mode [, int $resumepos = 0 ])</signature>
        <docrelurl>ftp_get</docrelurl>
      </item>
      <item name="ftp_fget">
        <description>ftp_fget() retrieves remote_file from the FTP server, and writes it to the given file pointer.</description>
        <signature>bool ftp_fget (resource $ftp_stream , resource $handle , string $remote_file , int $mode [, int $resumepos = 0 ])</signature>
        <docrelurl>ftp_fget</docrelurl>
      </item>
      <item name="ftp_put">
        <description>ftp_put() stores a local file on the FTP server.</description>
        <signature>bool ftp_put (resource $ftp_stream , string $remote_file , string $local_file , int $mode [, int $startpos = 0 ])</signature>
        <docrelurl>ftp_put</docrelurl>
      </item>
      <item name="ftp_fput">
        <description>ftp_fput() uploads the data from a file pointer to a remote file on the FTP server.</description>
        <signature>bool ftp_fput (resource $ftp_stream , string $remote_file , resource $handle , int $mode [, int $startpos = 0 ])</signature>
        <docrelurl>ftp_fput</docrelurl>
      </item>
      <item name="ftp_size">
        <description>ftp_size() returns the size of the given file in bytes.</description>
        <signature>int ftp_size (resource $ftp_stream , string $remote_file)</signature>
        <docrelurl>ftp_size</docrelurl>
      </item>
      <item name="ftp_mdtm">
        <description>ftp_mdtm() gets the last modified time for a remote file.</description>
        <signature>int ftp_mdtm (resource $ftp_stream , string $remote_file)</signature>
        <docrelurl>ftp_mdtm</docrelurl>
      </item>
      <item name="ftp_rename">
        <description>ftp_rename() renames a file or a directory on the FTP server.</description>
        <signature>bool ftp_rename (resource $ftp_stream , string $oldname , string $newname)</signature>
        <docrelurl>ftp_rename</docrelurl>
      </item>
      <item name="ftp_delete">
        <description>ftp_delete() deletes the file specified by path from the FTP server.</description>
        <signature>bool ftp_delete (resource $ftp_stream , string $path)</signature>
        <docrelurl>ftp_delete</docrelurl>
      </item>
      <item name="ftp_site">
        <description>ftp_site() sends the given SITE command to the FTP server.</description>
        <signature>bool ftp_site (resource $ftp_stream , string $command)</signature>
        <docrelurl>ftp_site</docrelurl>
      </item>
      <item name="ftp_close">
        <description>ftp_close() closes the given link identifier and releases the resource.</description>
        <signature>bool ftp_close (resource $ftp_stream)</signature>
        <docrelurl>ftp_close</docrelurl>
      </item>
      <item name="ftp_set_option">
        <description>This function controls various runtime options for the specified FTP stream.</description>
        <signature>bool ftp_set_option (resource $ftp_stream , int $option , mixed $value)</signature>
        <docrelurl>ftp_set_option</docrelurl>
      </item>
      <item name="ftp_get_option">
        <description>This function returns the value for the requested option from the specified FTP connection.</description>
        <signature>mixed ftp_get_option (resource $ftp_stream , int $option)</signature>
        <docrelurl>ftp_get_option</docrelurl>
      </item>
      <item name="ftp_nb_fget">
        <description>ftp_nb_fget() retrieves a remote file from the FTP server.</description>
        <signature>int ftp_nb_fget (resource $ftp_stream , resource $handle , string $remote_file , int $mode [, int $resumepos = 0 ])</signature>
        <docrelurl>ftp_nb_fget</docrelurl>
      </item>
      <item name="ftp_nb_get">
        <description>ftp_nb_get() retrieves a remote file from the FTP server, and saves it into a local file.</description>
        <signature>int ftp_nb_get (resource $ftp_stream , string $local_file , string $remote_file , int $mode [, int $resumepos = 0 ])</signature>
        <docrelurl>ftp_nb_get</docrelurl>
      </item>
      <item name="ftp_nb_continue">
        <description>Continues retrieving/sending a file non-blocking.</description>
        <signature>int ftp_nb_continue (resource $ftp_stream)</signature>
        <docrelurl>ftp_nb_continue</docrelurl>
      </item>
      <item name="ftp_nb_put">
        <description>ftp_nb_put() stores a local file on the FTP server.</description>
        <signature>int ftp_nb_put (resource $ftp_stream , string $remote_file , string $local_file , int $mode [, int $startpos = 0 ])</signature>
        <docrelurl>ftp_nb_put</docrelurl>
      </item>
      <item name="ftp_nb_fput">
        <description>ftp_nb_fput() uploads the data from a file pointer to a remote file on the FTP server.</description>
        <signature>int ftp_nb_fput (resource $ftp_stream , string $remote_file , resource $handle , int $mode [, int $startpos = 0 ])</signature>
        <docrelurl>ftp_nb_fput</docrelurl>
      </item>
      <item name="ftp_quit">
        <description>Alias of ftp_close ftp_pwd ftp_raw FTP Functions PHP Manual ftp_quit (PHP 4, PHP 5)</description>
        <signature>Alias of ftp_close ftp_pwd</signature>
        <docrelurl>ftp_quit</docrelurl>
      </item>
      <item name="hash">
        <description>string hash ( string $algo , string $data [, bool $raw_output = false ]) Parameters algo Name of selected hashing algorithm (i.e. &quot;md5&quot;, &quot;sha256&quot;, &quot;haval160,4&quot;, etc..)</description>
        <signature>string hash (string $algo , string $data [, bool $raw_output = false ])</signature>
        <docrelurl>hash</docrelurl>
      </item>
      <item name="hash_file">
        <description>string hash_file ( string $algo , string $filename [, bool $raw_output = false ]) Parameters algo Name of selected hashing algorithm (i.e. &quot;md5&quot;, &quot;sha256&quot;, &quot;haval160,4&quot;, etc..)</description>
        <signature>string hash_file (string $algo , string $filename [, bool $raw_output = false ])</signature>
        <docrelurl>hash_file</docrelurl>
      </item>
      <item name="hash_hmac">
        <description>string hash_hmac ( string $algo , string $data , string $key [, bool $raw_output = false ]) Parameters algo Name of selected hashing algorithm (i.e. &quot;md5&quot;, &quot;sha256&quot;, &quot;haval160,4&quot;, etc..) See hash_algos() for a list of supported algorithms.</description>
        <signature>string hash_hmac (string $algo , string $data , string $key [, bool $raw_output = false ])</signature>
        <docrelurl>hash_hmac</docrelurl>
      </item>
      <item name="hash_hmac_file">
        <description>string hash_hmac_file ( string $algo , string $filename , string $key [, bool $raw_output = false ]) Parameters algo Name of selected hashing algorithm (i.e. &quot;md5&quot;, &quot;sha256&quot;, &quot;haval160,4&quot;, etc..) See hash_algos() for a list of supported algorithms.</description>
        <signature>string hash_hmac_file (string $algo , string $filename , string $key [, bool $raw_output = false ])</signature>
        <docrelurl>hash_hmac_file</docrelurl>
      </item>
      <item name="hash_init">
        <description>resource hash_init ( string $algo [, int $options = 0 [, string $key = NULL ]]) Parameters algo Name of selected hashing algorithm (i.e. &quot;md5&quot;, &quot;sha256&quot;, &quot;haval160,4&quot;, etc..)</description>
        <signature>resource hash_init (string $algo [, int $options = 0 [, string $key = NULL ]])</signature>
        <docrelurl>hash_init</docrelurl>
      </item>
      <item name="hash_update">
        <description>bool hash_update ( resource $context , string $data) Parameters context Hashing context returned by hash_init().</description>
        <signature>bool hash_update (resource $context , string $data)</signature>
        <docrelurl>hash_update</docrelurl>
      </item>
      <item name="hash_update_stream">
        <description>int hash_update_stream ( resource $context , resource $handle [, int $length = -1 ]) Parameters context Hashing context returned by hash_init().</description>
        <signature>int hash_update_stream (resource $context , resource $handle [, int $length = -1 ])</signature>
        <docrelurl>hash_update_stream</docrelurl>
      </item>
      <item name="hash_update_file">
        <description>bool hash_update_file ( resource $context , string $filename [, resource $context = NULL ]) Parameters context Hashing context returned by hash_init().</description>
        <signature>bool hash_update_file (resource $context , string $filename [, resource $context = NULL ])</signature>
        <docrelurl>hash_update_file</docrelurl>
      </item>
      <item name="hash_final">
        <description>string hash_final ( resource $context [, bool $raw_output = false ]) Parameters context Hashing context returned by hash_init().</description>
        <signature>string hash_final (resource $context [, bool $raw_output = false ])</signature>
        <docrelurl>hash_final</docrelurl>
      </item>
      <item name="hash_copy">
        <description>resource hash_copy ( resource $context) Parameters context Hashing context returned by hash_init().</description>
        <signature>resource hash_copy (resource $context)</signature>
        <docrelurl>hash_copy</docrelurl>
      </item>
      <item name="hash_algos">
        <description>array hash_algos ( void) Return Values Returns a numerically indexed array containing the list of supported hashing algorithms.</description>
        <signature>array hash_algos (void)</signature>
        <docrelurl>hash_algos</docrelurl>
      </item>
      <item name="mhash_keygen_s2k">
        <description>Generates a key according to the given hash, using an user provided password.</description>
        <signature>string mhash_keygen_s2k (int $hash , string $password , string $salt , int $bytes)</signature>
        <docrelurl>mhash_keygen_s2k</docrelurl>
      </item>
      <item name="mhash_get_block_size">
        <description>Gets the size of a block of the specified hash.</description>
        <signature>int mhash_get_block_size (int $hash)</signature>
        <docrelurl>mhash_get_block_size</docrelurl>
      </item>
      <item name="mhash_get_hash_name">
        <description>Gets the name of the specified hash.</description>
        <signature>string mhash_get_hash_name (int $hash)</signature>
        <docrelurl>mhash_get_hash_name</docrelurl>
      </item>
      <item name="mhash_count">
        <description>Gets the highest available hash ID.</description>
        <signature>int mhash_count (void)</signature>
        <docrelurl>mhash_count</docrelurl>
      </item>
      <item name="mhash">
        <description>mhash() applies a hash function specified by hash to the data.</description>
        <signature>string mhash (int $hash , string $data [, string $key ])</signature>
        <docrelurl>mhash</docrelurl>
      </item>
      <item name="iconv">
        <description>Performs a character set conversion on the string str from in_charset to out_charset.</description>
        <signature>string iconv (string $in_charset , string $out_charset , string $str)</signature>
        <docrelurl>iconv</docrelurl>
      </item>
      <item name="ob_iconv_handler">
        <description>Converts the string encoded in internal_encoding to output_encoding.</description>
        <signature>string ob_iconv_handler (string $contents , int $status)</signature>
        <docrelurl>ob_iconv_handler</docrelurl>
      </item>
      <item name="iconv_get_encoding">
        <description>Retrieve internal configuration variables of iconv extension.</description>
        <signature>mixed iconv_get_encoding ([ string $type = &quot;all&quot; ])</signature>
        <docrelurl>iconv_get_encoding</docrelurl>
      </item>
      <item name="iconv_set_encoding">
        <description>Changes the value of the internal configuration variable specified by type to charset.</description>
        <signature>bool iconv_set_encoding (string $type , string $charset)</signature>
        <docrelurl>iconv_set_encoding</docrelurl>
      </item>
      <item name="iconv_strlen">
        <description>In contrast to strlen(), iconv_strlen() counts the occurrences of characters in the given byte sequence str on the basis of the specified character set, the result of which is not necessarily identical to the length of the string in byte.</description>
        <signature>int iconv_strlen (string $str [, string $charset = ini_get(&quot;iconv.internal_encoding&quot;) ])</signature>
        <docrelurl>iconv_strlen</docrelurl>
      </item>
      <item name="iconv_substr">
        <description>Cuts a portion of str specified by the offset and length parameters.</description>
        <signature>string iconv_substr (string $str , int $offset [, int $length = iconv_strlen($str, $charset) [, string $charset = ini_get(&quot;iconv.internal_encoding&quot;) ]])</signature>
        <docrelurl>iconv_substr</docrelurl>
      </item>
      <item name="iconv_strpos">
        <description>Finds position of first occurrence of a needle within a haystack.</description>
        <signature>int iconv_strpos (string $haystack , string $needle [, int $offset = 0 [, string $charset = ini_get(&quot;iconv.internal_encoding&quot;) ]])</signature>
        <docrelurl>iconv_strpos</docrelurl>
      </item>
      <item name="iconv_strrpos">
        <description>In contrast to strpos(), the return value of iconv_strrpos() is the number of characters that appear before the needle, rather than the offset in bytes to the position where the needle has been found.</description>
        <signature>int iconv_strrpos (string $haystack , string $needle [, string $charset = ini_get(&quot;iconv.internal_encoding&quot;) ])</signature>
        <docrelurl>iconv_strrpos</docrelurl>
      </item>
      <item name="iconv_mime_encode">
        <description>Composes and returns a string that represents a valid MIME header field, which looks like the following: Subject: =?ISO-8859-1?Q?Pr=FCfung_f=FCr?= Entwerfen von einer MIME kopfzeile In the above example, &quot;Subject&quot; is the field name and the portion that begins with &quot;=?ISO-8859-1?...&quot; is the field value.</description>
        <signature>string iconv_mime_encode (string $field_name , string $field_value [, array $preferences = NULL ])</signature>
        <docrelurl>iconv_mime_encode</docrelurl>
      </item>
      <item name="iconv_mime_decode">
        <description>Decodes a MIME header field.</description>
        <signature>string iconv_mime_decode (string $encoded_header [, int $mode = 0 [, string $charset = ini_get(&quot;iconv.internal_encoding&quot;) ]])</signature>
        <docrelurl>iconv_mime_decode</docrelurl>
      </item>
      <item name="iconv_mime_decode_headers">
        <description>Decodes multiple MIME header fields at once.</description>
        <signature>array iconv_mime_decode_headers (string $encoded_headers [, int $mode = 0 [, string $charset = ini_get(&quot;iconv.internal_encoding&quot;) ]])</signature>
        <docrelurl>iconv_mime_decode_headers</docrelurl>
      </item>
      <item name="json_encode">
        <description>Returns a string containing the JSON representation of value.</description>
        <signature>string json_encode (mixed $value [, int $options = 0 ])</signature>
        <docrelurl>json_encode</docrelurl>
      </item>
      <item name="json_decode">
        <description>Takes a JSON encoded string and converts it into a PHP variable.</description>
        <signature>mixed json_decode (string $json [, bool $assoc = false [, int $depth = 512 [, int $options = 0 ]]])</signature>
        <docrelurl>json_decode</docrelurl>
      </item>
      <item name="json_last_error">
        <description>Returns the last error (if any) occurred during the last JSON encoding/decoding.</description>
        <signature>int json_last_error (void)</signature>
        <docrelurl>json_last_error</docrelurl>
      </item>
      <item name="mcrypt_ecb">
        <description>The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The mode should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT.</description>
        <signature>string mcrypt_ecb (int $cipher , string $key , string $data , int $mode)</signature>
        <docrelurl>mcrypt_ecb</docrelurl>
      </item>
      <item name="mcrypt_cbc">
        <description>The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The mode should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT.</description>
        <signature>string mcrypt_cbc (int $cipher , string $key , string $data , int $mode [, string $iv ])</signature>
        <docrelurl>mcrypt_cbc</docrelurl>
      </item>
      <item name="mcrypt_cfb">
        <description>The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The mode should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT.</description>
        <signature>string mcrypt_cfb (int $cipher , string $key , string $data , int $mode , string $iv)</signature>
        <docrelurl>mcrypt_cfb</docrelurl>
      </item>
      <item name="mcrypt_ofb">
        <description>The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or higher. The mode should be either MCRYPT_ENCRYPT or MCRYPT_DECRYPT.</description>
        <signature>string mcrypt_ofb (int $cipher , string $key , string $data , int $mode , string $iv)</signature>
        <docrelurl>mcrypt_ofb</docrelurl>
      </item>
      <item name="mcrypt_get_key_size">
        <description>The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or 2.5.x.</description>
        <signature>int mcrypt_get_key_size (int $cipher)</signature>
        <docrelurl>mcrypt_get_key_size</docrelurl>
      </item>
      <item name="mcrypt_get_block_size">
        <description>The first prototype is when linked against libmcrypt 2.2.x, the second when linked against libmcrypt 2.4.x or 2.5.x.</description>
        <signature>int mcrypt_get_block_size (int $cipher)</signature>
        <docrelurl>mcrypt_get_block_size</docrelurl>
      </item>
      <item name="mcrypt_get_cipher_name">
        <description>mcrypt_get_cipher_name() is used to get the name of the specified cipher.</description>
        <signature>string mcrypt_get_cipher_name (int $cipher)</signature>
        <docrelurl>mcrypt_get_cipher_name</docrelurl>
      </item>
      <item name="mcrypt_create_iv">
        <description>Creates an initialization vector (IV) from a random source.</description>
        <signature>string mcrypt_create_iv (int $size [, int $source = MCRYPT_DEV_RANDOM ])</signature>
        <docrelurl>mcrypt_create_iv</docrelurl>
      </item>
      <item name="mcrypt_list_algorithms">
        <description>Gets the list of all supported algorithms in the lib_dir parameter.</description>
        <signature>array mcrypt_list_algorithms ([ string $lib_dir = ini_get(&quot;mcrypt.algorithms_dir&quot;) ])</signature>
        <docrelurl>mcrypt_list_algorithms</docrelurl>
      </item>
      <item name="mcrypt_list_modes">
        <description>Gets the list of all supported modes in the lib_dir parameter.</description>
        <signature>array mcrypt_list_modes ([ string $lib_dir = ini_get(&quot;mcrypt.modes_dir&quot;) ])</signature>
        <docrelurl>mcrypt_list_modes</docrelurl>
      </item>
      <item name="mcrypt_get_iv_size">
        <description>Gets the size of the IV belonging to a specific cipher/mode combination.</description>
        <signature>int mcrypt_get_iv_size (string $cipher , string $mode)</signature>
        <docrelurl>mcrypt_get_iv_size</docrelurl>
      </item>
      <item name="mcrypt_encrypt">
        <description>Encrypts the data and returns it.</description>
        <signature>string mcrypt_encrypt (string $cipher , string $key , string $data , string $mode [, string $iv ])</signature>
        <docrelurl>mcrypt_encrypt</docrelurl>
      </item>
      <item name="mcrypt_decrypt">
        <description>Decrypts the data and returns the unencrypted data.</description>
        <signature>string mcrypt_decrypt (string $cipher , string $key , string $data , string $mode [, string $iv ])</signature>
        <docrelurl>mcrypt_decrypt</docrelurl>
      </item>
      <item name="mcrypt_module_open">
        <description>This function opens the module of the algorithm and the mode to be used. The name of the algorithm is specified in algorithm, e.g. &quot;twofish&quot; or is one of the MCRYPT_ciphername constants. The module is closed by calling mcrypt_module_close().</description>
        <signature>resource mcrypt_module_open (string $algorithm , string $algorithm_directory , string $mode , string $mode_directory)</signature>
        <docrelurl>mcrypt_module_open</docrelurl>
      </item>
      <item name="mcrypt_generic_init">
        <description>You need to call this function before every call to mcrypt_generic() or mdecrypt_generic().</description>
        <signature>int mcrypt_generic_init (resource $td , string $key , string $iv)</signature>
        <docrelurl>mcrypt_generic_init</docrelurl>
      </item>
      <item name="mcrypt_generic">
        <description>This function encrypts data. The data is padded with &quot;\0&quot; to make sure the length of the data is n * blocksize. This function returns the encrypted data. Note that the length of the returned string can in fact be longer than the input, due to the padding of the data.</description>
        <signature>string mcrypt_generic (resource $td , string $data)</signature>
        <docrelurl>mcrypt_generic</docrelurl>
      </item>
      <item name="mdecrypt_generic">
        <description>This function decrypts data. Note that the length of the returned string can in fact be longer than the unencrypted string, due to the padding of the data.</description>
        <signature>string mdecrypt_generic (resource $td , string $data)</signature>
        <docrelurl>mdecrypt_generic</docrelurl>
      </item>
      <item name="mcrypt_generic_end">
        <description>Warning This function is deprecated, use mcrypt_generic_deinit() instead. It can cause crashes when used with mcrypt_module_close() due to multiple buffer frees.</description>
        <signature>bool mcrypt_generic_end (resource $td)</signature>
        <docrelurl>mcrypt_generic_end</docrelurl>
      </item>
      <item name="mcrypt_generic_deinit">
        <description>This function terminates encryption specified by the encryption descriptor (td). It clears all buffers, but does not close the module. You need to call mcrypt_module_close() yourself. (But PHP does this for you at the end of the script.)</description>
        <signature>bool mcrypt_generic_deinit (resource $td)</signature>
        <docrelurl>mcrypt_generic_deinit</docrelurl>
      </item>
      <item name="mcrypt_enc_self_test">
        <description>This function runs the self test on the algorithm specified by the descriptor td.</description>
        <signature>int mcrypt_enc_self_test (resource $td)</signature>
        <docrelurl>mcrypt_enc_self_test</docrelurl>
      </item>
      <item name="mcrypt_enc_is_block_algorithm_mode">
        <description>Tells whether the algorithm of the opened mode works on blocks (e.g. FALSE for stream, and TRUE for cbc, cfb, ofb)..</description>
        <signature>bool mcrypt_enc_is_block_algorithm_mode (resource $td)</signature>
        <docrelurl>mcrypt_enc_is_block_algorithm_mode</docrelurl>
      </item>
      <item name="mcrypt_enc_is_block_algorithm">
        <description>Tells whether the algorithm of the opened mode is a block algorithm.</description>
        <signature>bool mcrypt_enc_is_block_algorithm (resource $td)</signature>
        <docrelurl>mcrypt_enc_is_block_algorithm</docrelurl>
      </item>
      <item name="mcrypt_enc_is_block_mode">
        <description>Tells whether the opened mode outputs blocks (e.g. TRUE for cbc and ecb, and FALSE for cfb and stream).</description>
        <signature>bool mcrypt_enc_is_block_mode (resource $td)</signature>
        <docrelurl>mcrypt_enc_is_block_mode</docrelurl>
      </item>
      <item name="mcrypt_enc_get_block_size">
        <description>Gets the blocksize of the opened algorithm.</description>
        <signature>int mcrypt_enc_get_block_size (resource $td)</signature>
        <docrelurl>mcrypt_enc_get_block_size</docrelurl>
      </item>
      <item name="mcrypt_enc_get_key_size">
        <description>Gets the maximum supported key size of the algorithm in bytes.</description>
        <signature>int mcrypt_enc_get_key_size (resource $td)</signature>
        <docrelurl>mcrypt_enc_get_key_size</docrelurl>
      </item>
      <item name="mcrypt_enc_get_supported_key_sizes">
        <description>Gets the supported key sizes of the opened algorithm.</description>
        <signature>array mcrypt_enc_get_supported_key_sizes (resource $td)</signature>
        <docrelurl>mcrypt_enc_get_supported_key_sizes</docrelurl>
      </item>
      <item name="mcrypt_enc_get_iv_size">
        <description>This function returns the size of the IV of the algorithm specified by the encryption descriptor in bytes. An IV is used in cbc, cfb and ofb modes, and in some algorithms in stream mode.</description>
        <signature>int mcrypt_enc_get_iv_size (resource $td)</signature>
        <docrelurl>mcrypt_enc_get_iv_size</docrelurl>
      </item>
      <item name="mcrypt_enc_get_algorithms_name">
        <description>This function returns the name of the algorithm.</description>
        <signature>string mcrypt_enc_get_algorithms_name (resource $td)</signature>
        <docrelurl>mcrypt_enc_get_algorithms_name</docrelurl>
      </item>
      <item name="mcrypt_enc_get_modes_name">
        <description>This function returns the name of the mode.</description>
        <signature>string mcrypt_enc_get_modes_name (resource $td)</signature>
        <docrelurl>mcrypt_enc_get_modes_name</docrelurl>
      </item>
      <item name="mcrypt_module_self_test">
        <description>This function runs the self test on the algorithm specified.</description>
        <signature>bool mcrypt_module_self_test (string $algorithm [, string $lib_dir ])</signature>
        <docrelurl>mcrypt_module_self_test</docrelurl>
      </item>
      <item name="mcrypt_module_is_block_algorithm_mode">
        <description>This function returns TRUE if the mode is for use with block algorithms, otherwise it returns FALSE. (e.g. FALSE for stream, and TRUE for cbc, cfb, ofb).</description>
        <signature>bool mcrypt_module_is_block_algorithm_mode (string $mode [, string $lib_dir ])</signature>
        <docrelurl>mcrypt_module_is_block_algorithm_mode</docrelurl>
      </item>
      <item name="mcrypt_module_is_block_algorithm">
        <description>This function returns TRUE if the specified algorithm is a block algorithm, or FALSE if it is a stream one.</description>
        <signature>bool mcrypt_module_is_block_algorithm (string $algorithm [, string $lib_dir ])</signature>
        <docrelurl>mcrypt_module_is_block_algorithm</docrelurl>
      </item>
      <item name="mcrypt_module_is_block_mode">
        <description>This function returns TRUE if the mode outputs blocks of bytes or FALSE if it outputs just bytes. (e.g. TRUE for cbc and ecb, and FALSE for cfb and stream).</description>
        <signature>bool mcrypt_module_is_block_mode (string $mode [, string $lib_dir ])</signature>
        <docrelurl>mcrypt_module_is_block_mode</docrelurl>
      </item>
      <item name="mcrypt_module_get_algo_block_size">
        <description>Gets the blocksize of the specified algorithm.</description>
        <signature>int mcrypt_module_get_algo_block_size (string $algorithm [, string $lib_dir ])</signature>
        <docrelurl>mcrypt_module_get_algo_block_size</docrelurl>
      </item>
      <item name="mcrypt_module_get_algo_key_size">
        <description>Gets the maximum supported keysize of the opened mode.</description>
        <signature>int mcrypt_module_get_algo_key_size (string $algorithm [, string $lib_dir ])</signature>
        <docrelurl>mcrypt_module_get_algo_key_size</docrelurl>
      </item>
      <item name="mcrypt_module_get_supported_key_sizes">
        <description>Returns an array with the key sizes supported by the specified algorithm. If it returns an empty array then all key sizes between 1 and mcrypt_module_get_algo_key_size() are supported by the algorithm.</description>
        <signature>array mcrypt_module_get_supported_key_sizes (string $algorithm [, string $lib_dir ])</signature>
        <docrelurl>mcrypt_module_get_supported_key_sizes</docrelurl>
      </item>
      <item name="mcrypt_module_close">
        <description>Closes the specified encryption handle.</description>
        <signature>bool mcrypt_module_close (resource $td)</signature>
        <docrelurl>mcrypt_module_close</docrelurl>
      </item>
      <item name="odbc_autocommit">
        <description>Toggles autocommit behaviour.</description>
        <signature>mixed odbc_autocommit (resource $connection_id [, bool $OnOff = false ])</signature>
        <docrelurl>odbc_autocommit</docrelurl>
      </item>
      <item name="odbc_binmode">
        <description>Enables handling of binary column data. ODBC SQL types affected are BINARY, VARBINARY, and LONGVARBINARY.</description>
        <signature>bool odbc_binmode (resource $result_id , int $mode)</signature>
        <docrelurl>odbc_binmode</docrelurl>
      </item>
      <item name="odbc_close">
        <description>Closes down the connection to the database server.</description>
        <signature>void odbc_close (resource $connection_id)</signature>
        <docrelurl>odbc_close</docrelurl>
      </item>
      <item name="odbc_close_all">
        <description>odbc_close_all() will close down all connections to database server(s).</description>
        <signature>void odbc_close_all (void)</signature>
        <docrelurl>odbc_close_all</docrelurl>
      </item>
      <item name="odbc_columns">
        <description>Lists all columns in the requested range.</description>
        <signature>resource odbc_columns (resource $connection_id [, string $qualifier [, string $schema [, string $table_name [, string $column_name ]]]])</signature>
        <docrelurl>odbc_columns</docrelurl>
      </item>
      <item name="odbc_commit">
        <description>Commits all pending transactions on the connection.</description>
        <signature>bool odbc_commit (resource $connection_id)</signature>
        <docrelurl>odbc_commit</docrelurl>
      </item>
      <item name="odbc_connect">
        <description>resource odbc_connect ( string $dsn , string $user , string $password [, int $cursor_type ]) The connection id returned by this functions is needed by other ODBC functions. You can have multiple connections open at once as long as they either use different db or different credentials.</description>
        <signature>resource odbc_connect (string $dsn , string $user , string $password [, int $cursor_type ])</signature>
        <docrelurl>odbc_connect</docrelurl>
      </item>
      <item name="odbc_cursor">
        <description>Gets the cursorname for the given result_id.</description>
        <signature>string odbc_cursor (resource $result_id)</signature>
        <docrelurl>odbc_cursor</docrelurl>
      </item>
      <item name="odbc_data_source">
        <description>This function will return the list of available DSN (after calling it several times).</description>
        <signature>array odbc_data_source (resource $connection_id , int $fetch_type)</signature>
        <docrelurl>odbc_data_source</docrelurl>
      </item>
      <item name="odbc_execute">
        <description>Executes a statement prepared with odbc_prepare().</description>
        <signature>bool odbc_execute (resource $result_id [, array $parameters_array ])</signature>
        <docrelurl>odbc_execute</docrelurl>
      </item>
      <item name="odbc_error">
        <description>string odbc_error ([ resource $connection_id ]) Returns a six-digit ODBC state, or an empty string if there has been no errors.</description>
        <signature>string odbc_error ([ resource $connection_id ])</signature>
        <docrelurl>odbc_error</docrelurl>
      </item>
      <item name="odbc_errormsg">
        <description>string odbc_errormsg ([ resource $connection_id ]) Returns a string containing the last ODBC error message, or an empty string if there has been no errors.</description>
        <signature>string odbc_errormsg ([ resource $connection_id ])</signature>
        <docrelurl>odbc_errormsg</docrelurl>
      </item>
      <item name="odbc_exec">
        <description>Sends an SQL statement to the database server.</description>
        <signature>resource odbc_exec (resource $connection_id , string $query_string [, int $flags ])</signature>
        <docrelurl>odbc_exec</docrelurl>
      </item>
      <item name="odbc_fetch_array">
        <description>Fetch an associative array from an ODBC query. See the changelog below for when this function is available.</description>
        <signature>array odbc_fetch_array (resource $result [, int $rownumber ])</signature>
        <docrelurl>odbc_fetch_array</docrelurl>
      </item>
      <item name="odbc_fetch_object">
        <description>Fetch an object from an ODBC query. See the changelog below for when this function is available.</description>
        <signature>object odbc_fetch_object (resource $result [, int $rownumber ])</signature>
        <docrelurl>odbc_fetch_object</docrelurl>
      </item>
      <item name="odbc_fetch_row">
        <description>Fetches a row of the data that was returned by odbc_do() or odbc_exec(). After odbc_fetch_row() is called, the fields of that row can be accessed with odbc_result().</description>
        <signature>bool odbc_fetch_row (resource $result_id [, int $row_number ])</signature>
        <docrelurl>odbc_fetch_row</docrelurl>
      </item>
      <item name="odbc_fetch_into">
        <description>Fetch one result row into array.</description>
        <signature>int odbc_fetch_into (resource $result_id , array &amp;$result_array [, int $rownumber ])</signature>
        <docrelurl>odbc_fetch_into</docrelurl>
      </item>
      <item name="odbc_field_len">
        <description>Gets the length of the field referenced by number in the given result identifier.</description>
        <signature>int odbc_field_len (resource $result_id , int $field_number)</signature>
        <docrelurl>odbc_field_len</docrelurl>
      </item>
      <item name="odbc_field_scale">
        <description>Gets the scale of the field referenced by number in the given result identifier.</description>
        <signature>int odbc_field_scale (resource $result_id , int $field_number)</signature>
        <docrelurl>odbc_field_scale</docrelurl>
      </item>
      <item name="odbc_field_name">
        <description>Gets the name of the field occupying the given column number in the given result identifier.</description>
        <signature>string odbc_field_name (resource $result_id , int $field_number)</signature>
        <docrelurl>odbc_field_name</docrelurl>
      </item>
      <item name="odbc_field_type">
        <description>Gets the SQL type of the field referenced by number in the given result identifier.</description>
        <signature>string odbc_field_type (resource $result_id , int $field_number)</signature>
        <docrelurl>odbc_field_type</docrelurl>
      </item>
      <item name="odbc_field_num">
        <description>Gets the number of the column slot that corresponds to the named field in the given result identifier.</description>
        <signature>int odbc_field_num (resource $result_id , string $field_name)</signature>
        <docrelurl>odbc_field_num</docrelurl>
      </item>
      <item name="odbc_free_result">
        <description>Free resources associated with a result.</description>
        <signature>bool odbc_free_result (resource $result_id)</signature>
        <docrelurl>odbc_free_result</docrelurl>
      </item>
      <item name="odbc_gettypeinfo">
        <description>Retrieves information about data types supported by the data source.</description>
        <signature>resource odbc_gettypeinfo (resource $connection_id [, int $data_type ])</signature>
        <docrelurl>odbc_gettypeinfo</docrelurl>
      </item>
      <item name="odbc_longreadlen">
        <description>Enables handling of LONG and LONGVARBINARY columns.</description>
        <signature>bool odbc_longreadlen (resource $result_id , int $length)</signature>
        <docrelurl>odbc_longreadlen</docrelurl>
      </item>
      <item name="odbc_next_result">
        <description>Checks if there are more result sets available as well as allowing access to the next result set via odbc_fetch_array(), odbc_fetch_row(), odbc_result(), etc.</description>
        <signature>bool odbc_next_result (resource $result_id)</signature>
        <docrelurl>odbc_next_result</docrelurl>
      </item>
      <item name="odbc_num_fields">
        <description>Gets the number of fields (columns) in an ODBC result.</description>
        <signature>int odbc_num_fields (resource $result_id)</signature>
        <docrelurl>odbc_num_fields</docrelurl>
      </item>
      <item name="odbc_num_rows">
        <description>Gets the number of rows in a result. For INSERT, UPDATE and DELETE statements odbc_num_rows() returns the number of rows affected. For a SELECT clause this can be the number of rows available.</description>
        <signature>int odbc_num_rows (resource $result_id)</signature>
        <docrelurl>odbc_num_rows</docrelurl>
      </item>
      <item name="odbc_pconnect">
        <description>Opens a persistent database connection.</description>
        <signature>resource odbc_pconnect (string $dsn , string $user , string $password [, int $cursor_type ])</signature>
        <docrelurl>odbc_pconnect</docrelurl>
      </item>
      <item name="odbc_prepare">
        <description>Prepares a statement for execution. The result identifier can be used later to execute the statement with odbc_execute().</description>
        <signature>resource odbc_prepare (resource $connection_id , string $query_string)</signature>
        <docrelurl>odbc_prepare</docrelurl>
      </item>
      <item name="odbc_result">
        <description>Get result data</description>
        <signature>mixed odbc_result (resource $result_id , mixed $field)</signature>
        <docrelurl>odbc_result</docrelurl>
      </item>
      <item name="odbc_result_all">
        <description>Prints all rows from a result identifier produced by odbc_exec(). The result is printed in HTML table format.</description>
        <signature>int odbc_result_all (resource $result_id [, string $format ])</signature>
        <docrelurl>odbc_result_all</docrelurl>
      </item>
      <item name="odbc_rollback">
        <description>Rolls back all pending statements on the connection.</description>
        <signature>bool odbc_rollback (resource $connection_id)</signature>
        <docrelurl>odbc_rollback</docrelurl>
      </item>
      <item name="odbc_setoption">
        <description>This function allows fiddling with the ODBC options for a particular connection or query result. It was written to help find work around to problems in quirky ODBC drivers. You should probably only use this function if you are an ODBC programmer and understand the effects the various options will have. You will certainly need a good ODBC reference to explain all the different options and values that can be used. Different driver versions support different options.</description>
        <signature>bool odbc_setoption (resource $id , int $function , int $option , int $param)</signature>
        <docrelurl>odbc_setoption</docrelurl>
      </item>
      <item name="odbc_specialcolumns">
        <description>Retrieves either the optimal set of columns that uniquely identifies a row in the table, or columns that are automatically updated when any value in the row is updated by a transaction.</description>
        <signature>resource odbc_specialcolumns (resource $connection_id , int $type , string $qualifier , string $owner , string $table , int $scope , int $nullable)</signature>
        <docrelurl>odbc_specialcolumns</docrelurl>
      </item>
      <item name="odbc_statistics">
        <description>Get statistics about a table and its indexes.</description>
        <signature>resource odbc_statistics (resource $connection_id , string $qualifier , string $owner , string $table_name , int $unique , int $accuracy)</signature>
        <docrelurl>odbc_statistics</docrelurl>
      </item>
      <item name="odbc_tables">
        <description>Lists all tables in the requested range.</description>
        <signature>resource odbc_tables (resource $connection_id [, string $qualifier [, string $owner [, string $name [, string $types ]]]])</signature>
        <docrelurl>odbc_tables</docrelurl>
      </item>
      <item name="odbc_primarykeys">
        <description>Returns a result identifier that can be used to fetch the column names that comprise the primary key for a table.</description>
        <signature>resource odbc_primarykeys (resource $connection_id , string $qualifier , string $owner , string $table)</signature>
        <docrelurl>odbc_primarykeys</docrelurl>
      </item>
      <item name="odbc_columnprivileges">
        <description>Lists columns and associated privileges for the given table.</description>
        <signature>resource odbc_columnprivileges (resource $connection_id , string $qualifier , string $owner , string $table_name , string $column_name)</signature>
        <docrelurl>odbc_columnprivileges</docrelurl>
      </item>
      <item name="odbc_tableprivileges">
        <description>Lists tables in the requested range and the privileges associated with each table.</description>
        <signature>resource odbc_tableprivileges (resource $connection_id , string $qualifier , string $owner , string $name)</signature>
        <docrelurl>odbc_tableprivileges</docrelurl>
      </item>
      <item name="odbc_foreignkeys">
        <description>Retrieves a list of foreign keys in the specified table or a list of foreign keys in other tables that refer to the primary key in the specified table</description>
        <signature>resource odbc_foreignkeys (resource $connection_id , string $pk_qualifier , string $pk_owner , string $pk_table , string $fk_qualifier , string $fk_owner , string $fk_table)</signature>
        <docrelurl>odbc_foreignkeys</docrelurl>
      </item>
      <item name="odbc_procedures">
        <description>Lists all procedures in the requested range.</description>
        <signature>resource odbc_procedures (resource $connection_id)</signature>
        <docrelurl>odbc_procedures</docrelurl>
      </item>
      <item name="odbc_procedurecolumns">
        <description>Retrieve information about parameters to procedures.</description>
        <signature>resource odbc_procedurecolumns (resource $connection_id)</signature>
        <docrelurl>odbc_procedurecolumns</docrelurl>
      </item>
      <item name="odbc_do">
        <description>Alias of odbc_exec odbc_data_source odbc_error ODBC Functions PHP Manual odbc_do (PHP 4, PHP 5)</description>
        <signature>Alias of odbc_exec odbc_data_source</signature>
        <docrelurl>odbc_do</docrelurl>
      </item>
      <item name="odbc_field_precision">
        <description>Alias of odbc_field_len odbc_field_num odbc_field_scale ODBC Functions PHP Manual odbc_field_precision (PHP 4, PHP 5)</description>
        <signature>Alias of odbc_field_len odbc_field_num</signature>
        <docrelurl>odbc_field_precision</docrelurl>
      </item>
      <item name="preg_match">
        <description>Searches subject for a match to the regular expression given in pattern.</description>
        <signature>int preg_match (string $pattern , string $subject [, array &amp;$matches [, int $flags = 0 [, int $offset = 0 ]]])</signature>
        <docrelurl>preg_match</docrelurl>
      </item>
      <item name="preg_match_all">
        <description>Searches subject for all matches to the regular expression given in pattern and puts them in matches in the order specified by flags.</description>
        <signature>int preg_match_all (string $pattern , string $subject , array &amp;$matches [, int $flags = PREG_PATTERN_ORDER [, int $offset = 0 ]])</signature>
        <docrelurl>preg_match_all</docrelurl>
      </item>
      <item name="preg_replace">
        <description>Searches subject for matches to pattern and replaces them with replacement.</description>
        <signature>mixed preg_replace (mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]])</signature>
        <docrelurl>preg_replace</docrelurl>
      </item>
      <item name="preg_replace_callback">
        <description>The behavior of this function is almost identical to preg_replace(), except for the fact that instead of replacement parameter, one should specify a callback.</description>
        <signature>mixed preg_replace_callback (mixed $pattern , callback $callback , mixed $subject [, int $limit = -1 [, int &amp;$count ]])</signature>
        <docrelurl>preg_replace_callback</docrelurl>
      </item>
      <item name="preg_filter">
        <description>preg_filter() is identical to preg_replace() except it only returns the (possibly transformed) subjects where there was a match. For details about how this function works, read the preg_replace() documentation.</description>
        <signature>mixed preg_filter (mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]])</signature>
        <docrelurl>preg_filter</docrelurl>
      </item>
      <item name="preg_split">
        <description>Split the given string by a regular expression.</description>
        <signature>array preg_split (string $pattern , string $subject [, int $limit = -1 [, int $flags = 0 ]])</signature>
        <docrelurl>preg_split</docrelurl>
      </item>
      <item name="preg_quote">
        <description>preg_quote() takes str and puts a backslash in front of every character that is part of the regular expression syntax. This is useful if you have a run-time string that you need to match in some text and the string may contain special regex characters.</description>
        <signature>string preg_quote (string $str [, string $delimiter = NULL ])</signature>
        <docrelurl>preg_quote</docrelurl>
      </item>
      <item name="preg_grep">
        <description>Returns the array consisting of the elements of the input array that match the given pattern.</description>
        <signature>array preg_grep (string $pattern , array $input [, int $flags = 0 ])</signature>
        <docrelurl>preg_grep</docrelurl>
      </item>
      <item name="preg_last_error">
        <description>Returns the error code of the last PCRE regex execution.</description>
        <signature>int preg_last_error (void)</signature>
        <docrelurl>preg_last_error</docrelurl>
      </item>
      <item name="session_name">
        <description>session_name() returns the name of the current session. If name is given, session_name() will update the session name and return the old session name.</description>
        <signature>string session_name ([ string $name ])</signature>
        <docrelurl>session_name</docrelurl>
      </item>
      <item name="session_module_name">
        <description>session_module_name() gets the name of the current session module.</description>
        <signature>string session_module_name ([ string $module ])</signature>
        <docrelurl>session_module_name</docrelurl>
      </item>
      <item name="session_save_path">
        <description>session_save_path() returns the path of the current directory used to save session data.</description>
        <signature>string session_save_path ([ string $path ])</signature>
        <docrelurl>session_save_path</docrelurl>
      </item>
      <item name="session_id">
        <description>session_id() is used to get or set the session id for the current session.</description>
        <signature>string session_id ([ string $id ])</signature>
        <docrelurl>session_id</docrelurl>
      </item>
      <item name="session_regenerate_id">
        <description>session_regenerate_id() will replace the current session id with a new one, and keep the current session information.</description>
        <signature>bool session_regenerate_id ([ bool $delete_old_session = false ])</signature>
        <docrelurl>session_regenerate_id</docrelurl>
      </item>
      <item name="session_decode">
        <description>session_decode() decodes the session data in data, setting variables stored in the session.</description>
        <signature>bool session_decode (string $data)</signature>
        <docrelurl>session_decode</docrelurl>
      </item>
      <item name="session_register">
        <description>session_register() accepts a variable number of arguments, any of which can be either a string holding the name of a variable or an array consisting of variable names or other arrays. For each name, session_register() registers the global variable with that name in the current session.</description>
        <signature>bool session_register (mixed $name [, mixed $... ])</signature>
        <docrelurl>session_register</docrelurl>
      </item>
      <item name="session_unregister">
        <description>session_unregister() unregisters the global variable named name from the current session.</description>
        <signature>bool session_unregister (string $name)</signature>
        <docrelurl>session_unregister</docrelurl>
      </item>
      <item name="session_is_registered">
        <description>Finds out whether a global variable is registered in a session.</description>
        <signature>bool session_is_registered (string $name)</signature>
        <docrelurl>session_is_registered</docrelurl>
      </item>
      <item name="session_encode">
        <description>session_encode() returns a string with the contents of the current session encoded within.</description>
        <signature>string session_encode (void)</signature>
        <docrelurl>session_encode</docrelurl>
      </item>
      <item name="session_start">
        <description>session_start() creates a session or resumes the current one based on a session identifier passed via a GET or POST request, or passed via a cookie.</description>
        <signature>bool session_start (void)</signature>
        <docrelurl>session_start</docrelurl>
      </item>
      <item name="session_destroy">
        <description>bool session_destroy ( void) session_destroy() destroys all of the data associated with the current session. It does not unset any of the global variables associated with the session, or unset the session cookie. To use the session variables again, session_start() has to be called.</description>
        <signature>bool session_destroy (void)</signature>
        <docrelurl>session_destroy</docrelurl>
      </item>
      <item name="session_unset">
        <description>The session_unset() function frees all session variables currently registered.</description>
        <signature>void session_unset (void)</signature>
        <docrelurl>session_unset</docrelurl>
      </item>
      <item name="session_set_save_handler">
        <description>session_set_save_handler() sets the user-level session storage functions which are used for storing and retrieving data associated with a session. This is most useful when a storage method other than those supplied by PHP sessions is preferred. i.e. Storing the session data in a local database.</description>
        <signature>bool session_set_save_handler (callback $open , callback $close , callback $read , callback $write , callback $destroy , callback $gc)</signature>
        <docrelurl>session_set_save_handler</docrelurl>
      </item>
      <item name="session_cache_limiter">
        <description>session_cache_limiter() returns the name of the current cache limiter.</description>
        <signature>string session_cache_limiter ([ string $cache_limiter ])</signature>
        <docrelurl>session_cache_limiter</docrelurl>
      </item>
      <item name="session_cache_expire">
        <description>session_cache_expire() returns the current setting of session.cache_expire.</description>
        <signature>int session_cache_expire ([ string $new_cache_expire ])</signature>
        <docrelurl>session_cache_expire</docrelurl>
      </item>
      <item name="session_set_cookie_params">
        <description>Set cookie parameters defined in the php.ini file. The effect of this function only lasts for the duration of the script. Thus, you need to call session_set_cookie_params() for every request and before session_start() is called.</description>
        <signature>void session_set_cookie_params (int $lifetime [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]])</signature>
        <docrelurl>session_set_cookie_params</docrelurl>
      </item>
      <item name="session_get_cookie_params">
        <description>Gets the session cookie parameters.</description>
        <signature>array session_get_cookie_params (void)</signature>
        <docrelurl>session_get_cookie_params</docrelurl>
      </item>
      <item name="session_write_close">
        <description>End the current session and store session data.</description>
        <signature>void session_write_close (void)</signature>
        <docrelurl>session_write_close</docrelurl>
      </item>
      <item name="session_commit">
        <description>Alias of session_write_close session_cache_limiter session_decode Session Functions PHP Manual session_commit (PHP 4 &gt;= 4.4.0, PHP 5)</description>
        <signature>Alias of session_write_close session_cache_limiter</signature>
        <docrelurl>session_commit</docrelurl>
      </item>
      <item name="spl_classes">
        <description>This function returns an array with the current available SPL classes.</description>
        <signature>array spl_classes (void)</signature>
        <docrelurl>spl_classes</docrelurl>
      </item>
      <item name="spl_autoload">
        <description>This function is intended to be used as a default implementation for __autoload(). If nothing else is specified and spl_autoload_register() is called without any parameters then this functions will be used for any later call to __autoload().</description>
        <signature>void spl_autoload (string $class_name [, string $file_extensions = spl_autoload_extensions() ])</signature>
        <docrelurl>spl_autoload</docrelurl>
      </item>
      <item name="spl_autoload_extensions">
        <description>This function can modify and check the file extensions that the built in __autoload() fallback function spl_autoload() will be using.</description>
        <signature>string spl_autoload_extensions ([ string $file_extensions ])</signature>
        <docrelurl>spl_autoload_extensions</docrelurl>
      </item>
      <item name="spl_autoload_register">
        <description>Register a function with the spl provided __autoload stack. If the stack is not yet activated it will be activated.</description>
        <signature>bool spl_autoload_register ([ callback $autoload_function [, bool $throw = true [, bool $prepend = false ]]])</signature>
        <docrelurl>spl_autoload_register</docrelurl>
      </item>
      <item name="spl_autoload_unregister">
        <description>Unregister a function from the spl provided __autoload stack. If the stack is activated and empty after unregistering the given function then it will be deactivated.</description>
        <signature>bool spl_autoload_unregister (mixed $autoload_function)</signature>
        <docrelurl>spl_autoload_unregister</docrelurl>
      </item>
      <item name="spl_autoload_functions">
        <description>Get all registered __autoload() functions.</description>
        <signature>array spl_autoload_functions (void)</signature>
        <docrelurl>spl_autoload_functions</docrelurl>
      </item>
      <item name="spl_autoload_call">
        <description>This function can be used to manually search for a class or interface using the registered __autoload functions.</description>
        <signature>void spl_autoload_call (string $class_name)</signature>
        <docrelurl>spl_autoload_call</docrelurl>
      </item>
      <item name="class_parents">
        <description>This function returns an array with the name of the parent classes of the given class.</description>
        <signature>array class_parents (mixed $class [, bool $autoload = true ])</signature>
        <docrelurl>class_parents</docrelurl>
      </item>
      <item name="class_implements">
        <description>This function returns an array with the names of the interfaces that the given class and its parents implement.</description>
        <signature>array class_implements (mixed $class [, bool $autoload = true ])</signature>
        <docrelurl>class_implements</docrelurl>
      </item>
      <item name="spl_object_hash">
        <description>This function returns a unique identifier for the object. This id can be used as a hash key for storing objects or for identifying an object.</description>
        <signature>string spl_object_hash (object $obj)</signature>
        <docrelurl>spl_object_hash</docrelurl>
      </item>
      <item name="iterator_to_array">
        <description>Copy the elements of an iterator into an array.</description>
        <signature>array iterator_to_array (Traversable $iterator [, bool $use_keys = true ])</signature>
        <docrelurl>iterator_to_array</docrelurl>
      </item>
      <item name="iterator_count">
        <description>Count the elements in an iterator.</description>
        <signature>int iterator_count (Traversable $iterator)</signature>
        <docrelurl>iterator_count</docrelurl>
      </item>
      <item name="iterator_apply">
        <description>Calls a function for every element in an iterator.</description>
        <signature>int iterator_apply (Traversable $iterator , callback $function [, array $args ])</signature>
        <docrelurl>iterator_apply</docrelurl>
      </item>
      <item name="constant">
        <description>mixed constant ( string $name) Return the value of the constant indicated by name.</description>
        <signature>mixed constant (string $name)</signature>
        <docrelurl>constant</docrelurl>
      </item>
      <item name="bin2hex">
        <description>Returns an ASCII string containing the hexadecimal representation of str. The conversion is done byte-wise with the high-nibble first.</description>
        <signature>string bin2hex (string $str)</signature>
        <docrelurl>bin2hex</docrelurl>
      </item>
      <item name="sleep">
        <description>int sleep ( int $seconds) Delays the program execution for the given number of seconds.</description>
        <signature>int sleep (int $seconds)</signature>
        <docrelurl>sleep</docrelurl>
      </item>
      <item name="usleep">
        <description>Delays program execution for the given number of micro seconds.</description>
        <signature>void usleep (int $micro_seconds)</signature>
        <docrelurl>usleep</docrelurl>
      </item>
      <item name="time_nanosleep">
        <description>Delays program execution for the given number of seconds and nanoseconds.</description>
        <signature>mixed time_nanosleep (int $seconds , int $nanoseconds)</signature>
        <docrelurl>time_nanosleep</docrelurl>
      </item>
      <item name="time_sleep_until">
        <description>Makes the script sleep until the specified timestamp.</description>
        <signature>bool time_sleep_until (float $timestamp)</signature>
        <docrelurl>time_sleep_until</docrelurl>
      </item>
      <item name="flush">
        <description>Flushes the write buffers of PHP and whatever backend PHP is using (CGI, a web server, etc). This attempts to push current output all the way to the browser with a few caveats.</description>
        <signature>void flush (void)</signature>
        <docrelurl>flush</docrelurl>
      </item>
      <item name="wordwrap">
        <description>Wraps a string to a given number of characters using a string break character.</description>
        <signature>string wordwrap (string $str [, int $width = 75 [, string $break = &quot;\n&quot; [, bool $cut = false ]]])</signature>
        <docrelurl>wordwrap</docrelurl>
      </item>
      <item name="htmlspecialchars">
        <description>Certain characters have special significance in HTML, and should be represented by HTML entities if they are to preserve their meanings. This function returns a string with some of these conversions made; the translations made are those most useful for everyday web programming. If you require all HTML character entities to be translated, use htmlentities() instead.</description>
        <signature>string htmlspecialchars (string $string [, int $flags = ENT_COMPAT [, string $charset [, bool $double_encode = true ]]])</signature>
        <docrelurl>htmlspecialchars</docrelurl>
      </item>
      <item name="htmlentities">
        <description>This function is identical to htmlspecialchars() in all ways, except with htmlentities(), all characters which have HTML character entity equivalents are translated into these entities.</description>
        <signature>string htmlentities (string $string [, int $flags = ENT_COMPAT [, string $charset [, bool $double_encode = true ]]])</signature>
        <docrelurl>htmlentities</docrelurl>
      </item>
      <item name="html_entity_decode">
        <description>html_entity_decode() is the opposite of htmlentities() in that it converts all HTML entities to their applicable characters from string.</description>
        <signature>string html_entity_decode (string $string [, int $quote_style = ENT_COMPAT [, string $charset = &apos;UTF-8&apos; ]])</signature>
        <docrelurl>html_entity_decode</docrelurl>
      </item>
      <item name="htmlspecialchars_decode">
        <description>This function is the opposite of htmlspecialchars(). It converts special HTML entities back to characters.</description>
        <signature>string htmlspecialchars_decode (string $string [, int $quote_style = ENT_COMPAT ])</signature>
        <docrelurl>htmlspecialchars_decode</docrelurl>
      </item>
      <item name="get_html_translation_table">
        <description>get_html_translation_table() will return the translation table that is used internally for htmlspecialchars() and htmlentities() with the default charset.</description>
        <signature>array get_html_translation_table ([ int $table = HTML_SPECIALCHARS [, int $quote_style = ENT_COMPAT [, string $charset_hint ]]])</signature>
        <docrelurl>get_html_translation_table</docrelurl>
      </item>
      <item name="sha1">
        <description>string sha1 ( string $str [, bool $raw_output = false ]) Calculates the sha1 hash of str using the US Secure Hash Algorithm 1.</description>
        <signature>string sha1 (string $str [, bool $raw_output = false ])</signature>
        <docrelurl>sha1</docrelurl>
      </item>
      <item name="sha1_file">
        <description>string sha1_file ( string $filename [, bool $raw_output = false ]) Calculates the sha1 hash of the file specified by filename using the US Secure Hash Algorithm 1, and returns that hash. The hash is a 40-character hexadecimal number.</description>
        <signature>string sha1_file (string $filename [, bool $raw_output = false ])</signature>
        <docrelurl>sha1_file</docrelurl>
      </item>
      <item name="md5">
        <description>Calculates the MD5 hash of str using the RSA Data Security, Inc. MD5 Message-Digest Algorithm, and returns that hash.</description>
        <signature>string md5 (string $str [, bool $raw_output = false ])</signature>
        <docrelurl>md5</docrelurl>
      </item>
      <item name="md5_file">
        <description>Calculates the MD5 hash of the file specified by the filename parameter using the RSA Data Security, Inc. MD5 Message-Digest Algorithm, and returns that hash. The hash is a 32-character hexadecimal number.</description>
        <signature>string md5_file (string $filename [, bool $raw_output = false ])</signature>
        <docrelurl>md5_file</docrelurl>
      </item>
      <item name="crc32">
        <description>Generates the cyclic redundancy checksum polynomial of 32-bit lengths of the str. This is usually used to validate the integrity of data being transmitted.</description>
        <signature>int crc32 (string $str)</signature>
        <docrelurl>crc32</docrelurl>
      </item>
      <item name="iptcparse">
        <description>Parses an IPTC block into its single tags.</description>
        <signature>array iptcparse (string $iptcblock)</signature>
        <docrelurl>iptcparse</docrelurl>
      </item>
      <item name="iptcembed">
        <description>Embeds binary IPTC data into a JPEG image.</description>
        <signature>mixed iptcembed (string $iptcdata , string $jpeg_file_name [, int $spool ])</signature>
        <docrelurl>iptcembed</docrelurl>
      </item>
      <item name="getimagesize">
        <description>The getimagesize() function will determine the size of any given image file and return the dimensions along with the file type and a height/width text string to be used inside a normal HTML IMG tag and the correspondant HTTP content type.</description>
        <signature>array getimagesize (string $filename [, array &amp;$imageinfo ])</signature>
        <docrelurl>getimagesize</docrelurl>
      </item>
      <item name="image_type_to_mime_type">
        <description>The image_type_to_mime_type() function will determine the Mime-Type for an IMAGETYPE constant.</description>
        <signature>string image_type_to_mime_type (int $imagetype)</signature>
        <docrelurl>image_type_to_mime_type</docrelurl>
      </item>
      <item name="image_type_to_extension">
        <description>Returns the extension for the given IMAGETYPE_XXX constant.</description>
        <signature>string image_type_to_extension (int $imagetype [, bool $include_dot = TRUE ])</signature>
        <docrelurl>image_type_to_extension</docrelurl>
      </item>
      <item name="phpinfo">
        <description>Outputs a large amount of information about the current state of PHP. This includes information about PHP compilation options and extensions, the PHP version, server information and environment (if compiled as a module), the PHP environment, OS version information, paths, master and local values of configuration options, HTTP headers, and the PHP License.</description>
        <signature>bool phpinfo ([ int $what = INFO_ALL ])</signature>
        <docrelurl>phpinfo</docrelurl>
      </item>
      <item name="phpversion">
        <description>Returns a string containing the version of the currently running PHP parser or extension.</description>
        <signature>string phpversion ([ string $extension ])</signature>
        <docrelurl>phpversion</docrelurl>
      </item>
      <item name="phpcredits">
        <description>This function prints out the credits listing the PHP developers, modules, etc. It generates the appropriate HTML codes to insert the information in a page.</description>
        <signature>bool phpcredits ([ int $flag = CREDITS_ALL ])</signature>
        <docrelurl>phpcredits</docrelurl>
      </item>
      <item name="php_logo_guid">
        <description>This function returns the ID which can be used to display the PHP logo using the built-in image. Logo is displayed only if expose_php is On.</description>
        <signature>string php_logo_guid (void)</signature>
        <docrelurl>php_logo_guid</docrelurl>
      </item>
      <item name="zend_logo_guid">
        <description>This function returns the ID which can be used to display the Zend logo using the built-in image.</description>
        <signature>string zend_logo_guid (void)</signature>
        <docrelurl>zend_logo_guid</docrelurl>
      </item>
      <item name="php_sapi_name">
        <description>string php_sapi_name ( void) Returns a lowercase string that describes the type of interface (the Server API, SAPI) that PHP is using. For example, in CLI PHP this string will be &quot;cli&quot; whereas with Apache it may have several different values depending on the exact SAPI used. Possible values are listed below.</description>
        <signature>string php_sapi_name (void)</signature>
        <docrelurl>php_sapi_name</docrelurl>
      </item>
      <item name="php_uname">
        <description>php_uname() returns a description of the operating system PHP is running on. This is the same string you see at the very top of the phpinfo() output. For the name of just the operating system, consider using the PHP_OS constant, but keep in mind this constant will contain the operating system PHP was built on.</description>
        <signature>string php_uname ([ string $mode = &quot;a&quot; ])</signature>
        <docrelurl>php_uname</docrelurl>
      </item>
      <item name="php_ini_scanned_files">
        <description>php_ini_scanned_files() returns a comma-separated list of configuration files parsed after php.ini. These files are found in a directory defined by the --with-config-file-scan-dir option which is set during compilation.</description>
        <signature>string php_ini_scanned_files (void)</signature>
        <docrelurl>php_ini_scanned_files</docrelurl>
      </item>
      <item name="php_ini_loaded_file">
        <description>Check if a php.ini file is loaded, and retrieve its path.</description>
        <signature>string php_ini_loaded_file (void)</signature>
        <docrelurl>php_ini_loaded_file</docrelurl>
      </item>
      <item name="strnatcmp">
        <description>This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would, this is described as a &quot;natural ordering&quot;. Note that this comparison is case sensitive.</description>
        <signature>int strnatcmp (string $str1 , string $str2)</signature>
        <docrelurl>strnatcmp</docrelurl>
      </item>
      <item name="strnatcasecmp">
        <description>This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would. The behaviour of this function is similar to strnatcmp(), except that the comparison is not case sensitive. For more information see: Martin Pool&apos;s Natural Order String Comparison page.</description>
        <signature>int strnatcasecmp (string $str1 , string $str2)</signature>
        <docrelurl>strnatcasecmp</docrelurl>
      </item>
      <item name="substr_count">
        <description>substr_count() returns the number of times the needle substring occurs in the haystack string. Please note that needle is case sensitive.</description>
        <signature>int substr_count (string $haystack , string $needle [, int $offset = 0 [, int $length ]])</signature>
        <docrelurl>substr_count</docrelurl>
      </item>
      <item name="strspn">
        <description>Finds the length of the initial segment of subject that contains only characters from mask.</description>
        <signature>int strspn (string $subject , string $mask [, int $start [, int $length ]])</signature>
        <docrelurl>strspn</docrelurl>
      </item>
      <item name="strcspn">
        <description>Returns the length of the initial segment of str1 which does not contain any of the characters in str2.</description>
        <signature>int strcspn (string $str1 , string $str2 [, int $start [, int $length ]])</signature>
        <docrelurl>strcspn</docrelurl>
      </item>
      <item name="strtok">
        <description>strtok() splits a string (str) into smaller strings (tokens), with each token being delimited by any character from token. That is, if you have a string like &quot;This is an example string&quot; you could tokenize this string into its individual words by using the space character as the token.</description>
        <signature>string strtok (string $str , string $token)</signature>
        <docrelurl>strtok</docrelurl>
      </item>
      <item name="strtoupper">
        <description>Returns string with all alphabetic characters converted to uppercase.</description>
        <signature>string strtoupper (string $string)</signature>
        <docrelurl>strtoupper</docrelurl>
      </item>
      <item name="strtolower">
        <description>Returns string with all alphabetic characters converted to lowercase.</description>
        <signature>string strtolower (string $str)</signature>
        <docrelurl>strtolower</docrelurl>
      </item>
      <item name="strpos">
        <description>Returns the numeric position of the first occurrence of needle in the haystack string. Unlike the strrpos() before PHP 5, this function can take a full string as the needle parameter and the entire string will be used.</description>
        <signature>int strpos (string $haystack , mixed $needle [, int $offset = 0 ])</signature>
        <docrelurl>strpos</docrelurl>
      </item>
      <item name="stripos">
        <description>Returns the numeric position of the first occurrence of needle in the haystack string.</description>
        <signature>int stripos (string $haystack , string $needle [, int $offset = 0 ])</signature>
        <docrelurl>stripos</docrelurl>
      </item>
      <item name="strrpos">
        <description>Returns the numeric position of the last occurrence of needle in the haystack string.</description>
        <signature>int strrpos (string $haystack , string $needle [, int $offset = 0 ])</signature>
        <docrelurl>strrpos</docrelurl>
      </item>
      <item name="strripos">
        <description>Find position of last occurrence of a case-insensitive string in a string. Unlike strrpos(), strripos() is case-insensitive.</description>
        <signature>int strripos (string $haystack , string $needle [, int $offset = 0 ])</signature>
        <docrelurl>strripos</docrelurl>
      </item>
      <item name="strrev">
        <description>Returns string, reversed.</description>
        <signature>string strrev (string $string)</signature>
        <docrelurl>strrev</docrelurl>
      </item>
      <item name="hebrev">
        <description>Converts logical Hebrew text to visual text.</description>
        <signature>string hebrev (string $hebrew_text [, int $max_chars_per_line = 0 ])</signature>
        <docrelurl>hebrev</docrelurl>
      </item>
      <item name="hebrevc">
        <description>This function is similar to hebrev() with the difference that it converts newlines (\n) to &quot;&lt;br&gt;\n&quot;.</description>
        <signature>string hebrevc (string $hebrew_text [, int $max_chars_per_line = 0 ])</signature>
        <docrelurl>hebrevc</docrelurl>
      </item>
      <item name="nl2br">
        <description>Returns string with &apos;&lt;br /&gt;&apos; or &apos;&lt;br&gt;&apos; inserted before all newlines (\r\n, \n\r, \n and \r).</description>
        <signature>string nl2br (string $string [, bool $is_xhtml = true ])</signature>
        <docrelurl>nl2br</docrelurl>
      </item>
      <item name="basename">
        <description>Given a string containing the path to a file or directory, this function will return the trailing name component.</description>
        <signature>string basename (string $path [, string $suffix ])</signature>
        <docrelurl>basename</docrelurl>
      </item>
      <item name="dirname">
        <description>Given a string containing the path of a file or directory, this function will return the parent directory&apos;s path.</description>
        <signature>string dirname (string $path)</signature>
        <docrelurl>dirname</docrelurl>
      </item>
      <item name="pathinfo">
        <description>pathinfo() returns an associative array containing information about path.</description>
        <signature>mixed pathinfo (string $path [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME ])</signature>
        <docrelurl>pathinfo</docrelurl>
      </item>
      <item name="stripslashes">
        <description>Un-quotes a quoted string.</description>
        <signature>string stripslashes (string $str)</signature>
        <docrelurl>stripslashes</docrelurl>
      </item>
      <item name="stripcslashes">
        <description>Returns a string with backslashes stripped off. Recognizes C-like \n, \r ..., octal and hexadecimal representation.</description>
        <signature>string stripcslashes (string $str)</signature>
        <docrelurl>stripcslashes</docrelurl>
      </item>
      <item name="strstr">
        <description>Returns part of haystack string from the first occurrence of needle to the end of haystack.</description>
        <signature>string strstr (string $haystack , mixed $needle [, bool $before_needle = false ])</signature>
        <docrelurl>strstr</docrelurl>
      </item>
      <item name="stristr">
        <description>Returns all of haystack from the first occurrence of needle to the end.</description>
        <signature>string stristr (string $haystack , mixed $needle [, bool $before_needle = false ])</signature>
        <docrelurl>stristr</docrelurl>
      </item>
      <item name="strrchr">
        <description>This function returns the portion of haystack which starts at the last occurrence of needle and goes until the end of haystack.</description>
        <signature>string strrchr (string $haystack , mixed $needle)</signature>
        <docrelurl>strrchr</docrelurl>
      </item>
      <item name="str_shuffle">
        <description>string str_shuffle ( string $str) str_shuffle() shuffles a string. One permutation of all possible is created.</description>
        <signature>string str_shuffle (string $str)</signature>
        <docrelurl>str_shuffle</docrelurl>
      </item>
      <item name="str_word_count">
        <description>Counts the number of words inside string. If the optional format is not specified, then the return value will be an integer representing the number of words found. In the event the format is specified, the return value will be an array, content of which is dependent on the format. The possible value for the format and the resultant outputs are listed below.</description>
        <signature>mixed str_word_count (string $string [, int $format = 0 [, string $charlist ]])</signature>
        <docrelurl>str_word_count</docrelurl>
      </item>
      <item name="str_split">
        <description>Converts a string to an array.</description>
        <signature>array str_split (string $string [, int $split_length = 1 ])</signature>
        <docrelurl>str_split</docrelurl>
      </item>
      <item name="strpbrk">
        <description>strpbrk() searches the haystack string for a char_list.</description>
        <signature>string strpbrk (string $haystack , string $char_list)</signature>
        <docrelurl>strpbrk</docrelurl>
      </item>
      <item name="substr_compare">
        <description>substr_compare() compares main_str from position offset with str up to length characters.</description>
        <signature>int substr_compare (string $main_str , string $str , int $offset [, int $length [, bool $case_insensitivity = false ]])</signature>
        <docrelurl>substr_compare</docrelurl>
      </item>
      <item name="strcoll">
        <description>Note that this comparison is case sensitive, and unlike strcmp() this function is not binary safe.</description>
        <signature>int strcoll (string $str1 , string $str2)</signature>
        <docrelurl>strcoll</docrelurl>
      </item>
      <item name="substr">
        <description>Returns the portion of string specified by the start and length parameters.</description>
        <signature>string substr (string $string , int $start [, int $length ])</signature>
        <docrelurl>substr</docrelurl>
      </item>
      <item name="substr_replace">
        <description>substr_replace() replaces a copy of string delimited by the start and (optionally) length parameters with the string given in replacement.</description>
        <signature>mixed substr_replace (mixed $string , mixed $replacement , mixed $start [, mixed $length ])</signature>
        <docrelurl>substr_replace</docrelurl>
      </item>
      <item name="quotemeta">
        <description>Returns a version of str with a backslash character (\) before every character that is among these: . \ + * ? [ ^ ] ( $)</description>
        <signature>string quotemeta (string $str)</signature>
        <docrelurl>quotemeta</docrelurl>
      </item>
      <item name="ucfirst">
        <description>Returns a string with the first character of str capitalized, if that character is alphabetic.</description>
        <signature>string ucfirst (string $str)</signature>
        <docrelurl>ucfirst</docrelurl>
      </item>
      <item name="lcfirst">
        <description>Returns a string with the first character of str , lowercased if that character is alphabetic.</description>
        <signature>string lcfirst (string $str)</signature>
        <docrelurl>lcfirst</docrelurl>
      </item>
      <item name="ucwords">
        <description>Returns a string with the first character of each word in str capitalized, if that character is alphabetic.</description>
        <signature>string ucwords (string $str)</signature>
        <docrelurl>ucwords</docrelurl>
      </item>
      <item name="strtr">
        <description>If given three arguments, this function returns a copy of str where all occurrences of each (single-byte) character in from have been translated to the corresponding character in to, i.e., every occurrence of $from[$n] has been replaced with $to[$n], where $n is a valid offset in both arguments.</description>
        <signature>string strtr (string $str , string $from , string $to)</signature>
        <docrelurl>strtr</docrelurl>
      </item>
      <item name="addslashes">
        <description>Returns a string with backslashes before characters that need to be quoted in database queries etc. These characters are single quote (&apos;), double quote (&quot;), backslash (\) and NUL (the NULL byte).</description>
        <signature>string addslashes (string $str)</signature>
        <docrelurl>addslashes</docrelurl>
      </item>
      <item name="addcslashes">
        <description>Returns a string with backslashes before characters that are listed in charlist parameter.</description>
        <signature>string addcslashes (string $str , string $charlist)</signature>
        <docrelurl>addcslashes</docrelurl>
      </item>
      <item name="rtrim">
        <description>This function returns a string with whitespace stripped from the end of str.</description>
        <signature>string rtrim (string $str [, string $charlist ])</signature>
        <docrelurl>rtrim</docrelurl>
      </item>
      <item name="str_replace">
        <description>This function returns a string or an array with all occurrences of search in subject replaced with the given replace value.</description>
        <signature>mixed str_replace (mixed $search , mixed $replace , mixed $subject [, int &amp;$count ])</signature>
        <docrelurl>str_replace</docrelurl>
      </item>
      <item name="str_ireplace">
        <description>This function returns a string or an array with all occurrences of search in subject (ignoring case) replaced with the given replace value. If you don&apos;t need fancy replacing rules, you should generally use this function instead of preg_replace() with the i modifier.</description>
        <signature>mixed str_ireplace (mixed $search , mixed $replace , mixed $subject [, int &amp;$count ])</signature>
        <docrelurl>str_ireplace</docrelurl>
      </item>
      <item name="str_repeat">
        <description>Returns input repeated multiplier times.</description>
        <signature>string str_repeat (string $input , int $multiplier)</signature>
        <docrelurl>str_repeat</docrelurl>
      </item>
      <item name="count_chars">
        <description>Counts the number of occurrences of every byte-value (0..255) in string and returns it in various ways.</description>
        <signature>mixed count_chars (string $string [, int $mode = 0 ])</signature>
        <docrelurl>count_chars</docrelurl>
      </item>
      <item name="chunk_split">
        <description>Can be used to split a string into smaller chunks which is useful for e.g. converting base64_encode() output to match RFC 2045 semantics. It inserts end every chunklen characters.</description>
        <signature>string chunk_split (string $body [, int $chunklen = 76 [, string $end = &quot;\r\n&quot; ]])</signature>
        <docrelurl>chunk_split</docrelurl>
      </item>
      <item name="trim">
        <description>This function returns a string with whitespace stripped from the beginning and end of str. Without the second parameter, trim() will strip these characters: &quot; &quot; (ASCII 32 (0x20)), an ordinary space. &quot;\t&quot; (ASCII 9 (0x09)), a tab. &quot;\n&quot; (ASCII 10 (0x0A)), a new line (line feed). &quot;\r&quot; (ASCII 13 (0x0D)), a carriage return. &quot;\0&quot; (ASCII 0 (0x00)), the NUL-byte. &quot;\x0B&quot; (ASCII 11 (0x0B)), a vertical tab.</description>
        <signature>string trim (string $str [, string $charlist ])</signature>
        <docrelurl>trim</docrelurl>
      </item>
      <item name="ltrim">
        <description>Strip whitespace (or other characters) from the beginning of a string.</description>
        <signature>string ltrim (string $str [, string $charlist ])</signature>
        <docrelurl>ltrim</docrelurl>
      </item>
      <item name="strip_tags">
        <description>This function tries to return a string with all NUL bytes, HTML and PHP tags stripped from a given str. It uses the same tag stripping state machine as the fgetss() function.</description>
        <signature>string strip_tags (string $str [, string $allowable_tags ])</signature>
        <docrelurl>strip_tags</docrelurl>
      </item>
      <item name="similar_text">
        <description>This calculates the similarity between two strings as described in Oliver [1993]. Note that this implementation does not use a stack as in Oliver&apos;s pseudo code, but recursive calls which may or may not speed up the whole process. Note also that the complexity of this algorithm is O(N**3) where N is the length of the longest string.</description>
        <signature>int similar_text (string $first , string $second [, float &amp;$percent ])</signature>
        <docrelurl>similar_text</docrelurl>
      </item>
      <item name="explode">
        <description>Returns an array of strings, each of which is a substring of string formed by splitting it on boundaries formed by the string delimiter.</description>
        <signature>array explode (string $delimiter , string $string [, int $limit ])</signature>
        <docrelurl>explode</docrelurl>
      </item>
      <item name="implode">
        <description>Join array elements with a glue string.</description>
        <signature>string implode (string $glue , array $pieces)</signature>
        <docrelurl>implode</docrelurl>
      </item>
      <item name="join">
        <description>Alias of implode implode lcfirst String Functions PHP Manual join (PHP 4, PHP 5)</description>
        <signature>Alias of implode implode</signature>
        <docrelurl>join</docrelurl>
      </item>
      <item name="setlocale">
        <description>Sets locale information.</description>
        <signature>string setlocale (int $category , string $locale [, string $... ])</signature>
        <docrelurl>setlocale</docrelurl>
      </item>
      <item name="localeconv">
        <description>Returns an associative array containing localized numeric and monetary formatting information.</description>
        <signature>array localeconv (void)</signature>
        <docrelurl>localeconv</docrelurl>
      </item>
      <item name="soundex">
        <description>Calculates the soundex key of str.</description>
        <signature>string soundex (string $str)</signature>
        <docrelurl>soundex</docrelurl>
      </item>
      <item name="levenshtein">
        <description>The Levenshtein distance is defined as the minimal number of characters you have to replace, insert or delete to transform str1 into str2. The complexity of the algorithm is O(m*n), where n and m are the length of str1 and str2 (rather good when compared to similar_text(), which is O(max(n,m)**3), but still expensive).</description>
        <signature>int levenshtein (string $str1 , string $str2)</signature>
        <docrelurl>levenshtein</docrelurl>
      </item>
      <item name="chr">
        <description>Returns a one-character string containing the character specified by ascii.</description>
        <signature>string chr (int $ascii)</signature>
        <docrelurl>chr</docrelurl>
      </item>
      <item name="ord">
        <description>Returns the ASCII value of the first character of string.</description>
        <signature>int ord (string $string)</signature>
        <docrelurl>ord</docrelurl>
      </item>
      <item name="parse_str">
        <description>Parses str as if it were the query string passed via a URL and sets variables in the current scope.</description>
        <signature>void parse_str (string $str [, array &amp;$arr ])</signature>
        <docrelurl>parse_str</docrelurl>
      </item>
      <item name="str_getcsv">
        <description>Similar to fgetcsv() this functions parses a string as its input unlike fgetcsv() which takes a file as its input.</description>
        <signature>array str_getcsv (string $input [, string $delimiter = &apos;,&apos; [, string $enclosure = &apos;&quot;&apos; [, string $escape = &apos;\\&apos; ]]])</signature>
        <docrelurl>str_getcsv</docrelurl>
      </item>
      <item name="str_pad">
        <description>This functions returns the input string padded on the left, the right, or both sides to the specified padding length. If the optional argument pad_string is not supplied, the input is padded with spaces, otherwise it is padded with characters from pad_string up to the limit.</description>
        <signature>string str_pad (string $input , int $pad_length [, string $pad_string = &quot; &quot; [, int $pad_type = STR_PAD_RIGHT ]])</signature>
        <docrelurl>str_pad</docrelurl>
      </item>
      <item name="chop">
        <description>Alias of rtrim bin2hex chr String Functions PHP Manual chop (PHP 4, PHP 5)</description>
        <signature>Alias of rtrim bin2hex</signature>
        <docrelurl>chop</docrelurl>
      </item>
      <item name="strchr">
        <description>Alias of strstr strcasecmp strcmp String Functions PHP Manual strchr (PHP 4, PHP 5)</description>
        <signature>Alias of strstr strcasecmp</signature>
        <docrelurl>strchr</docrelurl>
      </item>
      <item name="sprintf">
        <description>Returns a string produced according to the formatting string format.</description>
        <signature>string sprintf (string $format [, mixed $args [, mixed $... ]])</signature>
        <docrelurl>sprintf</docrelurl>
      </item>
      <item name="printf">
        <description>int printf ( string $format [, mixed $args [, mixed $... ]]) Produces output according to format.</description>
        <signature>int printf (string $format [, mixed $args [, mixed $... ]])</signature>
        <docrelurl>printf</docrelurl>
      </item>
      <item name="vprintf">
        <description>Display array values as a formatted string according to format (which is described in the documentation for sprintf()).</description>
        <signature>int vprintf (string $format , array $args)</signature>
        <docrelurl>vprintf</docrelurl>
      </item>
      <item name="vsprintf">
        <description>Operates as sprintf() but accepts an array of arguments, rather than a variable number of arguments.</description>
        <signature>string vsprintf (string $format , array $args)</signature>
        <docrelurl>vsprintf</docrelurl>
      </item>
      <item name="fprintf">
        <description>Write a string produced according to format to the stream resource specified by handle.</description>
        <signature>int fprintf (resource $handle , string $format [, mixed $args [, mixed $... ]])</signature>
        <docrelurl>fprintf</docrelurl>
      </item>
      <item name="vfprintf">
        <description>Write a string produced according to format to the stream resource specified by handle.</description>
        <signature>int vfprintf (resource $handle , string $format , array $args)</signature>
        <docrelurl>vfprintf</docrelurl>
      </item>
      <item name="sscanf">
        <description>The function sscanf() is the input analog of printf(). sscanf() reads from the string str and interprets it according to the specified format, which is described in the documentation for sprintf().</description>
        <signature>mixed sscanf (string $str , string $format [, mixed &amp;$... ])</signature>
        <docrelurl>sscanf</docrelurl>
      </item>
      <item name="fscanf">
        <description>The function fscanf() is similar to sscanf(), but it takes its input from a file associated with handle and interprets the input according to the specified format, which is described in the documentation for sprintf().</description>
        <signature>mixed fscanf (resource $handle , string $format [, mixed &amp;$... ])</signature>
        <docrelurl>fscanf</docrelurl>
      </item>
      <item name="parse_url">
        <description>This function parses a URL and returns an associative array containing any of the various components of the URL that are present.</description>
        <signature>mixed parse_url (string $url [, int $component = -1 ])</signature>
        <docrelurl>parse_url</docrelurl>
      </item>
      <item name="urlencode">
        <description>This function is convenient when encoding a string to be used in a query part of a URL, as a convenient way to pass variables to the next page.</description>
        <signature>string urlencode (string $str)</signature>
        <docrelurl>urlencode</docrelurl>
      </item>
      <item name="urldecode">
        <description>Decodes any %## encoding in the given string. Plus symbols (&apos;+&apos;) are decoded to a space character.</description>
        <signature>string urldecode (string $str)</signature>
        <docrelurl>urldecode</docrelurl>
      </item>
      <item name="rawurlencode">
        <description>Encodes the given string according to RFC 3986.</description>
        <signature>string rawurlencode (string $str)</signature>
        <docrelurl>rawurlencode</docrelurl>
      </item>
      <item name="rawurldecode">
        <description>Returns a string in which the sequences with percent (%) signs followed by two hex digits have been replaced with literal characters.</description>
        <signature>string rawurldecode (string $str)</signature>
        <docrelurl>rawurldecode</docrelurl>
      </item>
      <item name="http_build_query">
        <description>Generates a URL-encoded query string from the associative (or indexed) array provided.</description>
        <signature>string http_build_query (mixed $query_data [, string $numeric_prefix [, string $arg_separator [, int $enc_type = PHP_QUERY_RFC1738 ]]])</signature>
        <docrelurl>http_build_query</docrelurl>
      </item>
      <item name="readlink">
        <description>readlink() does the same as the readlink C function.</description>
        <signature>string readlink (string $path)</signature>
        <docrelurl>readlink</docrelurl>
      </item>
      <item name="linkinfo">
        <description>Gets information about a link.</description>
        <signature>int linkinfo (string $path)</signature>
        <docrelurl>linkinfo</docrelurl>
      </item>
      <item name="symlink">
        <description>symlink() creates a symbolic link to the existing target with the specified name link.</description>
        <signature>bool symlink (string $target , string $link)</signature>
        <docrelurl>symlink</docrelurl>
      </item>
      <item name="link">
        <description>link() creates a hard link.</description>
        <signature>bool link (string $target , string $link)</signature>
        <docrelurl>link</docrelurl>
      </item>
      <item name="unlink">
        <description>Deletes filename. Similar to the Unix C unlink() function. A E_WARNING level error will be generated on failure.</description>
        <signature>bool unlink (string $filename [, resource $context ])</signature>
        <docrelurl>unlink</docrelurl>
      </item>
      <item name="exec">
        <description>exec() executes the given command.</description>
        <signature>string exec (string $command [, array &amp;$output [, int &amp;$return_var ]])</signature>
        <docrelurl>exec</docrelurl>
      </item>
      <item name="system">
        <description>system() is just like the C version of the function in that it executes the given command and outputs the result.</description>
        <signature>string system (string $command [, int &amp;$return_var ])</signature>
        <docrelurl>system</docrelurl>
      </item>
      <item name="escapeshellcmd">
        <description>escapeshellcmd() escapes any characters in a string that might be used to trick a shell command into executing arbitrary commands. This function should be used to make sure that any data coming from user input is escaped before this data is passed to the exec() or system() functions, or to the backtick operator.</description>
        <signature>string escapeshellcmd (string $command)</signature>
        <docrelurl>escapeshellcmd</docrelurl>
      </item>
      <item name="escapeshellarg">
        <description>escapeshellarg() adds single quotes around a string and quotes/escapes any existing single quotes allowing you to pass a string directly to a shell function and having it be treated as a single safe argument. This function should be used to escape individual arguments to shell functions coming from user input. The shell functions include exec(), system() and the backtick operator.</description>
        <signature>string escapeshellarg (string $arg)</signature>
        <docrelurl>escapeshellarg</docrelurl>
      </item>
      <item name="passthru">
        <description>The passthru() function is similar to the exec() function in that it executes a command. This function should be used in place of exec() or system() when the output from the Unix command is binary data which needs to be passed directly back to the browser. A common use for this is to execute something like the pbmplus utilities that can output an image stream directly. By setting the Content-type to image/gif and then calling a pbmplus program to output a gif, you can create PHP scripts that output images directly.</description>
        <signature>void passthru (string $command [, int &amp;$return_var ])</signature>
        <docrelurl>passthru</docrelurl>
      </item>
      <item name="shell_exec">
        <description>This function is identical to the backtick operator.</description>
        <signature>string shell_exec (string $cmd)</signature>
        <docrelurl>shell_exec</docrelurl>
      </item>
      <item name="proc_open">
        <description>proc_open() is similar to popen() but provides a much greater degree of control over the program execution.</description>
        <signature>resource proc_open (string $cmd , array $descriptorspec , array &amp;$pipes [, string $cwd [, array $env [, array $other_options ]]])</signature>
        <docrelurl>proc_open</docrelurl>
      </item>
      <item name="proc_close">
        <description>proc_close() is similar to pclose() except that it only works on processes opened by proc_open(). proc_close() waits for the process to terminate, and returns its exit code. If you have open pipes to that process, you should fclose() them prior to calling this function in order to avoid a deadlock - the child process may not be able to exit while the pipes are open.</description>
        <signature>int proc_close (resource $process)</signature>
        <docrelurl>proc_close</docrelurl>
      </item>
      <item name="proc_terminate">
        <description>Signals a process (created using proc_open()) that it should terminate. proc_terminate() returns immediately and does not wait for the process to terminate.</description>
        <signature>bool proc_terminate (resource $process [, int $signal = 15 ])</signature>
        <docrelurl>proc_terminate</docrelurl>
      </item>
      <item name="proc_get_status">
        <description>proc_get_status() fetches data about a process opened using proc_open().</description>
        <signature>array proc_get_status (resource $process)</signature>
        <docrelurl>proc_get_status</docrelurl>
      </item>
      <item name="rand">
        <description>int rand ( void) int rand ( int $min , int $max) If called without the optional min, max arguments rand() returns a pseudo-random integer between 0 and getrandmax(). If you want a random number between 5 and 15 (inclusive), for example, use rand(5, 15).</description>
        <signature>int rand (void)</signature>
        <docrelurl>rand</docrelurl>
      </item>
      <item name="srand">
        <description>Seeds the random number generator with seed or with a random value if no seed is given.</description>
        <signature>void srand ([ int $seed ])</signature>
        <docrelurl>srand</docrelurl>
      </item>
      <item name="getrandmax">
        <description>int getrandmax ( void) Returns the maximum value that can be returned by a call to rand().</description>
        <signature>int getrandmax (void)</signature>
        <docrelurl>getrandmax</docrelurl>
      </item>
      <item name="mt_rand">
        <description>int mt_rand ( void) int mt_rand ( int $min , int $max) Many random number generators of older libcs have dubious or unknown characteristics and are slow. By default, PHP uses the libc random number generator with the rand() function. The mt_rand() function is a drop-in replacement for this. It uses a random number generator with known characteristics using the Mersenne Twister, which will produce random numbers four times faster than what the average libc rand() provides.</description>
        <signature>int mt_rand (void)</signature>
        <docrelurl>mt_rand</docrelurl>
      </item>
      <item name="mt_srand">
        <description>Seeds the random number generator with seed or with a random value if no seed is given.</description>
        <signature>void mt_srand ([ int $seed ])</signature>
        <docrelurl>mt_srand</docrelurl>
      </item>
      <item name="mt_getrandmax">
        <description>int mt_getrandmax ( void) Returns the maximum value that can be returned by a call to mt_rand().</description>
        <signature>int mt_getrandmax (void)</signature>
        <docrelurl>mt_getrandmax</docrelurl>
      </item>
      <item name="getservbyname">
        <description>getservbyname() returns the Internet port which corresponds to service for the specified protocol as per /etc/services.</description>
        <signature>int getservbyname (string $service , string $protocol)</signature>
        <docrelurl>getservbyname</docrelurl>
      </item>
      <item name="getservbyport">
        <description>getservbyport() returns the Internet service associated with port for the specified protocol as per /etc/services.</description>
        <signature>string getservbyport (int $port , string $protocol)</signature>
        <docrelurl>getservbyport</docrelurl>
      </item>
      <item name="getprotobyname">
        <description>getprotobyname() returns the protocol number associated with the protocol name as per /etc/protocols.</description>
        <signature>int getprotobyname (string $name)</signature>
        <docrelurl>getprotobyname</docrelurl>
      </item>
      <item name="getprotobynumber">
        <description>getprotobynumber() returns the protocol name associated with protocol number as per /etc/protocols.</description>
        <signature>string getprotobynumber (int $number)</signature>
        <docrelurl>getprotobynumber</docrelurl>
      </item>
      <item name="getmyuid">
        <description>int getmyuid ( void) Gets the user ID of the current script.</description>
        <signature>int getmyuid (void)</signature>
        <docrelurl>getmyuid</docrelurl>
      </item>
      <item name="getmygid">
        <description>int getmygid ( void) Gets the group ID of the current script.</description>
        <signature>int getmygid (void)</signature>
        <docrelurl>getmygid</docrelurl>
      </item>
      <item name="getmypid">
        <description>Gets the current PHP process ID.</description>
        <signature>int getmypid (void)</signature>
        <docrelurl>getmypid</docrelurl>
      </item>
      <item name="getmyinode">
        <description>Gets the inode of the current script.</description>
        <signature>int getmyinode (void)</signature>
        <docrelurl>getmyinode</docrelurl>
      </item>
      <item name="getlastmod">
        <description>Gets the time of the last modification of the current page.</description>
        <signature>int getlastmod (void)</signature>
        <docrelurl>getlastmod</docrelurl>
      </item>
      <item name="base64_decode">
        <description>Decodes a base64 encoded data.</description>
        <signature>string base64_decode (string $data [, bool $strict = false ])</signature>
        <docrelurl>base64_decode</docrelurl>
      </item>
      <item name="base64_encode">
        <description>Encodes the given data with base64.</description>
        <signature>string base64_encode (string $data)</signature>
        <docrelurl>base64_encode</docrelurl>
      </item>
      <item name="convert_uuencode">
        <description>convert_uuencode() encodes a string using the uuencode algorithm.</description>
        <signature>string convert_uuencode (string $data)</signature>
        <docrelurl>convert_uuencode</docrelurl>
      </item>
      <item name="convert_uudecode">
        <description>convert_uudecode() decodes a uuencoded string.</description>
        <signature>string convert_uudecode (string $data)</signature>
        <docrelurl>convert_uudecode</docrelurl>
      </item>
      <item name="abs">
        <description>Returns the absolute value of number.</description>
        <signature>number abs (mixed $number)</signature>
        <docrelurl>abs</docrelurl>
      </item>
      <item name="ceil">
        <description>float ceil ( float $value) Returns the next highest integer value by rounding up value if necessary.</description>
        <signature>float ceil (float $value)</signature>
        <docrelurl>ceil</docrelurl>
      </item>
      <item name="floor">
        <description>float floor ( float $value) Returns the next lowest integer value by rounding down value if necessary.</description>
        <signature>float floor (float $value)</signature>
        <docrelurl>floor</docrelurl>
      </item>
      <item name="round">
        <description>Returns the rounded value of val to specified precision (number of digits after the decimal point). precision can also be negative or zero (default).</description>
        <signature>float round (float $val [, int $precision = 0 [, int $mode = PHP_ROUND_HALF_UP ]])</signature>
        <docrelurl>round</docrelurl>
      </item>
      <item name="sin">
        <description>sin() returns the sine of the arg parameter. The arg parameter is in radians.</description>
        <signature>float sin (float $arg)</signature>
        <docrelurl>sin</docrelurl>
      </item>
      <item name="cos">
        <description>cos() returns the cosine of the arg parameter. The arg parameter is in radians.</description>
        <signature>float cos (float $arg)</signature>
        <docrelurl>cos</docrelurl>
      </item>
      <item name="tan">
        <description>tan() returns the tangent of the arg parameter. The arg parameter is in radians.</description>
        <signature>float tan (float $arg)</signature>
        <docrelurl>tan</docrelurl>
      </item>
      <item name="asin">
        <description>Returns the arc sine of arg in radians. asin() is the complementary function of sin(), which means that a==sin(asin(a)) for every value of a that is within asin()&apos;s range.</description>
        <signature>float asin (float $arg)</signature>
        <docrelurl>asin</docrelurl>
      </item>
      <item name="acos">
        <description>Returns the arc cosine of arg in radians. acos() is the complementary function of cos(), which means that a==cos(acos(a)) for every value of a that is within acos()&apos; range.</description>
        <signature>float acos (float $arg)</signature>
        <docrelurl>acos</docrelurl>
      </item>
      <item name="atan">
        <description>Returns the arc tangent of arg in radians. atan() is the complementary function of tan(), which means that a==tan(atan(a)) for every value of a that is within atan()&apos;s range.</description>
        <signature>float atan (float $arg)</signature>
        <docrelurl>atan</docrelurl>
      </item>
      <item name="atanh">
        <description>Returns the inverse hyperbolic tangent of arg, i.e. the value whose hyperbolic tangent is arg.</description>
        <signature>float atanh (float $arg)</signature>
        <docrelurl>atanh</docrelurl>
      </item>
      <item name="atan2">
        <description>float atan2 ( float $y , float $x) This function calculates the arc tangent of the two variables x and y. It is similar to calculating the arc tangent of y / x, except that the signs of both arguments are used to determine the quadrant of the result.</description>
        <signature>float atan2 (float $y , float $x)</signature>
        <docrelurl>atan2</docrelurl>
      </item>
      <item name="sinh">
        <description>Returns the hyperbolic sine of arg, defined as (exp(arg) - exp(-arg))/2.</description>
        <signature>float sinh (float $arg)</signature>
        <docrelurl>sinh</docrelurl>
      </item>
      <item name="cosh">
        <description>Returns the hyperbolic cosine of arg, defined as (exp(arg) + exp(-arg))/2.</description>
        <signature>float cosh (float $arg)</signature>
        <docrelurl>cosh</docrelurl>
      </item>
      <item name="tanh">
        <description>Returns the hyperbolic tangent of arg, defined as sinh(arg)/cosh(arg).</description>
        <signature>float tanh (float $arg)</signature>
        <docrelurl>tanh</docrelurl>
      </item>
      <item name="asinh">
        <description>Returns the inverse hyperbolic sine of arg, i.e. the value whose hyperbolic sine is arg.</description>
        <signature>float asinh (float $arg)</signature>
        <docrelurl>asinh</docrelurl>
      </item>
      <item name="acosh">
        <description>Returns the inverse hyperbolic cosine of arg, i.e. the value whose hyperbolic cosine is arg.</description>
        <signature>float acosh (float $arg)</signature>
        <docrelurl>acosh</docrelurl>
      </item>
      <item name="expm1">
        <description>expm1() returns the equivalent to &apos;exp(arg) - 1&apos; computed in a way that is accurate even if the value of arg is near zero, a case where &apos;exp (arg) - 1&apos; would be inaccurate due to subtraction of two numbers that are nearly equal.</description>
        <signature>float expm1 (float $arg)</signature>
        <docrelurl>expm1</docrelurl>
      </item>
      <item name="log1p">
        <description>log1p() returns log(1 + number) computed in a way that is accurate even when the value of number is close to zero. log() might only return log(1) in this case due to lack of precision.</description>
        <signature>float log1p (float $number)</signature>
        <docrelurl>log1p</docrelurl>
      </item>
      <item name="pi">
        <description>float pi ( void) Returns an approximation of pi. The returned float has a precision based on the precision directive in php.ini, which defaults to 14. Also, you can use the M_PI constant which yields identical results to pi().</description>
        <signature>float pi (void)</signature>
        <docrelurl>pi</docrelurl>
      </item>
      <item name="is_finite">
        <description>Checks whether val is a legal finite on this platform.</description>
        <signature>bool is_finite (float $val)</signature>
        <docrelurl>is_finite</docrelurl>
      </item>
      <item name="is_nan">
        <description>Checks whether val is &apos;not a number&apos;, like the result of acos(1.01).</description>
        <signature>bool is_nan (float $val)</signature>
        <docrelurl>is_nan</docrelurl>
      </item>
      <item name="is_infinite">
        <description>Returns TRUE if val is infinite (positive or negative), like the result of log(0) or any value too big to fit into a float on this platform.</description>
        <signature>bool is_infinite (float $val)</signature>
        <docrelurl>is_infinite</docrelurl>
      </item>
      <item name="pow">
        <description>Returns base raised to the power of exp.</description>
        <signature>number pow (number $base , number $exp)</signature>
        <docrelurl>pow</docrelurl>
      </item>
      <item name="exp">
        <description>Returns e raised to the power of arg.</description>
        <signature>float exp (float $arg)</signature>
        <docrelurl>exp</docrelurl>
      </item>
      <item name="log">
        <description>If the optional base parameter is specified, log() returns logbase arg, otherwise log() returns the natural logarithm of arg.</description>
        <signature>float log (float $arg [, float $base = M_E ])</signature>
        <docrelurl>log</docrelurl>
      </item>
      <item name="log10">
        <description>Returns the base-10 logarithm of arg.</description>
        <signature>float log10 (float $arg)</signature>
        <docrelurl>log10</docrelurl>
      </item>
      <item name="sqrt">
        <description>Returns the square root of arg.</description>
        <signature>float sqrt (float $arg)</signature>
        <docrelurl>sqrt</docrelurl>
      </item>
      <item name="hypot">
        <description>hypot() returns the length of the hypotenuse of a right-angle triangle with sides of length x and y, or the distance of the point (x, y) from the origin. This is equivalent to sqrt(x*x + y*y).</description>
        <signature>float hypot (float $x , float $y)</signature>
        <docrelurl>hypot</docrelurl>
      </item>
      <item name="deg2rad">
        <description>This function converts number from degrees to the radian equivalent.</description>
        <signature>float deg2rad (float $number)</signature>
        <docrelurl>deg2rad</docrelurl>
      </item>
      <item name="rad2deg">
        <description>This function converts number from radian to degrees.</description>
        <signature>float rad2deg (float $number)</signature>
        <docrelurl>rad2deg</docrelurl>
      </item>
      <item name="bindec">
        <description>Returns the decimal equivalent of the binary number represented by the binary_string argument.</description>
        <signature>number bindec (string $binary_string)</signature>
        <docrelurl>bindec</docrelurl>
      </item>
      <item name="hexdec">
        <description>Returns the decimal equivalent of the hexadecimal number represented by the hex_string argument. hexdec() converts a hexadecimal string to a decimal number.</description>
        <signature>number hexdec (string $hex_string)</signature>
        <docrelurl>hexdec</docrelurl>
      </item>
      <item name="octdec">
        <description>Returns the decimal equivalent of the octal number represented by the octal_string argument.</description>
        <signature>number octdec (string $octal_string)</signature>
        <docrelurl>octdec</docrelurl>
      </item>
      <item name="decbin">
        <description>Returns a string containing a binary representation of the given number argument.</description>
        <signature>string decbin (int $number)</signature>
        <docrelurl>decbin</docrelurl>
      </item>
      <item name="decoct">
        <description>Returns a string containing an octal representation of the given number argument. The largest number that can be converted is 4294967295 in decimal resulting to &quot;37777777777&quot;.</description>
        <signature>string decoct (int $number)</signature>
        <docrelurl>decoct</docrelurl>
      </item>
      <item name="dechex">
        <description>Returns a string containing a hexadecimal representation of the given number argument. The largest number that can be converted is 4294967295 in decimal resulting to &quot;ffffffff&quot;.</description>
        <signature>string dechex (int $number)</signature>
        <docrelurl>dechex</docrelurl>
      </item>
      <item name="base_convert">
        <description>Returns a string containing number represented in base tobase. The base in which number is given is specified in frombase. Both frombase and tobase have to be between 2 and 36, inclusive. Digits in numbers with a base higher than 10 will be represented with the letters a-z, with a meaning 10, b meaning 11 and z meaning 35.</description>
        <signature>string base_convert (string $number , int $frombase , int $tobase)</signature>
        <docrelurl>base_convert</docrelurl>
      </item>
      <item name="number_format">
        <description>This function accepts either one, two, or four parameters (not three):</description>
        <signature>string number_format (float $number [, int $decimals = 0 ])</signature>
        <docrelurl>number_format</docrelurl>
      </item>
      <item name="fmod">
        <description>Returns the floating point remainder of dividing the dividend (x) by the divisor (y). The reminder (r) is defined as: x = i * y + r, for some integer i. If y is non-zero, r has the same sign as x and a magnitude less than the magnitude of y.</description>
        <signature>float fmod (float $x , float $y)</signature>
        <docrelurl>fmod</docrelurl>
      </item>
      <item name="inet_ntop">
        <description>string inet_ntop ( string $in_addr) This function converts a 32bit IPv4, or 128bit IPv6 address (if PHP was built with IPv6 support enabled) into an address family appropriate string representation.</description>
        <signature>string inet_ntop (string $in_addr)</signature>
        <docrelurl>inet_ntop</docrelurl>
      </item>
      <item name="inet_pton">
        <description>This function converts a human readable IPv4 or IPv6 address (if PHP was built with IPv6 support enabled) into an address family appropriate 32bit or 128bit binary structure.</description>
        <signature>string inet_pton (string $address)</signature>
        <docrelurl>inet_pton</docrelurl>
      </item>
      <item name="ip2long">
        <description>The function ip2long() generates an IPv4 Internet network address from its Internet standard format (dotted string) representation.</description>
        <signature>int ip2long (string $ip_address)</signature>
        <docrelurl>ip2long</docrelurl>
      </item>
      <item name="long2ip">
        <description>The function long2ip() generates an Internet address in dotted format (i.e.: aaa.bbb.ccc.ddd) from the proper address representation.</description>
        <signature>string long2ip (string $proper_address)</signature>
        <docrelurl>long2ip</docrelurl>
      </item>
      <item name="getenv">
        <description>Gets the value of an environment variable.</description>
        <signature>string getenv (string $varname)</signature>
        <docrelurl>getenv</docrelurl>
      </item>
      <item name="putenv">
        <description>Adds setting to the server environment. The environment variable will only exist for the duration of the current request. At the end of the request the environment is restored to its original state.</description>
        <signature>bool putenv (string $setting)</signature>
        <docrelurl>putenv</docrelurl>
      </item>
      <item name="getopt">
        <description>Parses options passed to the script.</description>
        <signature>array getopt (string $options [, array $longopts ])</signature>
        <docrelurl>getopt</docrelurl>
      </item>
      <item name="microtime">
        <description>microtime() returns the current Unix timestamp with microseconds. This function is only available on operating systems that support the gettimeofday() system call.</description>
        <signature>mixed microtime ([ bool $get_as_float = false ])</signature>
        <docrelurl>microtime</docrelurl>
      </item>
      <item name="gettimeofday">
        <description>This is an interface to gettimeofday(2). It returns an associative array containing the data returned from the system call.</description>
        <signature>mixed gettimeofday ([ bool $return_float = false ])</signature>
        <docrelurl>gettimeofday</docrelurl>
      </item>
      <item name="uniqid">
        <description>Gets a prefixed unique identifier based on the current time in microseconds.</description>
        <signature>string uniqid ([ string $prefix = &quot;&quot; [, bool $more_entropy = false ]])</signature>
        <docrelurl>uniqid</docrelurl>
      </item>
      <item name="quoted_printable_decode">
        <description>This function returns an 8-bit binary string corresponding to the decoded quoted printable string (according to RFC2045, section 6.7, not RFC2821, section 4.5.2, so additional periods are not stripped from the beginning of line).</description>
        <signature>string quoted_printable_decode (string $str)</signature>
        <docrelurl>quoted_printable_decode</docrelurl>
      </item>
      <item name="quoted_printable_encode">
        <description>Returns a quoted printable string created according to RFC2045, section 6.7.</description>
        <signature>string quoted_printable_encode (string $str)</signature>
        <docrelurl>quoted_printable_encode</docrelurl>
      </item>
      <item name="convert_cyr_string">
        <description>Converts from one Cyrillic character set to another.</description>
        <signature>string convert_cyr_string (string $str , string $from , string $to)</signature>
        <docrelurl>convert_cyr_string</docrelurl>
      </item>
      <item name="get_current_user">
        <description>string get_current_user ( void) Returns the name of the owner of the current PHP script.</description>
        <signature>string get_current_user (void)</signature>
        <docrelurl>get_current_user</docrelurl>
      </item>
      <item name="set_time_limit">
        <description>Set the number of seconds a script is allowed to run. If this is reached, the script returns a fatal error. The default limit is 30 seconds or, if it exists, the max_execution_time value defined in the php.ini.</description>
        <signature>void set_time_limit (int $seconds)</signature>
        <docrelurl>set_time_limit</docrelurl>
      </item>
      <item name="get_cfg_var">
        <description>Gets the value of a PHP configuration option.</description>
        <signature>string get_cfg_var (string $option)</signature>
        <docrelurl>get_cfg_var</docrelurl>
      </item>
      <item name="magic_quotes_runtime">
        <description>Alias of set_magic_quotes_runtime ini_set main PHP Options/Info Functions PHP Manual magic_quotes_runtime (PHP 4, PHP 5)</description>
        <signature>Alias of set_magic_quotes_runtime ini_set</signature>
        <docrelurl>magic_quotes_runtime</docrelurl>
      </item>
      <item name="set_magic_quotes_runtime">
        <description>Set the current active configuration setting of magic_quotes_runtime.</description>
        <signature>bool set_magic_quotes_runtime (bool $new_setting)</signature>
        <docrelurl>set_magic_quotes_runtime</docrelurl>
      </item>
      <item name="get_magic_quotes_gpc">
        <description>Returns the current configuration setting of magic_quotes_gpc</description>
        <signature>int get_magic_quotes_gpc (void)</signature>
        <docrelurl>get_magic_quotes_gpc</docrelurl>
      </item>
      <item name="get_magic_quotes_runtime">
        <description>int get_magic_quotes_runtime ( void) Returns the current active configuration setting of magic_quotes_runtime.</description>
        <signature>int get_magic_quotes_runtime (void)</signature>
        <docrelurl>get_magic_quotes_runtime</docrelurl>
      </item>
      <item name="import_request_variables">
        <description>Imports GET/POST/Cookie variables into the global scope. It is useful if you disabled register_globals, but would like to see some variables in the global scope.</description>
        <signature>bool import_request_variables (string $types [, string $prefix ])</signature>
        <docrelurl>import_request_variables</docrelurl>
      </item>
      <item name="error_log">
        <description>Sends an error message to the web server&apos;s error log or to a file.</description>
        <signature>bool error_log (string $message [, int $message_type = 0 [, string $destination [, string $extra_headers ]]])</signature>
        <docrelurl>error_log</docrelurl>
      </item>
      <item name="error_get_last">
        <description>Gets information about the last error that occurred.</description>
        <signature>array error_get_last (void)</signature>
        <docrelurl>error_get_last</docrelurl>
      </item>
      <item name="call_user_func">
        <description>Call a user defined function given by the function parameter.</description>
        <signature>mixed call_user_func (callback $function [, mixed $parameter [, mixed $... ]])</signature>
        <docrelurl>call_user_func</docrelurl>
      </item>
      <item name="call_user_func_array">
        <description>Call a user defined function with the parameters in param_arr.</description>
        <signature>mixed call_user_func_array (callback $function , array $param_arr)</signature>
        <docrelurl>call_user_func_array</docrelurl>
      </item>
      <item name="call_user_method">
        <description>mixed call_user_method ( string $method_name , object &amp;$obj [, mixed $parameter [, mixed $... ]]) Warning The call_user_method() function is deprecated as of PHP 4.1.0.</description>
        <signature>mixed call_user_method (string $method_name , object &amp;$obj [, mixed $parameter [, mixed $... ]])</signature>
        <docrelurl>call_user_method</docrelurl>
      </item>
      <item name="call_user_method_array">
        <description>mixed call_user_method_array ( string $method_name , object &amp;$obj , array $params) Warning The call_user_method_array() function is deprecated as of PHP 4.1.0.</description>
        <signature>mixed call_user_method_array (string $method_name , object &amp;$obj , array $params)</signature>
        <docrelurl>call_user_method_array</docrelurl>
      </item>
      <item name="forward_static_call">
        <description>Calls a user defined function or method given by the function parameter, with the following arguments. This function must be called within a method context, it can&apos;t be used outside a class. It uses the late static binding.</description>
        <signature>mixed forward_static_call (callback $function [, mixed $parameter [, mixed $... ]])</signature>
        <docrelurl>forward_static_call</docrelurl>
      </item>
      <item name="forward_static_call_array">
        <description>Calls a user defined function or method given by the function parameter. This function must be called within a method context, it can&apos;t be used outside a class. It uses the late static binding. All arguments of the forwarded method are passed as values, and as an array, similarly to call_user_func_array().</description>
        <signature>mixed forward_static_call_array (callback $function , array $parameters)</signature>
        <docrelurl>forward_static_call_array</docrelurl>
      </item>
      <item name="serialize">
        <description>Generates a storable representation of a value</description>
        <signature>string serialize (mixed $value)</signature>
        <docrelurl>serialize</docrelurl>
      </item>
      <item name="unserialize">
        <description>mixed unserialize ( string $str) unserialize() takes a single serialized variable and converts it back into a PHP value.</description>
        <signature>mixed unserialize (string $str)</signature>
        <docrelurl>unserialize</docrelurl>
      </item>
      <item name="var_dump">
        <description>void var_dump ( mixed $expression [, mixed $... ]) This function displays structured information about one or more expressions that includes its type and value. Arrays and objects are explored recursively with values indented to show structure.</description>
        <signature>void var_dump (mixed $expression [, mixed $... ])</signature>
        <docrelurl>var_dump</docrelurl>
      </item>
      <item name="var_export">
        <description>mixed var_export ( mixed $expression [, bool $return = false ]) var_export() gets structured information about the given variable. It is similar to var_dump() with one exception: the returned representation is valid PHP code.</description>
        <signature>mixed var_export (mixed $expression [, bool $return = false ])</signature>
        <docrelurl>var_export</docrelurl>
      </item>
      <item name="debug_zval_dump">
        <description>Dumps a string representation of an internal zend value to output.</description>
        <signature>void debug_zval_dump (mixed $variable)</signature>
        <docrelurl>debug_zval_dump</docrelurl>
      </item>
      <item name="print_r">
        <description>print_r() displays information about a variable in a way that&apos;s readable by humans.</description>
        <signature>mixed print_r (mixed $expression [, bool $return = false ])</signature>
        <docrelurl>print_r</docrelurl>
      </item>
      <item name="memory_get_usage">
        <description>Returns the amount of memory, in bytes, that&apos;s currently being allocated to your PHP script.</description>
        <signature>int memory_get_usage ([ bool $real_usage = false ])</signature>
        <docrelurl>memory_get_usage</docrelurl>
      </item>
      <item name="memory_get_peak_usage">
        <description>Returns the peak of memory, in bytes, that&apos;s been allocated to your PHP script.</description>
        <signature>int memory_get_peak_usage ([ bool $real_usage = false ])</signature>
        <docrelurl>memory_get_peak_usage</docrelurl>
      </item>
      <item name="register_shutdown_function">
        <description>Registers the function named by function to be executed when script processing is complete or when exit() is called.</description>
        <signature>void register_shutdown_function (callback $function [, mixed $parameter [, mixed $... ]])</signature>
        <docrelurl>register_shutdown_function</docrelurl>
      </item>
      <item name="register_tick_function">
        <description>bool register_tick_function ( callback $function [, mixed $arg [, mixed $... ]]) Registers the given function to be executed when a tick is called.</description>
        <signature>bool register_tick_function (callback $function [, mixed $arg [, mixed $... ]])</signature>
        <docrelurl>register_tick_function</docrelurl>
      </item>
      <item name="unregister_tick_function">
        <description>void unregister_tick_function ( string $function_name) De-registers the function named by function_name so it is no longer executed when a tick is called.</description>
        <signature>void unregister_tick_function (string $function_name)</signature>
        <docrelurl>unregister_tick_function</docrelurl>
      </item>
      <item name="highlight_file">
        <description>Prints out or returns a syntax highlighted version of the code contained in filename using the colors defined in the built-in syntax highlighter for PHP.</description>
        <signature>mixed highlight_file (string $filename [, bool $return = false ])</signature>
        <docrelurl>highlight_file</docrelurl>
      </item>
      <item name="show_source">
        <description>Alias of highlight_file php_strip_whitespace sleep Misc. Functions PHP Manual show_source (PHP 4, PHP 5)</description>
        <signature>Alias of highlight_file php_strip_whitespace</signature>
        <docrelurl>show_source</docrelurl>
      </item>
      <item name="highlight_string">
        <description>mixed highlight_string ( string $str [, bool $return = false ]) Outputs or returns a syntax highlighted version of the given PHP code using the colors defined in the built-in syntax highlighter for PHP.</description>
        <signature>mixed highlight_string (string $str [, bool $return = false ])</signature>
        <docrelurl>highlight_string</docrelurl>
      </item>
      <item name="php_strip_whitespace">
        <description>Returns the PHP source code in filename with PHP comments and whitespace removed. This may be useful for determining the amount of actual code in your scripts compared with the amount of comments. This is similar to using php -w from the commandline.</description>
        <signature>string php_strip_whitespace (string $filename)</signature>
        <docrelurl>php_strip_whitespace</docrelurl>
      </item>
      <item name="ini_get">
        <description>Returns the value of the configuration option on success.</description>
        <signature>string ini_get (string $varname)</signature>
        <docrelurl>ini_get</docrelurl>
      </item>
      <item name="ini_get_all">
        <description>Returns all the registered configuration options.</description>
        <signature>array ini_get_all ([ string $extension [, bool $details = true ]])</signature>
        <docrelurl>ini_get_all</docrelurl>
      </item>
      <item name="ini_set">
        <description>Sets the value of the given configuration option. The configuration option will keep this new value during the script&apos;s execution, and will be restored at the script&apos;s ending.</description>
        <signature>string ini_set (string $varname , string $newvalue)</signature>
        <docrelurl>ini_set</docrelurl>
      </item>
      <item name="ini_alter">
        <description>Alias of ini_set getrusage ini_get_all PHP Options/Info Functions PHP Manual ini_alter (PHP 4, PHP 5)</description>
        <signature>Alias of ini_set getrusage</signature>
        <docrelurl>ini_alter</docrelurl>
      </item>
      <item name="ini_restore">
        <description>Restores a given configuration option to its original value.</description>
        <signature>void ini_restore (string $varname)</signature>
        <docrelurl>ini_restore</docrelurl>
      </item>
      <item name="get_include_path">
        <description>string get_include_path ( void) Gets the current include_path configuration option value.</description>
        <signature>string get_include_path (void)</signature>
        <docrelurl>get_include_path</docrelurl>
      </item>
      <item name="set_include_path">
        <description>Sets the include_path configuration option for the duration of the script.</description>
        <signature>string set_include_path (string $new_include_path)</signature>
        <docrelurl>set_include_path</docrelurl>
      </item>
      <item name="restore_include_path">
        <description>void restore_include_path ( void) Restores the include_path configuration option back to its original master value as set in php.ini</description>
        <signature>void restore_include_path (void)</signature>
        <docrelurl>restore_include_path</docrelurl>
      </item>
      <item name="setcookie">
        <description>setcookie() defines a cookie to be sent along with the rest of the HTTP headers. Like other headers, cookies must be sent before any output from your script (this is a protocol restriction). This requires that you place calls to this function prior to any output, including &lt;html&gt; and &lt;head&gt; tags as well as any whitespace.</description>
        <signature>bool setcookie (string $name [, string $value [, int $expire = 0 [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]]]])</signature>
        <docrelurl>setcookie</docrelurl>
      </item>
      <item name="setrawcookie">
        <description>setrawcookie() is exactly the same as setcookie() except that the cookie value will not be automatically urlencoded when sent to the browser.</description>
        <signature>bool setrawcookie (string $name [, string $value [, int $expire = 0 [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]]]])</signature>
        <docrelurl>setrawcookie</docrelurl>
      </item>
      <item name="header">
        <description>header() is used to send a raw HTTP header. See the HTTP/1.1 specification for more information on HTTP headers.</description>
        <signature>void header (string $string [, bool $replace = true [, int $http_response_code ]])</signature>
        <docrelurl>header</docrelurl>
      </item>
      <item name="header_remove">
        <description>Removes an HTTP header previously set using header().</description>
        <signature>void header_remove ([ string $name ])</signature>
        <docrelurl>header_remove</docrelurl>
      </item>
      <item name="headers_sent">
        <description>Checks if or where headers have been sent.</description>
        <signature>bool headers_sent ([ string &amp;$file [, int &amp;$line ]])</signature>
        <docrelurl>headers_sent</docrelurl>
      </item>
      <item name="headers_list">
        <description>headers_list() will return a list of headers to be sent to the browser / client. To determine whether or not these headers have been sent yet, use headers_sent().</description>
        <signature>array headers_list (void)</signature>
        <docrelurl>headers_list</docrelurl>
      </item>
      <item name="connection_aborted">
        <description>Checks whether the client disconnected.</description>
        <signature>int connection_aborted (void)</signature>
        <docrelurl>connection_aborted</docrelurl>
      </item>
      <item name="connection_status">
        <description>Gets the connection status bitfield.</description>
        <signature>int connection_status (void)</signature>
        <docrelurl>connection_status</docrelurl>
      </item>
      <item name="ignore_user_abort">
        <description>Sets whether a client disconnect should cause a script to be aborted.</description>
        <signature>int ignore_user_abort ([ string $value ])</signature>
        <docrelurl>ignore_user_abort</docrelurl>
      </item>
      <item name="parse_ini_file">
        <description>parse_ini_file() loads in the ini file specified in filename, and returns the settings in it in an associative array.</description>
        <signature>array parse_ini_file (string $filename [, bool $process_sections = false [, int $scanner_mode = INI_SCANNER_NORMAL ]])</signature>
        <docrelurl>parse_ini_file</docrelurl>
      </item>
      <item name="parse_ini_string">
        <description>parse_ini_string() returns the settings in string ini in an associative array.</description>
        <signature>array parse_ini_string (string $ini [, bool $process_sections = false [, int $scanner_mode = INI_SCANNER_NORMAL ]])</signature>
        <docrelurl>parse_ini_string</docrelurl>
      </item>
      <item name="is_uploaded_file">
        <description>Returns TRUE if the file named by filename was uploaded via HTTP POST. This is useful to help ensure that a malicious user hasn&apos;t tried to trick the script into working on files upon which it should not be working--for instance, /etc/passwd.</description>
        <signature>bool is_uploaded_file (string $filename)</signature>
        <docrelurl>is_uploaded_file</docrelurl>
      </item>
      <item name="move_uploaded_file">
        <description>This function checks to ensure that the file designated by filename is a valid upload file (meaning that it was uploaded via PHP&apos;s HTTP POST upload mechanism). If the file is valid, it will be moved to the filename given by destination.</description>
        <signature>bool move_uploaded_file (string $filename , string $destination)</signature>
        <docrelurl>move_uploaded_file</docrelurl>
      </item>
      <item name="gethostbyaddr">
        <description>Returns the host name of the Internet host specified by ip_address.</description>
        <signature>string gethostbyaddr (string $ip_address)</signature>
        <docrelurl>gethostbyaddr</docrelurl>
      </item>
      <item name="gethostbyname">
        <description>Returns the IPv4 address of the Internet host specified by hostname.</description>
        <signature>string gethostbyname (string $hostname)</signature>
        <docrelurl>gethostbyname</docrelurl>
      </item>
      <item name="gethostbynamel">
        <description>Returns a list of IPv4 addresses to which the Internet host specified by hostname resolves.</description>
        <signature>array gethostbynamel (string $hostname)</signature>
        <docrelurl>gethostbynamel</docrelurl>
      </item>
      <item name="gethostname">
        <description>gethostname() gets the standard host name for the local machine.</description>
        <signature>string gethostname (void)</signature>
        <docrelurl>gethostname</docrelurl>
      </item>
      <item name="dns_check_record">
        <description>Alias of checkdnsrr define_syslog_variables dns_get_mx Network Functions PHP Manual dns_check_record (PHP 5)</description>
        <signature>Alias of checkdnsrr define_syslog_variables</signature>
        <docrelurl>dns_check_record</docrelurl>
      </item>
      <item name="checkdnsrr">
        <description>Searches DNS for records of type type corresponding to host.</description>
        <signature>bool checkdnsrr (string $host [, string $type = &quot;MX&quot; ])</signature>
        <docrelurl>checkdnsrr</docrelurl>
      </item>
      <item name="dns_get_mx">
        <description>Alias of getmxrr dns_check_record dns_get_record Network Functions PHP Manual dns_get_mx (PHP 5)</description>
        <signature>Alias of getmxrr dns_check_record</signature>
        <docrelurl>dns_get_mx</docrelurl>
      </item>
      <item name="getmxrr">
        <description>Searches DNS for MX records corresponding to hostname.</description>
        <signature>bool getmxrr (string $hostname , array &amp;$mxhosts [, array &amp;$weight ])</signature>
        <docrelurl>getmxrr</docrelurl>
      </item>
      <item name="dns_get_record">
        <description>Fetch DNS Resource Records associated with the given hostname.</description>
        <signature>array dns_get_record (string $hostname [, int $type = DNS_ANY [, array &amp;$authns [, array &amp;$addtl ]]])</signature>
        <docrelurl>dns_get_record</docrelurl>
      </item>
      <item name="intval">
        <description>Returns the integer value of var, using the specified base for the conversion (the default is base 10). intval() should not be used on objects, as doing so will emit an E_NOTICE level error and return 1.</description>
        <signature>int intval (mixed $var [, int $base = 10 ])</signature>
        <docrelurl>intval</docrelurl>
      </item>
      <item name="floatval">
        <description>Gets the float value of var.</description>
        <signature>float floatval (mixed $var)</signature>
        <docrelurl>floatval</docrelurl>
      </item>
      <item name="doubleval">
        <description>Alias of floatval debug_zval_dump empty Variable handling Functions PHP Manual doubleval (PHP 4, PHP 5)</description>
        <signature>Alias of floatval debug_zval_dump</signature>
        <docrelurl>doubleval</docrelurl>
      </item>
      <item name="strval">
        <description>string strval ( mixed $var) Get the string value of a variable. See the documentation on string for more information on converting to string.</description>
        <signature>string strval (mixed $var)</signature>
        <docrelurl>strval</docrelurl>
      </item>
      <item name="gettype">
        <description>Returns the type of the PHP variable var.</description>
        <signature>string gettype (mixed $var)</signature>
        <docrelurl>gettype</docrelurl>
      </item>
      <item name="settype">
        <description>Set the type of variable var to type.</description>
        <signature>bool settype (mixed &amp;$var , string $type)</signature>
        <docrelurl>settype</docrelurl>
      </item>
      <item name="is_null">
        <description>Finds whether the given variable is NULL.</description>
        <signature>bool is_null (mixed $var)</signature>
        <docrelurl>is_null</docrelurl>
      </item>
      <item name="is_resource">
        <description>Finds whether the given variable is a resource.</description>
        <signature>bool is_resource (mixed $var)</signature>
        <docrelurl>is_resource</docrelurl>
      </item>
      <item name="is_bool">
        <description>Finds whether the given variable is a boolean.</description>
        <signature>bool is_bool (mixed $var)</signature>
        <docrelurl>is_bool</docrelurl>
      </item>
      <item name="is_long">
        <description>Alias of is_int is_integer is_null Variable handling Functions PHP Manual is_long (PHP 4, PHP 5)</description>
        <signature>Alias of is_int is_integer</signature>
        <docrelurl>is_long</docrelurl>
      </item>
      <item name="is_float">
        <description>Finds whether the type of the given variable is float.</description>
        <signature>bool is_float (mixed $var)</signature>
        <docrelurl>is_float</docrelurl>
      </item>
      <item name="is_int">
        <description>Finds whether the type of the given variable is integer.</description>
        <signature>bool is_int (mixed $var)</signature>
        <docrelurl>is_int</docrelurl>
      </item>
      <item name="is_integer">
        <description>Alias of is_int is_int is_long Variable handling Functions PHP Manual is_integer (PHP 4, PHP 5)</description>
        <signature>Alias of is_int is_int</signature>
        <docrelurl>is_integer</docrelurl>
      </item>
      <item name="is_double">
        <description>Alias of is_float is_callable is_float Variable handling Functions PHP Manual is_double (PHP 4, PHP 5)</description>
        <signature>Alias of is_float is_callable</signature>
        <docrelurl>is_double</docrelurl>
      </item>
      <item name="is_real">
        <description>Alias of is_float is_object is_resource Variable handling Functions PHP Manual is_real (PHP 4, PHP 5)</description>
        <signature>Alias of is_float is_object</signature>
        <docrelurl>is_real</docrelurl>
      </item>
      <item name="is_numeric">
        <description>Finds whether the given variable is numeric. Numeric strings consist of optional sign, any number of digits, optional decimal part and optional exponential part. Thus +0123.45e6 is a valid numeric value. Hexadecimal notation (0xFF) is allowed too but only without sign, decimal and exponential part.</description>
        <signature>bool is_numeric (mixed $var)</signature>
        <docrelurl>is_numeric</docrelurl>
      </item>
      <item name="is_string">
        <description>Finds whether the type given variable is string.</description>
        <signature>bool is_string (mixed $var)</signature>
        <docrelurl>is_string</docrelurl>
      </item>
      <item name="is_array">
        <description>Finds whether the given variable is an array.</description>
        <signature>bool is_array (mixed $var)</signature>
        <docrelurl>is_array</docrelurl>
      </item>
      <item name="is_object">
        <description>Finds whether the given variable is an object.</description>
        <signature>bool is_object (mixed $var)</signature>
        <docrelurl>is_object</docrelurl>
      </item>
      <item name="is_scalar">
        <description>Finds whether the given variable is a scalar.</description>
        <signature>bool is_scalar (mixed $var)</signature>
        <docrelurl>is_scalar</docrelurl>
      </item>
      <item name="is_callable">
        <description>Verify that the contents of a variable can be called as a function. This can check that a simple variable contains the name of a valid function, or that an array contains a properly encoded object and function name.</description>
        <signature>bool is_callable (callback $name [, bool $syntax_only = false [, string &amp;$callable_name ]])</signature>
        <docrelurl>is_callable</docrelurl>
      </item>
      <item name="pclose">
        <description>Closes a file pointer to a pipe opened by popen().</description>
        <signature>int pclose (resource $handle)</signature>
        <docrelurl>pclose</docrelurl>
      </item>
      <item name="popen">
        <description>Opens a pipe to a process executed by forking the command given by command.</description>
        <signature>resource popen (string $command , string $mode)</signature>
        <docrelurl>popen</docrelurl>
      </item>
      <item name="readfile">
        <description>Reads a file and writes it to the output buffer.</description>
        <signature>int readfile (string $filename [, bool $use_include_path = false [, resource $context ]])</signature>
        <docrelurl>readfile</docrelurl>
      </item>
      <item name="rewind">
        <description>Sets the file position indicator for handle to the beginning of the file stream.</description>
        <signature>bool rewind (resource $handle)</signature>
        <docrelurl>rewind</docrelurl>
      </item>
      <item name="rmdir">
        <description>Attempts to remove the directory named by dirname. The directory must be empty, and the relevant permissions must permit this. A E_WARNING level error will be generated on failure.</description>
        <signature>bool rmdir (string $dirname [, resource $context ])</signature>
        <docrelurl>rmdir</docrelurl>
      </item>
      <item name="umask">
        <description>umask() sets PHP&apos;s umask to mask &amp; 0777 and returns the old umask. When PHP is being used as a server module, the umask is restored when each request is finished.</description>
        <signature>int umask ([ int $mask ])</signature>
        <docrelurl>umask</docrelurl>
      </item>
      <item name="fclose">
        <description>The file pointed to by handle is closed.</description>
        <signature>bool fclose (resource $handle)</signature>
        <docrelurl>fclose</docrelurl>
      </item>
      <item name="feof">
        <description>Tests for end-of-file on a file pointer.</description>
        <signature>bool feof (resource $handle)</signature>
        <docrelurl>feof</docrelurl>
      </item>
      <item name="fgetc">
        <description>Gets a character from the given file pointer.</description>
        <signature>string fgetc (resource $handle)</signature>
        <docrelurl>fgetc</docrelurl>
      </item>
      <item name="fgets">
        <description>Gets a line from file pointer.</description>
        <signature>string fgets (resource $handle [, int $length ])</signature>
        <docrelurl>fgets</docrelurl>
      </item>
      <item name="fgetss">
        <description>Identical to fgets(), except that fgetss() attempts to strip any NUL bytes, HTML and PHP tags from the text it reads.</description>
        <signature>string fgetss (resource $handle [, int $length [, string $allowable_tags ]])</signature>
        <docrelurl>fgetss</docrelurl>
      </item>
      <item name="fread">
        <description>fread() reads up to length bytes from the file pointer referenced by handle. Reading stops as soon as one of the following conditions is met: length bytes have been read EOF (end of file) is reached a packet becomes available or the socket timeout occurs (for network streams) if the stream is read buffered and it does not represent a plain file, at most one read of up to a number of bytes equal to the chunk size (usually 8192) is made; depending on the previously buffered data, the size of the returned data may be larger than the chunk size.</description>
        <signature>string fread (resource $handle , int $length)</signature>
        <docrelurl>fread</docrelurl>
      </item>
      <item name="fopen">
        <description>fopen() binds a named resource, specified by filename, to a stream.</description>
        <signature>resource fopen (string $filename , string $mode [, bool $use_include_path = false [, resource $context ]])</signature>
        <docrelurl>fopen</docrelurl>
      </item>
      <item name="fpassthru">
        <description>Reads to EOF on the given file pointer from the current position and writes the results to the output buffer.</description>
        <signature>int fpassthru (resource $handle)</signature>
        <docrelurl>fpassthru</docrelurl>
      </item>
      <item name="ftruncate">
        <description>Takes the filepointer, handle, and truncates the file to length, size.</description>
        <signature>bool ftruncate (resource $handle , int $size)</signature>
        <docrelurl>ftruncate</docrelurl>
      </item>
      <item name="fstat">
        <description>Gathers the statistics of the file opened by the file pointer handle. This function is similar to the stat() function except that it operates on an open file pointer instead of a filename.</description>
        <signature>array fstat (resource $handle)</signature>
        <docrelurl>fstat</docrelurl>
      </item>
      <item name="fseek">
        <description>Sets the file position indicator for the file referenced by handle. The new position, measured in bytes from the beginning of the file, is obtained by adding offset to the position specified by whence.</description>
        <signature>int fseek (resource $handle , int $offset [, int $whence = SEEK_SET ])</signature>
        <docrelurl>fseek</docrelurl>
      </item>
      <item name="ftell">
        <description>Returns the position of the file pointer referenced by handle.</description>
        <signature>int ftell (resource $handle)</signature>
        <docrelurl>ftell</docrelurl>
      </item>
      <item name="fflush">
        <description>This function forces a write of all buffered output to the resource pointed to by the file handle.</description>
        <signature>bool fflush (resource $handle)</signature>
        <docrelurl>fflush</docrelurl>
      </item>
      <item name="fwrite">
        <description>int fwrite ( resource $handle , string $string [, int $length ]) fwrite() writes the contents of string to the file stream pointed to by handle.</description>
        <signature>int fwrite (resource $handle , string $string [, int $length ])</signature>
        <docrelurl>fwrite</docrelurl>
      </item>
      <item name="fputs">
        <description>Alias of fwrite fputcsv fread Filesystem Functions PHP Manual fputs (PHP 4, PHP 5)</description>
        <signature>Alias of fwrite fputcsv</signature>
        <docrelurl>fputs</docrelurl>
      </item>
      <item name="mkdir">
        <description>Attempts to create the directory specified by pathname.</description>
        <signature>bool mkdir (string $pathname [, int $mode = 0777 [, bool $recursive = false [, resource $context ]]])</signature>
        <docrelurl>mkdir</docrelurl>
      </item>
      <item name="rename">
        <description>Attempts to rename oldname to newname.</description>
        <signature>bool rename (string $oldname , string $newname [, resource $context ])</signature>
        <docrelurl>rename</docrelurl>
      </item>
      <item name="copy">
        <description>Makes a copy of the file source to dest.</description>
        <signature>bool copy (string $source , string $dest [, resource $context ])</signature>
        <docrelurl>copy</docrelurl>
      </item>
      <item name="tempnam">
        <description>Creates a file with a unique filename, with access permission set to 0600, in the specified directory. If the directory does not exist, tempnam() may generate a file in the system&apos;s temporary directory, and return the name of that.</description>
        <signature>string tempnam (string $dir , string $prefix)</signature>
        <docrelurl>tempnam</docrelurl>
      </item>
      <item name="tmpfile">
        <description>Creates a temporary file with a unique name in read-write (w+) mode and returns a file handle .</description>
        <signature>resource tmpfile (void)</signature>
        <docrelurl>tmpfile</docrelurl>
      </item>
      <item name="file">
        <description>Reads an entire file into an array.</description>
        <signature>array file (string $filename [, int $flags = 0 [, resource $context ]])</signature>
        <docrelurl>file</docrelurl>
      </item>
      <item name="file_get_contents">
        <description>This function is similar to file(), except that file_get_contents() returns the file in a string, starting at the specified offset up to maxlen bytes. On failure, file_get_contents() will return FALSE.</description>
        <signature>string file_get_contents (string $filename [, bool $use_include_path = false [, resource $context [, int $offset = -1 [, int $maxlen ]]]])</signature>
        <docrelurl>file_get_contents</docrelurl>
      </item>
      <item name="file_put_contents">
        <description>This function is identical to calling fopen(), fwrite() and fclose() successively to write data to a file.</description>
        <signature>int file_put_contents (string $filename , mixed $data [, int $flags = 0 [, resource $context ]])</signature>
        <docrelurl>file_put_contents</docrelurl>
      </item>
      <item name="stream_select">
        <description>The stream_select() function accepts arrays of streams and waits for them to change status. Its operation is equivalent to that of the socket_select() function except in that it acts on streams.</description>
        <signature>int stream_select (array &amp;$read , array &amp;$write , array &amp;$except , int $tv_sec [, int $tv_usec = 0 ])</signature>
        <docrelurl>stream_select</docrelurl>
      </item>
      <item name="stream_context_create">
        <description>Creates and returns a stream context with any options supplied in options preset.</description>
        <signature>resource stream_context_create ([ array $options [, array $params ]])</signature>
        <docrelurl>stream_context_create</docrelurl>
      </item>
      <item name="stream_context_set_params">
        <description>Sets parameters on the specified context.</description>
        <signature>bool stream_context_set_params (resource $stream_or_context , array $params)</signature>
        <docrelurl>stream_context_set_params</docrelurl>
      </item>
      <item name="stream_context_get_params">
        <description>Retrieves parameter and options information from the stream or context.</description>
        <signature>array stream_context_get_params (resource $stream_or_context)</signature>
        <docrelurl>stream_context_get_params</docrelurl>
      </item>
      <item name="stream_context_set_option">
        <description>bool stream_context_set_option ( resource $stream_or_context , string $wrapper , string $option , mixed $value) bool stream_context_set_option ( resource $stream_or_context , array $options) Sets an option on the specified context. value is set to option for wrapper</description>
        <signature>bool stream_context_set_option (resource $stream_or_context , string $wrapper , string $option , mixed $value)</signature>
        <docrelurl>stream_context_set_option</docrelurl>
      </item>
      <item name="stream_context_get_options">
        <description>array stream_context_get_options ( resource $stream_or_context) Returns an array of options on the specified stream or context.</description>
        <signature>array stream_context_get_options (resource $stream_or_context)</signature>
        <docrelurl>stream_context_get_options</docrelurl>
      </item>
      <item name="stream_context_get_default">
        <description>resource stream_context_get_default ([ array $options ]) Returns the default stream context which is used whenever file operations (fopen(), file_get_contents(), etc...) are called without a context parameter. Options for the default context can optionally be specified with this function using the same syntax as stream_context_create().</description>
        <signature>resource stream_context_get_default ([ array $options ])</signature>
        <docrelurl>stream_context_get_default</docrelurl>
      </item>
      <item name="stream_context_set_default">
        <description>resource stream_context_set_default ( array $options) Set the default stream context which will be used whenever file operations (fopen(), file_get_contents(), etc...) are called without a context parameter. Uses the same syntax as stream_context_create().</description>
        <signature>resource stream_context_set_default (array $options)</signature>
        <docrelurl>stream_context_set_default</docrelurl>
      </item>
      <item name="stream_filter_prepend">
        <description>Adds filtername to the list of filters attached to stream.</description>
        <signature>resource stream_filter_prepend (resource $stream , string $filtername [, int $read_write [, mixed $params ]])</signature>
        <docrelurl>stream_filter_prepend</docrelurl>
      </item>
      <item name="stream_filter_append">
        <description>Adds filtername to the list of filters attached to stream.</description>
        <signature>resource stream_filter_append (resource $stream , string $filtername [, int $read_write [, mixed $params ]])</signature>
        <docrelurl>stream_filter_append</docrelurl>
      </item>
      <item name="stream_filter_remove">
        <description>Removes a stream filter previously added to a stream with stream_filter_prepend() or stream_filter_append(). Any data remaining in the filter&apos;s internal buffer will be flushed through to the next filter before removing it.</description>
        <signature>bool stream_filter_remove (resource $stream_filter)</signature>
        <docrelurl>stream_filter_remove</docrelurl>
      </item>
      <item name="stream_socket_client">
        <description>Initiates a stream or datagram connection to the destination specified by remote_socket. The type of socket created is determined by the transport specified using standard URL formatting: transport://target. For Internet Domain sockets (AF_INET) such as TCP and UDP, the target portion of the remote_socket parameter should consist of a hostname or IP address followed by a colon and a port number. For Unix domain sockets, the target portion should point to the socket file on the filesystem.</description>
        <signature>resource stream_socket_client (string $remote_socket [, int &amp;$errno [, string &amp;$errstr [, float $timeout = ini_get(&quot;default_socket_timeout&quot;) [, int $flags = STREAM_CLIENT_CONNECT [, resource $context ]]]]])</signature>
        <docrelurl>stream_socket_client</docrelurl>
      </item>
      <item name="stream_socket_server">
        <description>Creates a stream or datagram socket on the specified local_socket.</description>
        <signature>resource stream_socket_server (string $local_socket [, int &amp;$errno [, string &amp;$errstr [, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN [, resource $context ]]]])</signature>
        <docrelurl>stream_socket_server</docrelurl>
      </item>
      <item name="stream_socket_accept">
        <description>Accept a connection on a socket previously created by stream_socket_server().</description>
        <signature>resource stream_socket_accept (resource $server_socket [, float $timeout = ini_get(&quot;default_socket_timeout&quot;) [, string &amp;$peername ]])</signature>
        <docrelurl>stream_socket_accept</docrelurl>
      </item>
      <item name="stream_socket_get_name">
        <description>Returns the local or remote name of a given socket connection.</description>
        <signature>string stream_socket_get_name (resource $handle , bool $want_peer)</signature>
        <docrelurl>stream_socket_get_name</docrelurl>
      </item>
      <item name="stream_socket_recvfrom">
        <description>stream_socket_recvfrom() accepts data from a remote socket up to length bytes.</description>
        <signature>string stream_socket_recvfrom (resource $socket , int $length [, int $flags = 0 [, string &amp;$address ]])</signature>
        <docrelurl>stream_socket_recvfrom</docrelurl>
      </item>
      <item name="stream_socket_sendto">
        <description>Sends the specified data through the socket.</description>
        <signature>int stream_socket_sendto (resource $socket , string $data [, int $flags = 0 [, string $address ]])</signature>
        <docrelurl>stream_socket_sendto</docrelurl>
      </item>
      <item name="stream_socket_enable_crypto">
        <description>mixed stream_socket_enable_crypto ( resource $stream , bool $enable [, int $crypto_type [, resource $session_stream ]]) Enable or disable encryption on the stream.</description>
        <signature>mixed stream_socket_enable_crypto (resource $stream , bool $enable [, int $crypto_type [, resource $session_stream ]])</signature>
        <docrelurl>stream_socket_enable_crypto</docrelurl>
      </item>
      <item name="stream_socket_shutdown">
        <description>Shutdowns (partially or not) a full-duplex connection.</description>
        <signature>bool stream_socket_shutdown (resource $stream , int $how)</signature>
        <docrelurl>stream_socket_shutdown</docrelurl>
      </item>
      <item name="stream_socket_pair">
        <description>stream_socket_pair() creates a pair of connected, indistinguishable socket streams. This function is commonly used in IPC (Inter-Process Communication).</description>
        <signature>array stream_socket_pair (int $domain , int $type , int $protocol)</signature>
        <docrelurl>stream_socket_pair</docrelurl>
      </item>
      <item name="stream_copy_to_stream">
        <description>Makes a copy of up to maxlength bytes of data from the current position (or from the offset position, if specified) in source to dest. If maxlength is not specified, all remaining content in source will be copied.</description>
        <signature>int stream_copy_to_stream (resource $source , resource $dest [, int $maxlength = -1 [, int $offset = 0 ]])</signature>
        <docrelurl>stream_copy_to_stream</docrelurl>
      </item>
      <item name="stream_get_contents">
        <description>Identical to file_get_contents(), except that stream_get_contents() operates on an already open stream resource and returns the remaining contents in a string, up to maxlength bytes and starting at the specified offset.</description>
        <signature>string stream_get_contents (resource $handle [, int $maxlength = -1 [, int $offset = -1 ]])</signature>
        <docrelurl>stream_get_contents</docrelurl>
      </item>
      <item name="stream_supports_lock">
        <description>Tells whether the stream supports locking through flock().</description>
        <signature>bool stream_supports_lock (resource $stream)</signature>
        <docrelurl>stream_supports_lock</docrelurl>
      </item>
      <item name="fgetcsv">
        <description>Similar to fgets() except that fgetcsv() parses the line it reads for fields in CSV format and returns an array containing the fields read.</description>
        <signature>array fgetcsv (resource $handle [, int $length = 0 [, string $delimiter = &apos;,&apos; [, string $enclosure = &apos;&quot;&apos; [, string $escape = &apos;\\&apos; ]]]])</signature>
        <docrelurl>fgetcsv</docrelurl>
      </item>
      <item name="fputcsv">
        <description>fputcsv() formats a line (passed as a fields array) as CSV and write it (terminated by a newline) to the specified file handle.</description>
        <signature>int fputcsv (resource $handle , array $fields [, string $delimiter = &apos;,&apos; [, string $enclosure = &apos;&quot;&apos; ]])</signature>
        <docrelurl>fputcsv</docrelurl>
      </item>
      <item name="flock">
        <description>flock() allows you to perform a simple reader/writer model which can be used on virtually every platform (including most Unix derivatives and even Windows).</description>
        <signature>bool flock (resource $handle , int $operation [, int &amp;$wouldblock ])</signature>
        <docrelurl>flock</docrelurl>
      </item>
      <item name="get_meta_tags">
        <description>Opens filename and parses it line by line for &lt;meta&gt; tags in the file. The parsing stops at &lt;/head&gt;.</description>
        <signature>array get_meta_tags (string $filename [, bool $use_include_path = false ])</signature>
        <docrelurl>get_meta_tags</docrelurl>
      </item>
      <item name="stream_set_read_buffer">
        <description>Sets the read buffer. It&apos;s the equivalent of stream_set_write_buffer(), but for read operations.</description>
        <signature>int stream_set_read_buffer (resource $stream , int $buffer)</signature>
        <docrelurl>stream_set_read_buffer</docrelurl>
      </item>
      <item name="stream_set_write_buffer">
        <description>Sets the buffering for write operations on the given stream to buffer bytes.</description>
        <signature>int stream_set_write_buffer (resource $stream , int $buffer)</signature>
        <docrelurl>stream_set_write_buffer</docrelurl>
      </item>
      <item name="set_file_buffer">
        <description>Alias of stream_set_write_buffer rmdir stat Filesystem Functions PHP Manual set_file_buffer (PHP 4, PHP 5)</description>
        <signature>Alias of stream_set_write_buffer rmdir</signature>
        <docrelurl>set_file_buffer</docrelurl>
      </item>
      <item name="set_socket_blocking">
        <description>Alias of stream_set_blocking Stream Functions stream_bucket_append Stream Functions PHP Manual set_socket_blocking (PHP 4, PHP 5)</description>
        <signature>Alias of stream_set_blocking Stream Functions</signature>
        <docrelurl>set_socket_blocking</docrelurl>
      </item>
      <item name="stream_set_blocking">
        <description>Sets blocking or non-blocking mode on a stream.</description>
        <signature>bool stream_set_blocking (resource $stream , int $mode)</signature>
        <docrelurl>stream_set_blocking</docrelurl>
      </item>
      <item name="socket_set_blocking">
        <description>Alias of stream_set_blocking socket_get_status socket_set_timeout Network Functions PHP Manual socket_set_blocking (PHP 4, PHP 5)</description>
        <signature>Alias of stream_set_blocking socket_get_status</signature>
        <docrelurl>socket_set_blocking</docrelurl>
      </item>
      <item name="stream_get_meta_data">
        <description>Returns information about an existing stream.</description>
        <signature>array stream_get_meta_data (resource $stream)</signature>
        <docrelurl>stream_get_meta_data</docrelurl>
      </item>
      <item name="stream_get_line">
        <description>Gets a line from the given handle.</description>
        <signature>string stream_get_line (resource $handle , int $length [, string $ending ])</signature>
        <docrelurl>stream_get_line</docrelurl>
      </item>
      <item name="stream_wrapper_register">
        <description>Allows you to implement your own protocol handlers and streams for use with all the other filesystem functions (such as fopen(), fread() etc.).</description>
        <signature>bool stream_wrapper_register (string $protocol , string $classname [, int $flags = 0 ])</signature>
        <docrelurl>stream_wrapper_register</docrelurl>
      </item>
      <item name="stream_register_wrapper">
        <description>Alias of stream_wrapper_register stream_notification_callback stream_resolve_include_path Stream Functions PHP Manual stream_register_wrapper (PHP 4 &gt;= 4.3.0, PHP 5)</description>
        <signature>Alias of stream_wrapper_register stream_notification_callback</signature>
        <docrelurl>stream_register_wrapper</docrelurl>
      </item>
      <item name="stream_wrapper_unregister">
        <description>Allows you to disable an already defined stream wrapper. Once the wrapper has been disabled you may override it with a user-defined wrapper using stream_wrapper_register() or reenable it later on with stream_wrapper_restore().</description>
        <signature>bool stream_wrapper_unregister (string $protocol)</signature>
        <docrelurl>stream_wrapper_unregister</docrelurl>
      </item>
      <item name="stream_wrapper_restore">
        <description>Restores a built-in wrapper previously unregistered with stream_wrapper_unregister().</description>
        <signature>bool stream_wrapper_restore (string $protocol)</signature>
        <docrelurl>stream_wrapper_restore</docrelurl>
      </item>
      <item name="stream_get_wrappers">
        <description>Retrieve list of registered streams available on the running system.</description>
        <signature>array stream_get_wrappers (void)</signature>
        <docrelurl>stream_get_wrappers</docrelurl>
      </item>
      <item name="stream_get_transports">
        <description>array stream_get_transports ( void) Returns an indexed array containing the name of all socket transports available on the running system.</description>
        <signature>array stream_get_transports (void)</signature>
        <docrelurl>stream_get_transports</docrelurl>
      </item>
      <item name="stream_resolve_include_path">
        <description>Resolve filename against the include path according to the same rules as fopen()/include().</description>
        <signature>string stream_resolve_include_path (string $filename)</signature>
        <docrelurl>stream_resolve_include_path</docrelurl>
      </item>
      <item name="stream_is_local">
        <description>Checks if a stream, or a URL, is a local one or not.</description>
        <signature>bool stream_is_local (mixed $stream_or_url)</signature>
        <docrelurl>stream_is_local</docrelurl>
      </item>
      <item name="get_headers">
        <description>get_headers() returns an array with the headers sent by the server in response to a HTTP request.</description>
        <signature>array get_headers (string $url [, int $format = 0 ])</signature>
        <docrelurl>get_headers</docrelurl>
      </item>
      <item name="stream_set_timeout">
        <description>Sets the timeout value on stream, expressed in the sum of seconds and microseconds.</description>
        <signature>bool stream_set_timeout (resource $stream , int $seconds [, int $microseconds = 0 ])</signature>
        <docrelurl>stream_set_timeout</docrelurl>
      </item>
      <item name="socket_set_timeout">
        <description>Alias of stream_set_timeout socket_set_blocking syslog Network Functions PHP Manual socket_set_timeout (PHP 4, PHP 5)</description>
        <signature>Alias of stream_set_timeout socket_set_blocking</signature>
        <docrelurl>socket_set_timeout</docrelurl>
      </item>
      <item name="socket_get_status">
        <description>Alias of stream_get_meta_data setrawcookie socket_set_blocking Network Functions PHP Manual socket_get_status (PHP 4, PHP 5)</description>
        <signature>Alias of stream_get_meta_data setrawcookie</signature>
        <docrelurl>socket_get_status</docrelurl>
      </item>
      <item name="realpath">
        <description>realpath() expands all symbolic links and resolves references to &apos;/./&apos;, &apos;/../&apos; and extra &apos;/&apos; characters in the input path and return the canonicalized absolute pathname.</description>
        <signature>string realpath (string $path)</signature>
        <docrelurl>realpath</docrelurl>
      </item>
      <item name="fnmatch">
        <description>fnmatch() checks if the passed string would match the given shell wildcard pattern.</description>
        <signature>bool fnmatch (string $pattern , string $string [, int $flags = 0 ])</signature>
        <docrelurl>fnmatch</docrelurl>
      </item>
      <item name="fsockopen">
        <description>Initiates a socket connection to the resource specified by hostname.</description>
        <signature>resource fsockopen (string $hostname [, int $port = -1 [, int &amp;$errno [, string &amp;$errstr [, float $timeout = ini_get(&quot;default_socket_timeout&quot;) ]]]])</signature>
        <docrelurl>fsockopen</docrelurl>
      </item>
      <item name="pfsockopen">
        <description>This function behaves exactly as fsockopen() with the difference that the connection is not closed after the script finishes. It is the persistent version of fsockopen().</description>
        <signature>resource pfsockopen (string $hostname [, int $port = -1 [, int &amp;$errno [, string &amp;$errstr [, float $timeout = ini_get(&quot;default_socket_timeout&quot;) ]]]])</signature>
        <docrelurl>pfsockopen</docrelurl>
      </item>
      <item name="pack">
        <description>Pack given arguments into binary string according to format.</description>
        <signature>string pack (string $format [, mixed $args [, mixed $... ]])</signature>
        <docrelurl>pack</docrelurl>
      </item>
      <item name="unpack">
        <description>Unpacks from a binary string into an array according to the given format.</description>
        <signature>array unpack (string $format , string $data)</signature>
        <docrelurl>unpack</docrelurl>
      </item>
      <item name="get_browser">
        <description>Attempts to determine the capabilities of the user&apos;s browser, by looking up the browser&apos;s information in the browscap.ini file.</description>
        <signature>mixed get_browser ([ string $user_agent [, bool $return_array = false ]])</signature>
        <docrelurl>get_browser</docrelurl>
      </item>
      <item name="crypt">
        <description>crypt() will return a hashed string using the standard Unix DES-based algorithm or alternative algorithms that may be available on the system.</description>
        <signature>string crypt (string $str [, string $salt ])</signature>
        <docrelurl>crypt</docrelurl>
      </item>
      <item name="opendir">
        <description>Opens up a directory handle to be used in subsequent closedir(), readdir(), and rewinddir() calls.</description>
        <signature>resource opendir (string $path [, resource $context ])</signature>
        <docrelurl>opendir</docrelurl>
      </item>
      <item name="closedir">
        <description>Closes the directory stream indicated by dir_handle. The stream must have previously been opened by opendir().</description>
        <signature>void closedir ([ resource $dir_handle ])</signature>
        <docrelurl>closedir</docrelurl>
      </item>
      <item name="chdir">
        <description>Changes PHP&apos;s current directory to directory.</description>
        <signature>bool chdir (string $directory)</signature>
        <docrelurl>chdir</docrelurl>
      </item>
      <item name="getcwd">
        <description>Gets the current working directory.</description>
        <signature>string getcwd (void)</signature>
        <docrelurl>getcwd</docrelurl>
      </item>
      <item name="rewinddir">
        <description>Resets the directory stream indicated by dir_handle to the beginning of the directory.</description>
        <signature>void rewinddir ([ resource $dir_handle ])</signature>
        <docrelurl>rewinddir</docrelurl>
      </item>
      <item name="readdir">
        <description>Returns the filename of the next file from the directory. The filenames are returned in the order in which they are stored by the filesystem.</description>
        <signature>string readdir ([ resource $dir_handle ])</signature>
        <docrelurl>readdir</docrelurl>
      </item>
      <item name="scandir">
        <description>Returns an array of files and directories from the directory.</description>
        <signature>array scandir (string $directory [, int $sorting_order = 0 [, resource $context ]])</signature>
        <docrelurl>scandir</docrelurl>
      </item>
      <item name="glob">
        <description>The glob() function searches for all the pathnames matching pattern according to the rules used by the libc glob() function, which is similar to the rules used by common shells.</description>
        <signature>array glob (string $pattern [, int $flags = 0 ])</signature>
        <docrelurl>glob</docrelurl>
      </item>
      <item name="fileatime">
        <description>int fileatime ( string $filename) Gets the last access time of the given file.</description>
        <signature>int fileatime (string $filename)</signature>
        <docrelurl>fileatime</docrelurl>
      </item>
      <item name="filectime">
        <description>Gets the inode change time of a file.</description>
        <signature>int filectime (string $filename)</signature>
        <docrelurl>filectime</docrelurl>
      </item>
      <item name="filegroup">
        <description>Gets the file group. The group ID is returned in numerical format, use posix_getgrgid() to resolve it to a group name.</description>
        <signature>int filegroup (string $filename)</signature>
        <docrelurl>filegroup</docrelurl>
      </item>
      <item name="fileinode">
        <description>Gets the file inode.</description>
        <signature>int fileinode (string $filename)</signature>
        <docrelurl>fileinode</docrelurl>
      </item>
      <item name="filemtime">
        <description>This function returns the time when the data blocks of a file were being written to, that is, the time when the content of the file was changed.</description>
        <signature>int filemtime (string $filename)</signature>
        <docrelurl>filemtime</docrelurl>
      </item>
      <item name="fileowner">
        <description>Gets the file owner.</description>
        <signature>int fileowner (string $filename)</signature>
        <docrelurl>fileowner</docrelurl>
      </item>
      <item name="fileperms">
        <description>Gets permissions for the given file.</description>
        <signature>int fileperms (string $filename)</signature>
        <docrelurl>fileperms</docrelurl>
      </item>
      <item name="filesize">
        <description>Gets the size for the given file.</description>
        <signature>int filesize (string $filename)</signature>
        <docrelurl>filesize</docrelurl>
      </item>
      <item name="filetype">
        <description>Returns the type of the given file.</description>
        <signature>string filetype (string $filename)</signature>
        <docrelurl>filetype</docrelurl>
      </item>
      <item name="file_exists">
        <description>Checks whether a file or directory exists.</description>
        <signature>bool file_exists (string $filename)</signature>
        <docrelurl>file_exists</docrelurl>
      </item>
      <item name="is_writable">
        <description>Returns TRUE if the filename exists and is writable. The filename argument may be a directory name allowing you to check if a directory is writable.</description>
        <signature>bool is_writable (string $filename)</signature>
        <docrelurl>is_writable</docrelurl>
      </item>
      <item name="is_writeable">
        <description>Alias of is_writable is_writable lchgrp Filesystem Functions PHP Manual is_writeable (PHP 4, PHP 5)</description>
        <signature>Alias of is_writable is_writable</signature>
        <docrelurl>is_writeable</docrelurl>
      </item>
      <item name="is_readable">
        <description>Tells whether a file exists and is readable.</description>
        <signature>bool is_readable (string $filename)</signature>
        <docrelurl>is_readable</docrelurl>
      </item>
      <item name="is_executable">
        <description>Tells whether the filename is executable.</description>
        <signature>bool is_executable (string $filename)</signature>
        <docrelurl>is_executable</docrelurl>
      </item>
      <item name="is_file">
        <description>Tells whether the given file is a regular file.</description>
        <signature>bool is_file (string $filename)</signature>
        <docrelurl>is_file</docrelurl>
      </item>
      <item name="is_dir">
        <description>Tells whether the given filename is a directory.</description>
        <signature>bool is_dir (string $filename)</signature>
        <docrelurl>is_dir</docrelurl>
      </item>
      <item name="is_link">
        <description>Tells whether the given file is a symbolic link.</description>
        <signature>bool is_link (string $filename)</signature>
        <docrelurl>is_link</docrelurl>
      </item>
      <item name="stat">
        <description>Gathers the statistics of the file named by filename. If filename is a symbolic link, statistics are from the file itself, not the symlink.</description>
        <signature>array stat (string $filename)</signature>
        <docrelurl>stat</docrelurl>
      </item>
      <item name="lstat">
        <description>Gathers the statistics of the file or symbolic link named by filename.</description>
        <signature>array lstat (string $filename)</signature>
        <docrelurl>lstat</docrelurl>
      </item>
      <item name="chown">
        <description>Attempts to change the owner of the file filename to user user. Only the superuser may change the owner of a file.</description>
        <signature>bool chown (string $filename , mixed $user)</signature>
        <docrelurl>chown</docrelurl>
      </item>
      <item name="chgrp">
        <description>Attempts to change the group of the file filename to group.</description>
        <signature>bool chgrp (string $filename , mixed $group)</signature>
        <docrelurl>chgrp</docrelurl>
      </item>
      <item name="chmod">
        <description>Attempts to change the mode of the specified file to that given in mode.</description>
        <signature>bool chmod (string $filename , int $mode)</signature>
        <docrelurl>chmod</docrelurl>
      </item>
      <item name="touch">
        <description>Attempts to set the access and modification times of the file named in the filename parameter to the value given in time. Note that the access time is always modified, regardless of the number of parameters.</description>
        <signature>bool touch (string $filename [, int $time = time() [, int $atime ]])</signature>
        <docrelurl>touch</docrelurl>
      </item>
      <item name="clearstatcache">
        <description>When you use stat(), lstat(), or any of the other functions listed in the affected functions list (below), PHP caches the information those functions return in order to provide faster performance. However, in certain cases, you may want to clear the cached information. For instance, if the same file is being checked multiple times within a single script, and that file is in danger of being removed or changed during that script&apos;s operation, you may elect to clear the status cache. In these cases, you can use the clearstatcache() function to clear the information that PHP caches about a file.</description>
        <signature>void clearstatcache ([ bool $clear_realpath_cache = false [, string $filename ]])</signature>
        <docrelurl>clearstatcache</docrelurl>
      </item>
      <item name="disk_total_space">
        <description>Given a string containing a directory, this function will return the total number of bytes on the corresponding filesystem or disk partition.</description>
        <signature>float disk_total_space (string $directory)</signature>
        <docrelurl>disk_total_space</docrelurl>
      </item>
      <item name="disk_free_space">
        <description>Given a string containing a directory, this function will return the number of bytes available on the corresponding filesystem or disk partition.</description>
        <signature>float disk_free_space (string $directory)</signature>
        <docrelurl>disk_free_space</docrelurl>
      </item>
      <item name="diskfreespace">
        <description>Alias of disk_free_space disk_total_space fclose Filesystem Functions PHP Manual diskfreespace (PHP 4, PHP 5)</description>
        <signature>Alias of disk_free_space disk_total_space</signature>
        <docrelurl>diskfreespace</docrelurl>
      </item>
      <item name="mail">
        <description>Sends an email.</description>
        <signature>bool mail (string $to , string $subject , string $message [, string $additional_headers [, string $additional_parameters ]])</signature>
        <docrelurl>mail</docrelurl>
      </item>
      <item name="ezmlm_hash">
        <description>int ezmlm_hash ( string $addr) ezmlm_hash() calculates the hash value needed when keeping EZMLM mailing lists in a MySQL database.</description>
        <signature>int ezmlm_hash (string $addr)</signature>
        <docrelurl>ezmlm_hash</docrelurl>
      </item>
      <item name="openlog">
        <description>openlog() opens a connection to the system logger for a program.</description>
        <signature>bool openlog (string $ident , int $option , int $facility)</signature>
        <docrelurl>openlog</docrelurl>
      </item>
      <item name="syslog">
        <description>syslog() generates a log message that will be distributed by the system logger.</description>
        <signature>bool syslog (int $priority , string $message)</signature>
        <docrelurl>syslog</docrelurl>
      </item>
      <item name="closelog">
        <description>closelog() closes the descriptor being used to write to the system logger. The use of closelog() is optional.</description>
        <signature>bool closelog (void)</signature>
        <docrelurl>closelog</docrelurl>
      </item>
      <item name="define_syslog_variables">
        <description>Initializes all variables used in the syslog functions.</description>
        <signature>void define_syslog_variables (void)</signature>
        <docrelurl>define_syslog_variables</docrelurl>
      </item>
      <item name="lcg_value">
        <description>lcg_value() returns a pseudo random number in the range of (0, 1). The function combines two CGs with periods of 2^31 - 85 and 2^31 - 249. The period of this function is equal to the product of both primes.</description>
        <signature>float lcg_value (void)</signature>
        <docrelurl>lcg_value</docrelurl>
      </item>
      <item name="metaphone">
        <description>Calculates the metaphone key of str.</description>
        <signature>string metaphone (string $str [, int $phonemes = 0 ])</signature>
        <docrelurl>metaphone</docrelurl>
      </item>
      <item name="ob_start">
        <description>This function will turn output buffering on. While output buffering is active no output is sent from the script (other than headers), instead the output is stored in an internal buffer.</description>
        <signature>bool ob_start ([ callback $output_callback [, int $chunk_size = 0 [, bool $erase = true ]]])</signature>
        <docrelurl>ob_start</docrelurl>
      </item>
      <item name="ob_flush">
        <description>This function will send the contents of the output buffer (if any). If you want to further process the buffer&apos;s contents you have to call ob_get_contents() before ob_flush() as the buffer contents are discarded after ob_flush() is called.</description>
        <signature>void ob_flush (void)</signature>
        <docrelurl>ob_flush</docrelurl>
      </item>
      <item name="ob_clean">
        <description>This function discards the contents of the output buffer.</description>
        <signature>void ob_clean (void)</signature>
        <docrelurl>ob_clean</docrelurl>
      </item>
      <item name="ob_end_flush">
        <description>This function will send the contents of the topmost output buffer (if any) and turn this output buffer off. If you want to further process the buffer&apos;s contents you have to call ob_get_contents() before ob_end_flush() as the buffer contents are discarded after ob_end_flush() is called.</description>
        <signature>bool ob_end_flush (void)</signature>
        <docrelurl>ob_end_flush</docrelurl>
      </item>
      <item name="ob_end_clean">
        <description>This function discards the contents of the topmost output buffer and turns off this output buffering. If you want to further process the buffer&apos;s contents you have to call ob_get_contents() before ob_end_clean() as the buffer contents are discarded when ob_end_clean() is called.</description>
        <signature>bool ob_end_clean (void)</signature>
        <docrelurl>ob_end_clean</docrelurl>
      </item>
      <item name="ob_get_flush">
        <description>ob_get_flush() flushes the output buffer, return it as a string and turns off output buffering.</description>
        <signature>string ob_get_flush (void)</signature>
        <docrelurl>ob_get_flush</docrelurl>
      </item>
      <item name="ob_get_clean">
        <description>Gets the current buffer contents and delete current output buffer.</description>
        <signature>string ob_get_clean (void)</signature>
        <docrelurl>ob_get_clean</docrelurl>
      </item>
      <item name="ob_get_length">
        <description>This will return the length of the contents in the output buffer.</description>
        <signature>int ob_get_length (void)</signature>
        <docrelurl>ob_get_length</docrelurl>
      </item>
      <item name="ob_get_level">
        <description>Returns the nesting level of the output buffering mechanism.</description>
        <signature>int ob_get_level (void)</signature>
        <docrelurl>ob_get_level</docrelurl>
      </item>
      <item name="ob_get_status">
        <description>ob_get_status() returns status information on either the top level output buffer or all active output buffer levels if full_status is set to TRUE.</description>
        <signature>array ob_get_status ([ bool $full_status = FALSE ])</signature>
        <docrelurl>ob_get_status</docrelurl>
      </item>
      <item name="ob_get_contents">
        <description>Gets the contents of the output buffer without clearing it.</description>
        <signature>string ob_get_contents (void)</signature>
        <docrelurl>ob_get_contents</docrelurl>
      </item>
      <item name="ob_implicit_flush">
        <description>ob_implicit_flush() will turn implicit flushing on or off. Implicit flushing will result in a flush operation after every output call, so that explicit calls to flush() will no longer be needed.</description>
        <signature>void ob_implicit_flush ([ int $flag = true ])</signature>
        <docrelurl>ob_implicit_flush</docrelurl>
      </item>
      <item name="ob_list_handlers">
        <description>Lists all output handlers in use.</description>
        <signature>array ob_list_handlers (void)</signature>
        <docrelurl>ob_list_handlers</docrelurl>
      </item>
      <item name="ksort">
        <description>Sorts an array by key, maintaining key to data correlations. This is useful mainly for associative arrays.</description>
        <signature>bool ksort (array &amp;$array [, int $sort_flags = SORT_REGULAR ])</signature>
        <docrelurl>ksort</docrelurl>
      </item>
      <item name="krsort">
        <description>Sorts an array by key in reverse order, maintaining key to data correlations. This is useful mainly for associative arrays.</description>
        <signature>bool krsort (array &amp;$array [, int $sort_flags = SORT_REGULAR ])</signature>
        <docrelurl>krsort</docrelurl>
      </item>
      <item name="natsort">
        <description>This function implements a sort algorithm that orders alphanumeric strings in the way a human being would while maintaining key/value associations. This is described as a &quot;natural ordering&quot;. An example of the difference between this algorithm and the regular computer string sorting algorithms (used in sort()) can be seen in the example below.</description>
        <signature>bool natsort (array &amp;$array)</signature>
        <docrelurl>natsort</docrelurl>
      </item>
      <item name="natcasesort">
        <description>natcasesort() is a case insensitive version of natsort().</description>
        <signature>bool natcasesort (array &amp;$array)</signature>
        <docrelurl>natcasesort</docrelurl>
      </item>
      <item name="asort">
        <description>This function sorts an array such that array indices maintain their correlation with the array elements they are associated with. This is used mainly when sorting associative arrays where the actual element order is significant.</description>
        <signature>bool asort (array &amp;$array [, int $sort_flags = SORT_REGULAR ])</signature>
        <docrelurl>asort</docrelurl>
      </item>
      <item name="arsort">
        <description>This function sorts an array such that array indices maintain their correlation with the array elements they are associated with.</description>
        <signature>bool arsort (array &amp;$array [, int $sort_flags = SORT_REGULAR ])</signature>
        <docrelurl>arsort</docrelurl>
      </item>
      <item name="sort">
        <description>This function sorts an array. Elements will be arranged from lowest to highest when this function has completed.</description>
        <signature>bool sort (array &amp;$array [, int $sort_flags = SORT_REGULAR ])</signature>
        <docrelurl>sort</docrelurl>
      </item>
      <item name="rsort">
        <description>This function sorts an array in reverse order (highest to lowest).</description>
        <signature>bool rsort (array &amp;$array [, int $sort_flags = SORT_REGULAR ])</signature>
        <docrelurl>rsort</docrelurl>
      </item>
      <item name="usort">
        <description>This function will sort an array by its values using a user-supplied comparison function. If the array you wish to sort needs to be sorted by some non-trivial criteria, you should use this function.</description>
        <signature>bool usort (array &amp;$array , callback $cmp_function)</signature>
        <docrelurl>usort</docrelurl>
      </item>
      <item name="uasort">
        <description>This function sorts an array such that array indices maintain their correlation with the array elements they are associated with, using a user-defined comparison function.</description>
        <signature>bool uasort (array &amp;$array , callback $cmp_function)</signature>
        <docrelurl>uasort</docrelurl>
      </item>
      <item name="uksort">
        <description>uksort() will sort the keys of an array using a user-supplied comparison function. If the array you wish to sort needs to be sorted by some non-trivial criteria, you should use this function.</description>
        <signature>bool uksort (array &amp;$array , callback $cmp_function)</signature>
        <docrelurl>uksort</docrelurl>
      </item>
      <item name="shuffle">
        <description>This function shuffles (randomizes the order of the elements in) an array.</description>
        <signature>bool shuffle (array &amp;$array)</signature>
        <docrelurl>shuffle</docrelurl>
      </item>
      <item name="array_walk">
        <description>bool array_walk ( array &amp;$array , callback $funcname [, mixed $userdata ]) Applies the user-defined function funcname to each element of the array array.</description>
        <signature>bool array_walk (array &amp;$array , callback $funcname [, mixed $userdata ])</signature>
        <docrelurl>array_walk</docrelurl>
      </item>
      <item name="array_walk_recursive">
        <description>Applies the user-defined function funcname to each element of the input array. This function will recur into deeper arrays.</description>
        <signature>bool array_walk_recursive (array &amp;$input , callback $funcname [, mixed $userdata ])</signature>
        <docrelurl>array_walk_recursive</docrelurl>
      </item>
      <item name="count">
        <description>Counts all elements in an array, or something in an object.</description>
        <signature>int count (mixed $var [, int $mode = COUNT_NORMAL ])</signature>
        <docrelurl>count</docrelurl>
      </item>
      <item name="end">
        <description>end() advances array&apos;s internal pointer to the last element, and returns its value.</description>
        <signature>mixed end (array &amp;$array)</signature>
        <docrelurl>end</docrelurl>
      </item>
      <item name="prev">
        <description>Rewind the internal array pointer.</description>
        <signature>mixed prev (array &amp;$array)</signature>
        <docrelurl>prev</docrelurl>
      </item>
      <item name="next">
        <description>next() behaves like current(), with one difference. It advances the internal array pointer one place forward before returning the element value. That means it returns the next array value and advances the internal array pointer by one.</description>
        <signature>mixed next (array &amp;$array)</signature>
        <docrelurl>next</docrelurl>
      </item>
      <item name="reset">
        <description>reset() rewinds array&apos;s internal pointer to the first element and returns the value of the first array element.</description>
        <signature>mixed reset (array &amp;$array)</signature>
        <docrelurl>reset</docrelurl>
      </item>
      <item name="current">
        <description>Every array has an internal pointer to its &quot;current&quot; element, which is initialized to the first element inserted into the array.</description>
        <signature>mixed current (array &amp;$array)</signature>
        <docrelurl>current</docrelurl>
      </item>
      <item name="key">
        <description>key() returns the index element of the current array position.</description>
        <signature>mixed key (array &amp;$array)</signature>
        <docrelurl>key</docrelurl>
      </item>
      <item name="min">
        <description>If the first and only parameter is an array, min() returns the lowest value in that array. If at least two parameters are provided, min() returns the smallest of these values.</description>
        <signature>mixed min (array $values)</signature>
        <docrelurl>min</docrelurl>
      </item>
      <item name="max">
        <description>If the first and only parameter is an array, max() returns the highest value in that array. If at least two parameters are provided, max() returns the biggest of these values.</description>
        <signature>mixed max (array $values)</signature>
        <docrelurl>max</docrelurl>
      </item>
      <item name="in_array">
        <description>Searches haystack for needle using loose comparison unless strict is set.</description>
        <signature>bool in_array (mixed $needle , array $haystack [, bool $strict = FALSE ])</signature>
        <docrelurl>in_array</docrelurl>
      </item>
      <item name="array_search">
        <description>Searches haystack for needle.</description>
        <signature>mixed array_search (mixed $needle , array $haystack [, bool $strict = false ])</signature>
        <docrelurl>array_search</docrelurl>
      </item>
      <item name="extract">
        <description>Import variables from an array into the current symbol table.</description>
        <signature>int extract (array &amp;$var_array [, int $extract_type = EXTR_OVERWRITE [, string $prefix ]])</signature>
        <docrelurl>extract</docrelurl>
      </item>
      <item name="compact">
        <description>Creates an array containing variables and their values.</description>
        <signature>array compact (mixed $varname [, mixed $... ])</signature>
        <docrelurl>compact</docrelurl>
      </item>
      <item name="array_fill">
        <description>Fills an array with num entries of the value of the value parameter, keys starting at the start_index parameter.</description>
        <signature>array array_fill (int $start_index , int $num , mixed $value)</signature>
        <docrelurl>array_fill</docrelurl>
      </item>
      <item name="array_fill_keys">
        <description>Fills an array with the value of the value parameter, using the values of the keys array as keys.</description>
        <signature>array array_fill_keys (array $keys , mixed $value)</signature>
        <docrelurl>array_fill_keys</docrelurl>
      </item>
      <item name="range">
        <description>Create an array containing a range of elements.</description>
        <signature>array range (mixed $start , mixed $limit [, number $step = 1 ])</signature>
        <docrelurl>range</docrelurl>
      </item>
      <item name="array_multisort">
        <description>array_multisort() can be used to sort several arrays at once, or a multi-dimensional array by one or more dimensions.</description>
        <signature>bool array_multisort (array &amp;$arr [, mixed $arg = SORT_ASC [, mixed $arg = SORT_REGULAR [, mixed $... ]]])</signature>
        <docrelurl>array_multisort</docrelurl>
      </item>
      <item name="array_push">
        <description>array_push() treats array as a stack, and pushes the passed variables onto the end of array. The length of array increases by the number of variables pushed. Has the same effect as: &lt;?php $array[] = $var;?&gt; repeated for each var.</description>
        <signature>int array_push (array &amp;$array , mixed $var [, mixed $... ])</signature>
        <docrelurl>array_push</docrelurl>
      </item>
      <item name="array_pop">
        <description>array_pop() pops and returns the last value of the array, shortening the array by one element. If array is empty (or is not an array), NULL will be returned. Will additionally produce a Warning when called on a non-array.</description>
        <signature>mixed array_pop (array &amp;$array)</signature>
        <docrelurl>array_pop</docrelurl>
      </item>
      <item name="array_shift">
        <description>array_shift() shifts the first value of the array off and returns it, shortening the array by one element and moving everything down. All numerical array keys will be modified to start counting from zero while literal keys won&apos;t be touched.</description>
        <signature>mixed array_shift (array &amp;$array)</signature>
        <docrelurl>array_shift</docrelurl>
      </item>
      <item name="array_unshift">
        <description>array_unshift() prepends passed elements to the front of the array. Note that the list of elements is prepended as a whole, so that the prepended elements stay in the same order. All numerical array keys will be modified to start counting from zero while literal keys won&apos;t be touched.</description>
        <signature>int array_unshift (array &amp;$array , mixed $var [, mixed $... ])</signature>
        <docrelurl>array_unshift</docrelurl>
      </item>
      <item name="array_splice">
        <description>Removes the elements designated by offset and length from the input array, and replaces them with the elements of the replacement array, if supplied.</description>
        <signature>array array_splice (array &amp;$input , int $offset [, int $length = 0 [, mixed $replacement ]])</signature>
        <docrelurl>array_splice</docrelurl>
      </item>
      <item name="array_slice">
        <description>array_slice() returns the sequence of elements from the array array as specified by the offset and length parameters.</description>
        <signature>array array_slice (array $array , int $offset [, int $length [, bool $preserve_keys = false ]])</signature>
        <docrelurl>array_slice</docrelurl>
      </item>
      <item name="array_merge">
        <description>Merges the elements of one or more arrays together so that the values of one are appended to the end of the previous one. It returns the resulting array.</description>
        <signature>array array_merge (array $array1 [, array $... ])</signature>
        <docrelurl>array_merge</docrelurl>
      </item>
      <item name="array_merge_recursive">
        <description>array_merge_recursive() merges the elements of one or more arrays together so that the values of one are appended to the end of the previous one. It returns the resulting array.</description>
        <signature>array array_merge_recursive (array $array1 [, array $... ])</signature>
        <docrelurl>array_merge_recursive</docrelurl>
      </item>
      <item name="array_replace">
        <description>array_replace() replaces the values of the first array with the same values from all the following arrays. If a key from the first array exists in the second array, its value will be replaced by the value from the second array. If the key exists in the second array, and not the first, it will be created in the first array. If a key only exists in the first array, it will be left as is. If several arrays are passed for replacement, they will be processed in order, the later arrays overwriting the previous values.</description>
        <signature>array array_replace (array &amp;$array , array &amp;$array1 [, array &amp;$... ])</signature>
        <docrelurl>array_replace</docrelurl>
      </item>
      <item name="array_replace_recursive">
        <description>array_replace_recursive() replaces the values of the first array with the same values from all the following arrays. If a key from the first array exists in the second array, its value will be replaced by the value from the second array. If the key exists in the second array, and not the first, it will be created in the first array. If a key only exists in the first array, it will be left as is. If several arrays are passed for replacement, they will be processed in order, the later array overwriting the previous values.</description>
        <signature>array array_replace_recursive (array &amp;$array , array &amp;$array1 [, array &amp;$... ])</signature>
        <docrelurl>array_replace_recursive</docrelurl>
      </item>
      <item name="array_keys">
        <description>array_keys() returns the keys, numeric and string, from the input array.</description>
        <signature>array array_keys (array $input [, mixed $search_value [, bool $strict = false ]])</signature>
        <docrelurl>array_keys</docrelurl>
      </item>
      <item name="array_values">
        <description>array_values() returns all the values from the input array and indexes numerically the array.</description>
        <signature>array array_values (array $input)</signature>
        <docrelurl>array_values</docrelurl>
      </item>
      <item name="array_count_values">
        <description>array_count_values() returns an array using the values of the input array as keys and their frequency in input as values.</description>
        <signature>array array_count_values (array $input)</signature>
        <docrelurl>array_count_values</docrelurl>
      </item>
      <item name="array_reverse">
        <description>Takes an input array and returns a new array with the order of the elements reversed.</description>
        <signature>array array_reverse (array $array [, bool $preserve_keys = false ])</signature>
        <docrelurl>array_reverse</docrelurl>
      </item>
      <item name="array_reduce">
        <description>array_reduce() applies iteratively the function function to the elements of the array input, so as to reduce the array to a single value.</description>
        <signature>mixed array_reduce (array $input , callback $function [, mixed $initial = NULL ])</signature>
        <docrelurl>array_reduce</docrelurl>
      </item>
      <item name="array_pad">
        <description>array_pad() returns a copy of the input padded to size specified by pad_size with value pad_value. If pad_size is positive then the array is padded on the right, if it&apos;s negative then on the left. If the absolute value of pad_size is less than or equal to the length of the input then no padding takes place. It is possible to add most 1048576 elements at a time.</description>
        <signature>array array_pad (array $input , int $pad_size , mixed $pad_value)</signature>
        <docrelurl>array_pad</docrelurl>
      </item>
      <item name="array_flip">
        <description>array_flip() returns an array in flip order, i.e. keys from trans become values and values from trans become keys.</description>
        <signature>array array_flip (array $trans)</signature>
        <docrelurl>array_flip</docrelurl>
      </item>
      <item name="array_change_key_case">
        <description>Returns an array with all keys from input lowercased or uppercased. Numbered indices are left as is.</description>
        <signature>array array_change_key_case (array $input [, int $case = CASE_LOWER ])</signature>
        <docrelurl>array_change_key_case</docrelurl>
      </item>
      <item name="array_rand">
        <description>Picks one or more random entries out of an array, and returns the key (or keys) of the random entries.</description>
        <signature>mixed array_rand (array $input [, int $num_req = 1 ])</signature>
        <docrelurl>array_rand</docrelurl>
      </item>
      <item name="array_unique">
        <description>Takes an input array and returns a new array without duplicate values.</description>
        <signature>array array_unique (array $array [, int $sort_flags = SORT_STRING ])</signature>
        <docrelurl>array_unique</docrelurl>
      </item>
      <item name="array_intersect">
        <description>array_intersect() returns an array containing all the values of array1 that are present in all the arguments. Note that keys are preserved.</description>
        <signature>array array_intersect (array $array1 , array $array2 [, array $ ... ])</signature>
        <docrelurl>array_intersect</docrelurl>
      </item>
      <item name="array_intersect_key">
        <description>array_intersect_key() returns an array containing all the entries of array1 which have keys that are present in all the arguments.</description>
        <signature>array array_intersect_key (array $array1 , array $array2 [, array $ ... ])</signature>
        <docrelurl>array_intersect_key</docrelurl>
      </item>
      <item name="array_intersect_ukey">
        <description>array_intersect_ukey() returns an array containing all the values of array1 which have matching keys that are present in all the arguments.</description>
        <signature>array array_intersect_ukey (array $array1 , array $array2 [, array $... ], callback $key_compare_func)</signature>
        <docrelurl>array_intersect_ukey</docrelurl>
      </item>
      <item name="array_uintersect">
        <description>Computes the intersection of arrays, compares data by a callback function.</description>
        <signature>array array_uintersect (array $array1 , array $array2 [, array $ ... ], callback $data_compare_func)</signature>
        <docrelurl>array_uintersect</docrelurl>
      </item>
      <item name="array_intersect_assoc">
        <description>array array_intersect_assoc ( array $array1 , array $array2 [, array $ ... ]) array_intersect_assoc() returns an array containing all the values of array1 that are present in all the arguments. Note that the keys are used in the comparison unlike in array_intersect().</description>
        <signature>array array_intersect_assoc (array $array1 , array $array2 [, array $ ... ])</signature>
        <docrelurl>array_intersect_assoc</docrelurl>
      </item>
      <item name="array_uintersect_assoc">
        <description>Computes the intersection of arrays with additional index check, compares data by a callback function.</description>
        <signature>array array_uintersect_assoc (array $array1 , array $array2 [, array $ ... ], callback $data_compare_func)</signature>
        <docrelurl>array_uintersect_assoc</docrelurl>
      </item>
      <item name="array_intersect_uassoc">
        <description>array_intersect_uassoc() returns an array containing all the values of array1 that are present in all the arguments. Note that the keys are used in the comparison unlike in array_intersect().</description>
        <signature>array array_intersect_uassoc (array $array1 , array $array2 [, array $ ... ], callback $key_compare_func)</signature>
        <docrelurl>array_intersect_uassoc</docrelurl>
      </item>
      <item name="array_uintersect_uassoc">
        <description>Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions Note that the keys are used in the comparison unlike in array_uintersect(). Both the data and the indexes are compared by using separate callback functions.</description>
        <signature>array array_uintersect_uassoc (array $array1 , array $array2 [, array $ ... ], callback $data_compare_func , callback $key_compare_func)</signature>
        <docrelurl>array_uintersect_uassoc</docrelurl>
      </item>
      <item name="array_diff">
        <description>Compares array1 against array2 and returns the difference.</description>
        <signature>array array_diff (array $array1 , array $array2 [, array $ ... ])</signature>
        <docrelurl>array_diff</docrelurl>
      </item>
      <item name="array_diff_key">
        <description>Compares the keys from array1 against the keys from array2 and returns the difference. This function is like array_diff() except the comparison is done on the keys instead of the values.</description>
        <signature>array array_diff_key (array $array1 , array $array2 [, array $... ])</signature>
        <docrelurl>array_diff_key</docrelurl>
      </item>
      <item name="array_diff_ukey">
        <description>Compares the keys from array1 against the keys from array2 and returns the difference. This function is like array_diff() except the comparison is done on the keys instead of the values.</description>
        <signature>array array_diff_ukey (array $array1 , array $array2 [, array $ ... ], callback $key_compare_func)</signature>
        <docrelurl>array_diff_ukey</docrelurl>
      </item>
      <item name="array_udiff">
        <description>Computes the difference of arrays by using a callback function for data comparison. This is unlike array_diff() which uses an internal function for comparing the data.</description>
        <signature>array array_udiff (array $array1 , array $array2 [, array $ ... ], callback $data_compare_func)</signature>
        <docrelurl>array_udiff</docrelurl>
      </item>
      <item name="array_diff_assoc">
        <description>Compares array1 against array2 and returns the difference. Unlike array_diff() the array keys are used in the comparison.</description>
        <signature>array array_diff_assoc (array $array1 , array $array2 [, array $... ])</signature>
        <docrelurl>array_diff_assoc</docrelurl>
      </item>
      <item name="array_udiff_assoc">
        <description>Computes the difference of arrays with additional index check, compares data by a callback function.</description>
        <signature>array array_udiff_assoc (array $array1 , array $array2 [, array $ ... ], callback $data_compare_func)</signature>
        <docrelurl>array_udiff_assoc</docrelurl>
      </item>
      <item name="array_diff_uassoc">
        <description>Compares array1 against array2 and returns the difference. Unlike array_diff() the array keys are used in the comparison.</description>
        <signature>array array_diff_uassoc (array $array1 , array $array2 [, array $... ], callback $key_compare_func)</signature>
        <docrelurl>array_diff_uassoc</docrelurl>
      </item>
      <item name="array_udiff_uassoc">
        <description>Computes the difference of arrays with additional index check, compares data and indexes by a callback function.</description>
        <signature>array array_udiff_uassoc (array $array1 , array $array2 [, array $ ... ], callback $data_compare_func , callback $key_compare_func)</signature>
        <docrelurl>array_udiff_uassoc</docrelurl>
      </item>
      <item name="array_sum">
        <description>array_sum() returns the sum of values in an array.</description>
        <signature>number array_sum (array $array)</signature>
        <docrelurl>array_sum</docrelurl>
      </item>
      <item name="array_product">
        <description>array_product() returns the product of values in an array.</description>
        <signature>number array_product (array $array)</signature>
        <docrelurl>array_product</docrelurl>
      </item>
      <item name="array_filter">
        <description>Iterates over each value in the input array passing them to the callback function. If the callback function returns true, the current value from input is returned into the result array. Array keys are preserved.</description>
        <signature>array array_filter (array $input [, callback $callback ])</signature>
        <docrelurl>array_filter</docrelurl>
      </item>
      <item name="array_map">
        <description>array_map() returns an array containing all the elements of arr1 after applying the callback function to each one. The number of parameters that the callback function accepts should match the number of arrays passed to the array_map()</description>
        <signature>array array_map (callback $callback , array $arr1 [, array $... ])</signature>
        <docrelurl>array_map</docrelurl>
      </item>
      <item name="array_chunk">
        <description>Chunks an array into size large chunks. The last chunk may contain less than size elements.</description>
        <signature>array array_chunk (array $input , int $size [, bool $preserve_keys = false ])</signature>
        <docrelurl>array_chunk</docrelurl>
      </item>
      <item name="array_combine">
        <description>Creates an array by using the values from the keys array as keys and the values from the values array as the corresponding values.</description>
        <signature>array array_combine (array $keys , array $values)</signature>
        <docrelurl>array_combine</docrelurl>
      </item>
      <item name="array_key_exists">
        <description>array_key_exists() returns TRUE if the given key is set in the array. key can be any value possible for an array index.</description>
        <signature>bool array_key_exists (mixed $key , array $search)</signature>
        <docrelurl>array_key_exists</docrelurl>
      </item>
      <item name="pos">
        <description>Alias of current next prev Array Functions PHP Manual pos (PHP 4, PHP 5)</description>
        <signature>Alias of current next</signature>
        <docrelurl>pos</docrelurl>
      </item>
      <item name="sizeof">
        <description>Alias of count shuffle sort Array Functions PHP Manual sizeof (PHP 4, PHP 5)</description>
        <signature>Alias of count shuffle</signature>
        <docrelurl>sizeof</docrelurl>
      </item>
      <item name="assert">
        <description>assert() will check the given assertion and take appropriate action if its result is FALSE.</description>
        <signature>bool assert (mixed $assertion)</signature>
        <docrelurl>assert</docrelurl>
      </item>
      <item name="assert_options">
        <description>Set the various assert() control options or just query their current settings.</description>
        <signature>mixed assert_options (int $what [, mixed $value ])</signature>
        <docrelurl>assert_options</docrelurl>
      </item>
      <item name="version_compare">
        <description>version_compare() compares two &quot;PHP-standardized&quot; version number strings. This is useful if you would like to write programs working only on some versions of PHP.</description>
        <signature>mixed version_compare (string $version1 , string $version2 [, string $operator ])</signature>
        <docrelurl>version_compare</docrelurl>
      </item>
      <item name="str_rot13">
        <description>Performs the ROT13 encoding on the str argument and returns the resulting string.</description>
        <signature>string str_rot13 (string $str)</signature>
        <docrelurl>str_rot13</docrelurl>
      </item>
      <item name="stream_get_filters">
        <description>array stream_get_filters ( void) Retrieve the list of registered filters on the running system.</description>
        <signature>array stream_get_filters (void)</signature>
        <docrelurl>stream_get_filters</docrelurl>
      </item>
      <item name="stream_filter_register">
        <description>stream_filter_register() allows you to implement your own filter on any registered stream used with all the other filesystem functions (such as fopen(), fread() etc.).</description>
        <signature>bool stream_filter_register (string $filtername , string $classname)</signature>
        <docrelurl>stream_filter_register</docrelurl>
      </item>
      <item name="stream_bucket_make_writeable">
        <description>object stream_bucket_make_writeable ( resource $brigade) WarningThis function iscurrently not documented; only its argument list is available.</description>
        <signature>object stream_bucket_make_writeable (resource $brigade)</signature>
        <docrelurl>stream_bucket_make_writeable</docrelurl>
      </item>
      <item name="stream_bucket_prepend">
        <description>void stream_bucket_prepend ( resource $brigade , resource $bucket) WarningThis function iscurrently not documented; only its argument list is available.</description>
        <signature>void stream_bucket_prepend (resource $brigade , resource $bucket)</signature>
        <docrelurl>stream_bucket_prepend</docrelurl>
      </item>
      <item name="stream_bucket_append">
        <description>void stream_bucket_append ( resource $brigade , resource $bucket) WarningThis function iscurrently not documented; only its argument list is available.</description>
        <signature>void stream_bucket_append (resource $brigade , resource $bucket)</signature>
        <docrelurl>stream_bucket_append</docrelurl>
      </item>
      <item name="stream_bucket_new">
        <description>object stream_bucket_new ( resource $stream , string $buffer) WarningThis function iscurrently not documented; only its argument list is available.</description>
        <signature>object stream_bucket_new (resource $stream , string $buffer)</signature>
        <docrelurl>stream_bucket_new</docrelurl>
      </item>
      <item name="output_add_rewrite_var">
        <description>This function adds another name/value pair to the URL rewrite mechanism. The name and value will be added to URLs (as GET parameter) and forms (as hidden input fields) the same way as the session ID when transparent URL rewriting is enabled with session.use_trans_sid. Please note that absolute URLs (http://example.com/..) aren&apos;t rewritten.</description>
        <signature>bool output_add_rewrite_var (string $name , string $value)</signature>
        <docrelurl>output_add_rewrite_var</docrelurl>
      </item>
      <item name="output_reset_rewrite_vars">
        <description>This function resets the URL rewriter and removes all rewrite variables previously set by the output_add_rewrite_var() function or the session mechanism (if session.use_trans_sid was set on session_start()).</description>
        <signature>bool output_reset_rewrite_vars (void)</signature>
        <docrelurl>output_reset_rewrite_vars</docrelurl>
      </item>
      <item name="sys_get_temp_dir">
        <description>Returns the path of the directory PHP stores temporary files in by default.</description>
        <signature>string sys_get_temp_dir (void)</signature>
        <docrelurl>sys_get_temp_dir</docrelurl>
      </item>
      <item name="token_get_all">
        <description>token_get_all() parses the given source string into PHP language tokens using the Zend engine&apos;s lexical scanner.</description>
        <signature>array token_get_all (string $source)</signature>
        <docrelurl>token_get_all</docrelurl>
      </item>
      <item name="token_name">
        <description>token_name() gets the symbolic name for a PHP token value.</description>
        <signature>string token_name (int $token)</signature>
        <docrelurl>token_name</docrelurl>
      </item>
      <item name="zip_open">
        <description>Opens a new zip archive for reading.</description>
        <signature>mixed zip_open (string $filename)</signature>
        <docrelurl>zip_open</docrelurl>
      </item>
      <item name="zip_close">
        <description>Closes the given ZIP file archive.</description>
        <signature>void zip_close (resource $zip)</signature>
        <docrelurl>zip_close</docrelurl>
      </item>
      <item name="zip_read">
        <description>Reads the next entry in a zip file archive.</description>
        <signature>mixed zip_read (resource $zip)</signature>
        <docrelurl>zip_read</docrelurl>
      </item>
      <item name="zip_entry_open">
        <description>Opens a directory entry in a zip file for reading.</description>
        <signature>bool zip_entry_open (resource $zip , resource $zip_entry [, string $mode ])</signature>
        <docrelurl>zip_entry_open</docrelurl>
      </item>
      <item name="zip_entry_close">
        <description>Closes the specified directory entry.</description>
        <signature>bool zip_entry_close (resource $zip_entry)</signature>
        <docrelurl>zip_entry_close</docrelurl>
      </item>
      <item name="zip_entry_read">
        <description>Reads from an open directory entry.</description>
        <signature>string zip_entry_read (resource $zip_entry [, int $length ])</signature>
        <docrelurl>zip_entry_read</docrelurl>
      </item>
      <item name="zip_entry_filesize">
        <description>Returns the actual size of the specified directory entry.</description>
        <signature>int zip_entry_filesize (resource $zip_entry)</signature>
        <docrelurl>zip_entry_filesize</docrelurl>
      </item>
      <item name="zip_entry_name">
        <description>Returns the name of the specified directory entry.</description>
        <signature>string zip_entry_name (resource $zip_entry)</signature>
        <docrelurl>zip_entry_name</docrelurl>
      </item>
      <item name="zip_entry_compressedsize">
        <description>Returns the compressed size of the specified directory entry.</description>
        <signature>int zip_entry_compressedsize (resource $zip_entry)</signature>
        <docrelurl>zip_entry_compressedsize</docrelurl>
      </item>
      <item name="zip_entry_compressionmethod">
        <description>Returns the compression method of the directory entry specified by zip_entry.</description>
        <signature>string zip_entry_compressionmethod (resource $zip_entry)</signature>
        <docrelurl>zip_entry_compressionmethod</docrelurl>
      </item>
      <item name="readgzfile">
        <description>Reads a file, decompresses it and writes it to standard output.</description>
        <signature>int readgzfile (string $filename [, int $use_include_path = 0 ])</signature>
        <docrelurl>readgzfile</docrelurl>
      </item>
      <item name="gzrewind">
        <description>Sets the file position indicator of the given gz-file pointer to the beginning of the file stream.</description>
        <signature>bool gzrewind (resource $zp)</signature>
        <docrelurl>gzrewind</docrelurl>
      </item>
      <item name="gzclose">
        <description>Closes the given gz-file pointer.</description>
        <signature>bool gzclose (resource $zp)</signature>
        <docrelurl>gzclose</docrelurl>
      </item>
      <item name="gzeof">
        <description>Tests the given GZ file pointer for EOF.</description>
        <signature>int gzeof (resource $zp)</signature>
        <docrelurl>gzeof</docrelurl>
      </item>
      <item name="gzgetc">
        <description>Returns a string containing a single (uncompressed) character read from the given gz-file pointer.</description>
        <signature>string gzgetc (resource $zp)</signature>
        <docrelurl>gzgetc</docrelurl>
      </item>
      <item name="gzgets">
        <description>Gets a (uncompressed) string of up to length - 1 bytes read from the given file pointer. Reading ends when length - 1 bytes have been read, on a newline, or on EOF (whichever comes first).</description>
        <signature>string gzgets (resource $zp , int $length)</signature>
        <docrelurl>gzgets</docrelurl>
      </item>
      <item name="gzgetss">
        <description>Identical to gzgets(), except that gzgetss() attempts to strip any HTML and PHP tags from the text it reads.</description>
        <signature>string gzgetss (resource $zp , int $length [, string $allowable_tags ])</signature>
        <docrelurl>gzgetss</docrelurl>
      </item>
      <item name="gzread">
        <description>gzread() reads up to length bytes from the given gz-file pointer. Reading stops when length (uncompressed) bytes have been read or EOF is reached, whichever comes first.</description>
        <signature>string gzread (resource $zp , int $length)</signature>
        <docrelurl>gzread</docrelurl>
      </item>
      <item name="gzopen">
        <description>Opens a gzip (.gz) file for reading or writing.</description>
        <signature>resource gzopen (string $filename , string $mode [, int $use_include_path = 0 ])</signature>
        <docrelurl>gzopen</docrelurl>
      </item>
      <item name="gzpassthru">
        <description>Reads to EOF on the given gz-file pointer from the current position and writes the (uncompressed) results to standard output.</description>
        <signature>int gzpassthru (resource $zp)</signature>
        <docrelurl>gzpassthru</docrelurl>
      </item>
      <item name="gzseek">
        <description>Sets the file position indicator for the given file pointer to the given offset byte into the file stream. Equivalent to calling (in C) gzseek(zp, offset, SEEK_SET).</description>
        <signature>int gzseek (resource $zp , int $offset [, int $whence = SEEK_SET ])</signature>
        <docrelurl>gzseek</docrelurl>
      </item>
      <item name="gztell">
        <description>Gets the position of the given file pointer; i.e., its offset into the uncompressed file stream.</description>
        <signature>int gztell (resource $zp)</signature>
        <docrelurl>gztell</docrelurl>
      </item>
      <item name="gzwrite">
        <description>gzwrite() writes the contents of string to the given gz-file.</description>
        <signature>int gzwrite (resource $zp , string $string [, int $length ])</signature>
        <docrelurl>gzwrite</docrelurl>
      </item>
      <item name="gzputs">
        <description>Alias of gzwrite gzpassthru gzread Zlib Functions PHP Manual gzputs (PHP 4, PHP 5)</description>
        <signature>Alias of gzwrite gzpassthru</signature>
        <docrelurl>gzputs</docrelurl>
      </item>
      <item name="gzfile">
        <description>This function is identical to readgzfile(), except that it returns the file in an array.</description>
        <signature>array gzfile (string $filename [, int $use_include_path = 0 ])</signature>
        <docrelurl>gzfile</docrelurl>
      </item>
      <item name="gzcompress">
        <description>This function compress the given string using the ZLIB data format.</description>
        <signature>string gzcompress (string $data [, int $level = -1 ])</signature>
        <docrelurl>gzcompress</docrelurl>
      </item>
      <item name="gzuncompress">
        <description>This function uncompress a compressed string.</description>
        <signature>string gzuncompress (string $data [, int $length = 0 ])</signature>
        <docrelurl>gzuncompress</docrelurl>
      </item>
      <item name="gzdeflate">
        <description>This function compress the given string using the DEFLATE data format.</description>
        <signature>string gzdeflate (string $data [, int $level = -1 ])</signature>
        <docrelurl>gzdeflate</docrelurl>
      </item>
      <item name="gzinflate">
        <description>This function inflate a deflated string.</description>
        <signature>string gzinflate (string $data [, int $length = 0 ])</signature>
        <docrelurl>gzinflate</docrelurl>
      </item>
      <item name="gzencode">
        <description>This function returns a compressed version of the input data compatible with the output of the gzip program.</description>
        <signature>string gzencode (string $data [, int $level = -1 [, int $encoding_mode = FORCE_GZIP ]])</signature>
        <docrelurl>gzencode</docrelurl>
      </item>
      <item name="ob_gzhandler">
        <description>ob_gzhandler() is intended to be used as a callback function for ob_start() to help facilitate sending gz-encoded data to web browsers that support compressed web pages. Before ob_gzhandler() actually sends compressed data, it determines what type of content encoding the browser will accept (&quot;gzip&quot;, &quot;deflate&quot; or none at all) and will return its output accordingly. All browsers are supported since it&apos;s up to the browser to send the correct header saying that it accepts compressed web pages. If a browser doesn&apos;t support compressed pages this function returns FALSE.</description>
        <signature>string ob_gzhandler (string $buffer , int $mode)</signature>
        <docrelurl>ob_gzhandler</docrelurl>
      </item>
      <item name="zlib_get_coding_type">
        <description>Returns the coding type used for output compression.</description>
        <signature>string zlib_get_coding_type (void)</signature>
        <docrelurl>zlib_get_coding_type</docrelurl>
      </item>
      <item name="libxml_set_streams_context">
        <description>Sets the streams context for the next libxml document load or write.</description>
        <signature>void libxml_set_streams_context (resource $streams_context)</signature>
        <docrelurl>libxml_set_streams_context</docrelurl>
      </item>
      <item name="libxml_use_internal_errors">
        <description>libxml_use_internal_errors() allows you to disable standard libxml errors and enable user error handling.</description>
        <signature>bool libxml_use_internal_errors ([ bool $use_errors = false ])</signature>
        <docrelurl>libxml_use_internal_errors</docrelurl>
      </item>
      <item name="libxml_get_last_error">
        <description>Retrieve last error from libxml.</description>
        <signature>LibXMLError libxml_get_last_error (void)</signature>
        <docrelurl>libxml_get_last_error</docrelurl>
      </item>
      <item name="libxml_clear_errors">
        <description>libxml_clear_errors() clears the libxml error buffer.</description>
        <signature>void libxml_clear_errors (void)</signature>
        <docrelurl>libxml_clear_errors</docrelurl>
      </item>
      <item name="libxml_get_errors">
        <description>Retrieve array of errors.</description>
        <signature>array libxml_get_errors (void)</signature>
        <docrelurl>libxml_get_errors</docrelurl>
      </item>
      <item name="libxml_disable_entity_loader">
        <description>Disable/enable the ability to load external entities.</description>
        <signature>bool libxml_disable_entity_loader ([ bool $disable = true ])</signature>
        <docrelurl>libxml_disable_entity_loader</docrelurl>
      </item>
      <item name="dom_import_simplexml">
        <description>This function takes the node node of class SimpleXML and makes it into a DOMElement node. This new object can then be used as a native DOMElement node.</description>
        <signature>DOMElement dom_import_simplexml (SimpleXMLElement $node)</signature>
        <docrelurl>dom_import_simplexml</docrelurl>
      </item>
      <item name="simplexml_load_file">
        <description>Convert the well-formed XML document in the given file to an object.</description>
        <signature>object simplexml_load_file (string $filename [, string $class_name = &quot;SimpleXMLElement&quot; [, int $options = 0 [, string $ns [, bool $is_prefix = false ]]]])</signature>
        <docrelurl>simplexml_load_file</docrelurl>
      </item>
      <item name="simplexml_load_string">
        <description>Takes a well-formed XML string and returns it as an object.</description>
        <signature>object simplexml_load_string (string $data [, string $class_name = &quot;SimpleXMLElement&quot; [, int $options = 0 [, string $ns [, bool $is_prefix = false ]]]])</signature>
        <docrelurl>simplexml_load_string</docrelurl>
      </item>
      <item name="simplexml_import_dom">
        <description>This function takes a node of a DOM document and makes it into a SimpleXML node. This new object can then be used as a native SimpleXML element.</description>
        <signature>SimpleXMLElement simplexml_import_dom (DOMNode $node [, string $class_name = &quot;SimpleXMLElement&quot; ])</signature>
        <docrelurl>simplexml_import_dom</docrelurl>
      </item>
      <item name="wddx_serialize_value">
        <description>Creates a WDDX packet from a single given value.</description>
        <signature>string wddx_serialize_value (mixed $var [, string $comment ])</signature>
        <docrelurl>wddx_serialize_value</docrelurl>
      </item>
      <item name="wddx_serialize_vars">
        <description>Creates a WDDX packet with a structure that contains the serialized representation of the passed variables.</description>
        <signature>string wddx_serialize_vars (mixed $var_name [, mixed $... ])</signature>
        <docrelurl>wddx_serialize_vars</docrelurl>
      </item>
      <item name="wddx_packet_start">
        <description>Start a new WDDX packet for incremental addition of variables. It automatically creates a structure definition inside the packet to contain the variables.</description>
        <signature>resource wddx_packet_start ([ string $comment ])</signature>
        <docrelurl>wddx_packet_start</docrelurl>
      </item>
      <item name="wddx_packet_end">
        <description>Ends and returns the given WDDX packet.</description>
        <signature>string wddx_packet_end (resource $packet_id)</signature>
        <docrelurl>wddx_packet_end</docrelurl>
      </item>
      <item name="wddx_add_vars">
        <description>Serializes the passed variables and add the result to the given packet.</description>
        <signature>bool wddx_add_vars (resource $packet_id , mixed $var_name [, mixed $... ])</signature>
        <docrelurl>wddx_add_vars</docrelurl>
      </item>
      <item name="wddx_deserialize">
        <description>Unserializes a WDDX packet.</description>
        <signature>mixed wddx_deserialize (string $packet)</signature>
        <docrelurl>wddx_deserialize</docrelurl>
      </item>
      <item name="xml_parser_create">
        <description>xml_parser_create() creates a new XML parser and returns a resource handle referencing it to be used by the other XML functions.</description>
        <signature>resource xml_parser_create ([ string $encoding ])</signature>
        <docrelurl>xml_parser_create</docrelurl>
      </item>
      <item name="xml_parser_create_ns">
        <description>xml_parser_create_ns() creates a new XML parser with XML namespace support and returns a resource handle referencing it to be used by the other XML functions.</description>
        <signature>resource xml_parser_create_ns ([ string $encoding [, string $separator = &apos;:&apos; ]])</signature>
        <docrelurl>xml_parser_create_ns</docrelurl>
      </item>
      <item name="xml_set_object">
        <description>This function allows to use parser inside object. All callback functions could be set with xml_set_element_handler() etc and assumed to be methods of object.</description>
        <signature>bool xml_set_object (resource $parser , object &amp;$object)</signature>
        <docrelurl>xml_set_object</docrelurl>
      </item>
      <item name="xml_set_element_handler">
        <description>Sets the element handler functions for the XML parser. start_element_handler and end_element_handler are strings containing the names of functions that must exist when xml_parse() is called for parser.</description>
        <signature>bool xml_set_element_handler (resource $parser , callback $start_element_handler , callback $end_element_handler)</signature>
        <docrelurl>xml_set_element_handler</docrelurl>
      </item>
      <item name="xml_set_character_data_handler">
        <description>Sets the character data handler function for the XML parser parser.</description>
        <signature>bool xml_set_character_data_handler (resource $parser , callback $handler)</signature>
        <docrelurl>xml_set_character_data_handler</docrelurl>
      </item>
      <item name="xml_set_processing_instruction_handler">
        <description>Sets the processing instruction (PI) handler function for the XML parser parser.</description>
        <signature>bool xml_set_processing_instruction_handler (resource $parser , callback $handler)</signature>
        <docrelurl>xml_set_processing_instruction_handler</docrelurl>
      </item>
      <item name="xml_set_default_handler">
        <description>Sets the default handler function for the XML parser parser.</description>
        <signature>bool xml_set_default_handler (resource $parser , callback $handler)</signature>
        <docrelurl>xml_set_default_handler</docrelurl>
      </item>
      <item name="xml_set_unparsed_entity_decl_handler">
        <description>Sets the unparsed entity declaration handler function for the XML parser parser.</description>
        <signature>bool xml_set_unparsed_entity_decl_handler (resource $parser , callback $handler)</signature>
        <docrelurl>xml_set_unparsed_entity_decl_handler</docrelurl>
      </item>
      <item name="xml_set_notation_decl_handler">
        <description>Sets the notation declaration handler function for the XML parser parser.</description>
        <signature>bool xml_set_notation_decl_handler (resource $parser , callback $handler)</signature>
        <docrelurl>xml_set_notation_decl_handler</docrelurl>
      </item>
      <item name="xml_set_external_entity_ref_handler">
        <description>Sets the external entity reference handler function for the XML parser parser.</description>
        <signature>bool xml_set_external_entity_ref_handler (resource $parser , callback $handler)</signature>
        <docrelurl>xml_set_external_entity_ref_handler</docrelurl>
      </item>
      <item name="xml_set_start_namespace_decl_handler">
        <description>Set a handler to be called when a namespace is declared. Namespace declarations occur inside start tags. But the namespace declaration start handler is called before the start tag handler for each namespace declared in that start tag.</description>
        <signature>bool xml_set_start_namespace_decl_handler (resource $parser , callback $handler)</signature>
        <docrelurl>xml_set_start_namespace_decl_handler</docrelurl>
      </item>
      <item name="xml_set_end_namespace_decl_handler">
        <description>Set a handler to be called when leaving the scope of a namespace declaration. This will be called, for each namespace declaration, after the handler for the end tag of the element in which the namespace was declared.</description>
        <signature>bool xml_set_end_namespace_decl_handler (resource $parser , callback $handler)</signature>
        <docrelurl>xml_set_end_namespace_decl_handler</docrelurl>
      </item>
      <item name="xml_parse">
        <description>xml_parse() parses an XML document. The handlers for the configured events are called as many times as necessary.</description>
        <signature>int xml_parse (resource $parser , string $data [, bool $is_final = false ])</signature>
        <docrelurl>xml_parse</docrelurl>
      </item>
      <item name="xml_parse_into_struct">
        <description>This function parses an XML string into 2 parallel array structures, one (index) containing pointers to the location of the appropriate values in the values array. These last two parameters must be passed by reference.</description>
        <signature>int xml_parse_into_struct (resource $parser , string $data , array &amp;$values [, array &amp;$index ])</signature>
        <docrelurl>xml_parse_into_struct</docrelurl>
      </item>
      <item name="xml_get_error_code">
        <description>Gets the XML parser error code.</description>
        <signature>int xml_get_error_code (resource $parser)</signature>
        <docrelurl>xml_get_error_code</docrelurl>
      </item>
      <item name="xml_error_string">
        <description>Gets the XML parser error string associated with the given code.</description>
        <signature>string xml_error_string (int $code)</signature>
        <docrelurl>xml_error_string</docrelurl>
      </item>
      <item name="xml_get_current_line_number">
        <description>Gets the current line number for the given XML parser.</description>
        <signature>int xml_get_current_line_number (resource $parser)</signature>
        <docrelurl>xml_get_current_line_number</docrelurl>
      </item>
      <item name="xml_get_current_column_number">
        <description>Gets the current column number of the given XML parser.</description>
        <signature>int xml_get_current_column_number (resource $parser)</signature>
        <docrelurl>xml_get_current_column_number</docrelurl>
      </item>
      <item name="xml_get_current_byte_index">
        <description>Gets the current byte index of the given XML parser.</description>
        <signature>int xml_get_current_byte_index (resource $parser)</signature>
        <docrelurl>xml_get_current_byte_index</docrelurl>
      </item>
      <item name="xml_parser_free">
        <description>Frees the given XML parser.</description>
        <signature>bool xml_parser_free (resource $parser)</signature>
        <docrelurl>xml_parser_free</docrelurl>
      </item>
      <item name="xml_parser_set_option">
        <description>Sets an option in an XML parser.</description>
        <signature>bool xml_parser_set_option (resource $parser , int $option , mixed $value)</signature>
        <docrelurl>xml_parser_set_option</docrelurl>
      </item>
      <item name="xml_parser_get_option">
        <description>Gets an option value from an XML parser.</description>
        <signature>mixed xml_parser_get_option (resource $parser , int $option)</signature>
        <docrelurl>xml_parser_get_option</docrelurl>
      </item>
      <item name="utf8_encode">
        <description>This function encodes the string data to UTF-8, and returns the encoded version. UTF-8 is a standard mechanism used by Unicode for encoding wide character values into a byte stream. UTF-8 is transparent to plain ASCII characters, is self-synchronized (meaning it is possible for a program to figure out where in the bytestream characters start) and can be used with normal string comparison functions for sorting and such. PHP encodes UTF-8 characters in up to four bytes, like this: UTF-8 encoding bytes bits representation 1 7 0bbbbbbb 2 11 110bbbbb 10bbbbbb 3 16 1110bbbb 10bbbbbb 10bbbbbb 4 21 11110bbb 10bbbbbb 10bbbbbb 10bbbbbb Each b represents a bit that can be used to store character data.</description>
        <signature>string utf8_encode (string $data)</signature>
        <docrelurl>utf8_encode</docrelurl>
      </item>
      <item name="utf8_decode">
        <description>This function decodes data, assumed to be UTF-8 encoded, to ISO-8859-1.</description>
        <signature>string utf8_decode (string $data)</signature>
        <docrelurl>utf8_decode</docrelurl>
      </item>
      <item name="xmlwriter_open_uri">
        <description>Creates a new XMLWriter using uri for the output.</description>
        <signature>bool XMLWriter::openURI (string $uri)</signature>
        <docrelurl>xmlwriter_open_uri</docrelurl>
      </item>
      <item name="xmlwriter_open_memory">
        <description>Creates a new XMLWriter using memory for string output.</description>
        <signature>bool XMLWriter::openMemory (void)</signature>
        <docrelurl>xmlwriter_open_memory</docrelurl>
      </item>
      <item name="xmlwriter_set_indent">
        <description>Toggles indentation on or off.</description>
        <signature>bool XMLWriter::setIndent (bool $indent)</signature>
        <docrelurl>xmlwriter_set_indent</docrelurl>
      </item>
      <item name="xmlwriter_set_indent_string">
        <description>Sets the string which will be used to indent each element/attribute of the resulting xml.</description>
        <signature>bool XMLWriter::setIndentString (string $indentString)</signature>
        <docrelurl>xmlwriter_set_indent_string</docrelurl>
      </item>
      <item name="xmlwriter_start_comment">
        <description>Starts a comment.</description>
        <signature>bool XMLWriter::startComment (void)</signature>
        <docrelurl>xmlwriter_start_comment</docrelurl>
      </item>
      <item name="xmlwriter_end_comment">
        <description>Ends the current comment.</description>
        <signature>bool XMLWriter::endComment (void)</signature>
        <docrelurl>xmlwriter_end_comment</docrelurl>
      </item>
      <item name="xmlwriter_start_attribute">
        <description>Starts an attribute.</description>
        <signature>bool XMLWriter::startAttribute (string $name)</signature>
        <docrelurl>xmlwriter_start_attribute</docrelurl>
      </item>
      <item name="xmlwriter_end_attribute">
        <description>Ends the current attribute.</description>
        <signature>bool XMLWriter::endAttribute (void)</signature>
        <docrelurl>xmlwriter_end_attribute</docrelurl>
      </item>
      <item name="xmlwriter_write_attribute">
        <description>Writes a full attribute.</description>
        <signature>bool XMLWriter::writeAttribute (string $name , string $value)</signature>
        <docrelurl>xmlwriter_write_attribute</docrelurl>
      </item>
      <item name="xmlwriter_start_attribute_ns">
        <description>Starts a namespaced attribute.</description>
        <signature>bool XMLWriter::startAttributeNS (string $prefix , string $name , string $uri)</signature>
        <docrelurl>xmlwriter_start_attribute_ns</docrelurl>
      </item>
      <item name="xmlwriter_write_attribute_ns">
        <description>Writes a full namespaced attribute.</description>
        <signature>bool XMLWriter::writeAttributeNS (string $prefix , string $name , string $uri , string $content)</signature>
        <docrelurl>xmlwriter_write_attribute_ns</docrelurl>
      </item>
      <item name="xmlwriter_start_element">
        <description>Starts an element.</description>
        <signature>bool XMLWriter::startElement (string $name)</signature>
        <docrelurl>xmlwriter_start_element</docrelurl>
      </item>
      <item name="xmlwriter_end_element">
        <description>Ends the current element.</description>
        <signature>bool XMLWriter::endElement (void)</signature>
        <docrelurl>xmlwriter_end_element</docrelurl>
      </item>
      <item name="xmlwriter_full_end_element">
        <description>End the current xml element. Writes an end tag even if the element is empty.</description>
        <signature>bool XMLWriter::fullEndElement (void)</signature>
        <docrelurl>xmlwriter_full_end_element</docrelurl>
      </item>
      <item name="xmlwriter_start_element_ns">
        <description>Starts a namespaced element.</description>
        <signature>bool XMLWriter::startElementNS (string $prefix , string $name , string $uri)</signature>
        <docrelurl>xmlwriter_start_element_ns</docrelurl>
      </item>
      <item name="xmlwriter_write_element">
        <description>Writes a full element tag.</description>
        <signature>bool XMLWriter::writeElement (string $name [, string $content ])</signature>
        <docrelurl>xmlwriter_write_element</docrelurl>
      </item>
      <item name="xmlwriter_write_element_ns">
        <description>Writes a full namespaced element tag.</description>
        <signature>bool XMLWriter::writeElementNS (string $prefix , string $name , string $uri [, string $content ])</signature>
        <docrelurl>xmlwriter_write_element_ns</docrelurl>
      </item>
      <item name="xmlwriter_start_pi">
        <description>Starts a processing instruction tag.</description>
        <signature>bool XMLWriter::startPI (string $target)</signature>
        <docrelurl>xmlwriter_start_pi</docrelurl>
      </item>
      <item name="xmlwriter_end_pi">
        <description>Ends the current processing instruction.</description>
        <signature>bool XMLWriter::endPI (void)</signature>
        <docrelurl>xmlwriter_end_pi</docrelurl>
      </item>
      <item name="xmlwriter_write_pi">
        <description>Writes a processing instruction.</description>
        <signature>bool XMLWriter::writePI (string $target , string $content)</signature>
        <docrelurl>xmlwriter_write_pi</docrelurl>
      </item>
      <item name="xmlwriter_start_cdata">
        <description>Starts a CDATA.</description>
        <signature>bool XMLWriter::startCData (void)</signature>
        <docrelurl>xmlwriter_start_cdata</docrelurl>
      </item>
      <item name="xmlwriter_end_cdata">
        <description>Ends the current CDATA section.</description>
        <signature>bool XMLWriter::endCData (void)</signature>
        <docrelurl>xmlwriter_end_cdata</docrelurl>
      </item>
      <item name="xmlwriter_write_cdata">
        <description>Writes a full CDATA.</description>
        <signature>bool XMLWriter::writeCData (string $content)</signature>
        <docrelurl>xmlwriter_write_cdata</docrelurl>
      </item>
      <item name="xmlwriter_text">
        <description>Writes a text.</description>
        <signature>bool XMLWriter::text (string $content)</signature>
        <docrelurl>xmlwriter_text</docrelurl>
      </item>
      <item name="xmlwriter_write_raw">
        <description>Writes a raw xml text.</description>
        <signature>bool XMLWriter::writeRaw (string $content)</signature>
        <docrelurl>xmlwriter_write_raw</docrelurl>
      </item>
      <item name="xmlwriter_start_document">
        <description>Starts a document.</description>
        <signature>bool XMLWriter::startDocument ([ string $version [, string $encoding [, string $standalone ]]])</signature>
        <docrelurl>xmlwriter_start_document</docrelurl>
      </item>
      <item name="xmlwriter_end_document">
        <description>Ends the current document.</description>
        <signature>bool XMLWriter::endDocument (void)</signature>
        <docrelurl>xmlwriter_end_document</docrelurl>
      </item>
      <item name="xmlwriter_write_comment">
        <description>Writes a full comment.</description>
        <signature>bool XMLWriter::writeComment (string $content)</signature>
        <docrelurl>xmlwriter_write_comment</docrelurl>
      </item>
      <item name="xmlwriter_start_dtd">
        <description>Starts a DTD.</description>
        <signature>bool XMLWriter::startDTD (string $qualifiedName [, string $publicId [, string $systemId ]])</signature>
        <docrelurl>xmlwriter_start_dtd</docrelurl>
      </item>
      <item name="xmlwriter_end_dtd">
        <description>Ends the DTD of the document.</description>
        <signature>bool XMLWriter::endDTD (void)</signature>
        <docrelurl>xmlwriter_end_dtd</docrelurl>
      </item>
      <item name="xmlwriter_write_dtd">
        <description>Writes a full DTD.</description>
        <signature>bool XMLWriter::writeDTD (string $name [, string $publicId [, string $systemId [, string $subset ]]])</signature>
        <docrelurl>xmlwriter_write_dtd</docrelurl>
      </item>
      <item name="xmlwriter_start_dtd_element">
        <description>Starts a DTD element.</description>
        <signature>bool XMLWriter::startDTDElement (string $qualifiedName)</signature>
        <docrelurl>xmlwriter_start_dtd_element</docrelurl>
      </item>
      <item name="xmlwriter_end_dtd_element">
        <description>Ends the current DTD element.</description>
        <signature>bool XMLWriter::endDTDElement (void)</signature>
        <docrelurl>xmlwriter_end_dtd_element</docrelurl>
      </item>
      <item name="xmlwriter_write_dtd_element">
        <description>Writes a full DTD element.</description>
        <signature>bool XMLWriter::writeDTDElement (string $name , string $content)</signature>
        <docrelurl>xmlwriter_write_dtd_element</docrelurl>
      </item>
      <item name="xmlwriter_start_dtd_attlist">
        <description>Starts a DTD attribute list.</description>
        <signature>bool XMLWriter::startDTDAttlist (string $name)</signature>
        <docrelurl>xmlwriter_start_dtd_attlist</docrelurl>
      </item>
      <item name="xmlwriter_end_dtd_attlist">
        <description>Ends the current DTD attribute list.</description>
        <signature>bool XMLWriter::endDTDAttlist (void)</signature>
        <docrelurl>xmlwriter_end_dtd_attlist</docrelurl>
      </item>
      <item name="xmlwriter_write_dtd_attlist">
        <description>Writes a DTD attribute list.</description>
        <signature>bool XMLWriter::writeDTDAttlist (string $name , string $content)</signature>
        <docrelurl>xmlwriter_write_dtd_attlist</docrelurl>
      </item>
      <item name="xmlwriter_start_dtd_entity">
        <description>Starts a DTD entity.</description>
        <signature>bool XMLWriter::startDTDEntity (string $name , bool $isparam)</signature>
        <docrelurl>xmlwriter_start_dtd_entity</docrelurl>
      </item>
      <item name="xmlwriter_end_dtd_entity">
        <description>Ends the current DTD entity.</description>
        <signature>bool XMLWriter::endDTDEntity (void)</signature>
        <docrelurl>xmlwriter_end_dtd_entity</docrelurl>
      </item>
      <item name="xmlwriter_write_dtd_entity">
        <description>Writes a full DTD entity.</description>
        <signature>bool XMLWriter::writeDTDEntity (string $name , string $content , bool $pe , string $pubid , string $sysid , string $ndataid)</signature>
        <docrelurl>xmlwriter_write_dtd_entity</docrelurl>
      </item>
      <item name="xmlwriter_output_memory">
        <description>Returns the current buffer.</description>
        <signature>string XMLWriter::outputMemory ([ bool $flush = true ])</signature>
        <docrelurl>xmlwriter_output_memory</docrelurl>
      </item>
      <item name="xmlwriter_flush">
        <description>Flushes the current buffer.</description>
        <signature>mixed XMLWriter::flush ([ bool $empty = true ])</signature>
        <docrelurl>xmlwriter_flush</docrelurl>
      </item>
      <item name="mysql_connect">
        <description>Opens or reuses a connection to a MySQL server.</description>
        <signature>resource mysql_connect ([ string $server = ini_get(&quot;mysql.default_host&quot;) [, string $username = ini_get(&quot;mysql.default_user&quot;) [, string $password = ini_get(&quot;mysql.default_password&quot;) [, bool $new_link = false [, int $client_flags = 0 ]]]]])</signature>
        <docrelurl>mysql_connect</docrelurl>
      </item>
      <item name="mysql_pconnect">
        <description>Establishes a persistent connection to a MySQL server.</description>
        <signature>resource mysql_pconnect ([ string $server = ini_get(&quot;mysql.default_host&quot;) [, string $username = ini_get(&quot;mysql.default_user&quot;) [, string $password = ini_get(&quot;mysql.default_password&quot;) [, int $client_flags ]]]])</signature>
        <docrelurl>mysql_pconnect</docrelurl>
      </item>
      <item name="mysql_close">
        <description>mysql_close() closes the non-persistent connection to the MySQL server that&apos;s associated with the specified link identifier. If link_identifier isn&apos;t specified, the last opened link is used.</description>
        <signature>bool mysql_close ([ resource $link_identifier ])</signature>
        <docrelurl>mysql_close</docrelurl>
      </item>
      <item name="mysql_select_db">
        <description>Sets the current active database on the server that&apos;s associated with the specified link identifier. Every subsequent call to mysql_query() will be made on the active database.</description>
        <signature>bool mysql_select_db (string $database_name [, resource $link_identifier ])</signature>
        <docrelurl>mysql_select_db</docrelurl>
      </item>
      <item name="mysql_query">
        <description>mysql_query() sends a unique query (multiple queries are not supported) to the currently active database on the server that&apos;s associated with the specified link_identifier.</description>
        <signature>resource mysql_query (string $query [, resource $link_identifier ])</signature>
        <docrelurl>mysql_query</docrelurl>
      </item>
      <item name="mysql_unbuffered_query">
        <description>mysql_unbuffered_query() sends the SQL query query to MySQL without automatically fetching and buffering the result rows as mysql_query() does. This saves a considerable amount of memory with SQL queries that produce large result sets, and you can start working on the result set immediately after the first row has been retrieved as you don&apos;t have to wait until the complete SQL query has been performed. To use mysql_unbuffered_query() while multiple database connections are open, you must specify the optional parameter link_identifier to identify which connection you want to use.</description>
        <signature>resource mysql_unbuffered_query (string $query [, resource $link_identifier ])</signature>
        <docrelurl>mysql_unbuffered_query</docrelurl>
      </item>
      <item name="mysql_db_query">
        <description>mysql_db_query() selects a database, and executes a query on it.</description>
        <signature>resource mysql_db_query (string $database , string $query [, resource $link_identifier ])</signature>
        <docrelurl>mysql_db_query</docrelurl>
      </item>
      <item name="mysql_list_dbs">
        <description>Returns a result pointer containing the databases available from the current mysql daemon.</description>
        <signature>resource mysql_list_dbs ([ resource $link_identifier ])</signature>
        <docrelurl>mysql_list_dbs</docrelurl>
      </item>
      <item name="mysql_list_tables">
        <description>Retrieves a list of table names from a MySQL database.</description>
        <signature>resource mysql_list_tables (string $database [, resource $link_identifier ])</signature>
        <docrelurl>mysql_list_tables</docrelurl>
      </item>
      <item name="mysql_list_fields">
        <description>Retrieves information about the given table name.</description>
        <signature>resource mysql_list_fields (string $database_name , string $table_name [, resource $link_identifier ])</signature>
        <docrelurl>mysql_list_fields</docrelurl>
      </item>
      <item name="mysql_list_processes">
        <description>Retrieves the current MySQL server threads.</description>
        <signature>resource mysql_list_processes ([ resource $link_identifier ])</signature>
        <docrelurl>mysql_list_processes</docrelurl>
      </item>
      <item name="mysql_error">
        <description>Returns the error text from the last MySQL function. Errors coming back from the MySQL database backend no longer issue warnings. Instead, use mysql_error() to retrieve the error text. Note that this function only returns the error text from the most recently executed MySQL function (not including mysql_error() and mysql_errno()), so if you want to use it, make sure you check the value before calling another MySQL function.</description>
        <signature>string mysql_error ([ resource $link_identifier ])</signature>
        <docrelurl>mysql_error</docrelurl>
      </item>
      <item name="mysql_errno">
        <description>Returns the error number from the last MySQL function.</description>
        <signature>int mysql_errno ([ resource $link_identifier ])</signature>
        <docrelurl>mysql_errno</docrelurl>
      </item>
      <item name="mysql_affected_rows">
        <description>Get the number of affected rows by the last INSERT, UPDATE, REPLACE or DELETE query associated with link_identifier.</description>
        <signature>int mysql_affected_rows ([ resource $link_identifier ])</signature>
        <docrelurl>mysql_affected_rows</docrelurl>
      </item>
      <item name="mysql_insert_id">
        <description>Retrieves the ID generated for an AUTO_INCREMENT column by the previous query (usually INSERT).</description>
        <signature>int mysql_insert_id ([ resource $link_identifier ])</signature>
        <docrelurl>mysql_insert_id</docrelurl>
      </item>
      <item name="mysql_result">
        <description>Retrieves the contents of one cell from a MySQL result set.</description>
        <signature>string mysql_result (resource $result , int $row [, mixed $field = 0 ])</signature>
        <docrelurl>mysql_result</docrelurl>
      </item>
      <item name="mysql_num_rows">
        <description>Retrieves the number of rows from a result set. This command is only valid for statements like SELECT or SHOW that return an actual result set. To retrieve the number of rows affected by a INSERT, UPDATE, REPLACE or DELETE query, use mysql_affected_rows().</description>
        <signature>int mysql_num_rows (resource $result)</signature>
        <docrelurl>mysql_num_rows</docrelurl>
      </item>
      <item name="mysql_num_fields">
        <description>Retrieves the number of fields from a query.</description>
        <signature>int mysql_num_fields (resource $result)</signature>
        <docrelurl>mysql_num_fields</docrelurl>
      </item>
      <item name="mysql_fetch_row">
        <description>Returns a numerical array that corresponds to the fetched row and moves the internal data pointer ahead.</description>
        <signature>array mysql_fetch_row (resource $result)</signature>
        <docrelurl>mysql_fetch_row</docrelurl>
      </item>
      <item name="mysql_fetch_array">
        <description>Returns an array that corresponds to the fetched row and moves the internal data pointer ahead.</description>
        <signature>array mysql_fetch_array (resource $result [, int $result_type = MYSQL_BOTH ])</signature>
        <docrelurl>mysql_fetch_array</docrelurl>
      </item>
      <item name="mysql_fetch_assoc">
        <description>Returns an associative array that corresponds to the fetched row and moves the internal data pointer ahead. mysql_fetch_assoc() is equivalent to calling mysql_fetch_array() with MYSQL_ASSOC for the optional second parameter. It only returns an associative array.</description>
        <signature>array mysql_fetch_assoc (resource $result)</signature>
        <docrelurl>mysql_fetch_assoc</docrelurl>
      </item>
      <item name="mysql_fetch_object">
        <description>Returns an object with properties that correspond to the fetched row and moves the internal data pointer ahead.</description>
        <signature>object mysql_fetch_object (resource $result [, string $class_name [, array $params ]])</signature>
        <docrelurl>mysql_fetch_object</docrelurl>
      </item>
      <item name="mysql_data_seek">
        <description>mysql_data_seek() moves the internal row pointer of the MySQL result associated with the specified result identifier to point to the specified row number. The next call to a MySQL fetch function, such as mysql_fetch_assoc(), would return that row.</description>
        <signature>bool mysql_data_seek (resource $result , int $row_number)</signature>
        <docrelurl>mysql_data_seek</docrelurl>
      </item>
      <item name="mysql_fetch_lengths">
        <description>Returns an array that corresponds to the lengths of each field in the last row fetched by MySQL.</description>
        <signature>array mysql_fetch_lengths (resource $result)</signature>
        <docrelurl>mysql_fetch_lengths</docrelurl>
      </item>
      <item name="mysql_fetch_field">
        <description>Returns an object containing field information. This function can be used to obtain information about fields in the provided query result.</description>
        <signature>object mysql_fetch_field (resource $result [, int $field_offset = 0 ])</signature>
        <docrelurl>mysql_fetch_field</docrelurl>
      </item>
      <item name="mysql_field_seek">
        <description>Seeks to the specified field offset. If the next call to mysql_fetch_field() doesn&apos;t include a field offset, the field offset specified in mysql_field_seek() will be returned.</description>
        <signature>bool mysql_field_seek (resource $result , int $field_offset)</signature>
        <docrelurl>mysql_field_seek</docrelurl>
      </item>
      <item name="mysql_free_result">
        <description>mysql_free_result() will free all memory associated with the result identifier result.</description>
        <signature>bool mysql_free_result (resource $result)</signature>
        <docrelurl>mysql_free_result</docrelurl>
      </item>
      <item name="mysql_field_name">
        <description>mysql_field_name() returns the name of the specified field index.</description>
        <signature>string mysql_field_name (resource $result , int $field_offset)</signature>
        <docrelurl>mysql_field_name</docrelurl>
      </item>
      <item name="mysql_field_table">
        <description>Returns the name of the table that the specified field is in.</description>
        <signature>string mysql_field_table (resource $result , int $field_offset)</signature>
        <docrelurl>mysql_field_table</docrelurl>
      </item>
      <item name="mysql_field_len">
        <description>mysql_field_len() returns the length of the specified field.</description>
        <signature>int mysql_field_len (resource $result , int $field_offset)</signature>
        <docrelurl>mysql_field_len</docrelurl>
      </item>
      <item name="mysql_field_type">
        <description>mysql_field_type() is similar to the mysql_field_name() function. The arguments are identical, but the field type is returned instead.</description>
        <signature>string mysql_field_type (resource $result , int $field_offset)</signature>
        <docrelurl>mysql_field_type</docrelurl>
      </item>
      <item name="mysql_field_flags">
        <description>mysql_field_flags() returns the field flags of the specified field. The flags are reported as a single word per flag separated by a single space, so that you can split the returned value using explode().</description>
        <signature>string mysql_field_flags (resource $result , int $field_offset)</signature>
        <docrelurl>mysql_field_flags</docrelurl>
      </item>
      <item name="mysql_escape_string">
        <description>This function will escape the unescaped_string, so that it is safe to place it in a mysql_query(). This function is deprecated.</description>
        <signature>string mysql_escape_string (string $unescaped_string)</signature>
        <docrelurl>mysql_escape_string</docrelurl>
      </item>
      <item name="mysql_real_escape_string">
        <description>Escapes special characters in the unescaped_string, taking into account the current character set of the connection so that it is safe to place it in a mysql_query(). If binary data is to be inserted, this function must be used.</description>
        <signature>string mysql_real_escape_string (string $unescaped_string [, resource $link_identifier ])</signature>
        <docrelurl>mysql_real_escape_string</docrelurl>
      </item>
      <item name="mysql_stat">
        <description>mysql_stat() returns the current server status.</description>
        <signature>string mysql_stat ([ resource $link_identifier ])</signature>
        <docrelurl>mysql_stat</docrelurl>
      </item>
      <item name="mysql_thread_id">
        <description>Retrieves the current thread ID. If the connection is lost, and a reconnect with mysql_ping() is executed, the thread ID will change. This means only retrieve the thread ID when needed.</description>
        <signature>int mysql_thread_id ([ resource $link_identifier ])</signature>
        <docrelurl>mysql_thread_id</docrelurl>
      </item>
      <item name="mysql_client_encoding">
        <description>Retrieves the character_set variable from MySQL.</description>
        <signature>string mysql_client_encoding ([ resource $link_identifier ])</signature>
        <docrelurl>mysql_client_encoding</docrelurl>
      </item>
      <item name="mysql_ping">
        <description>Checks whether or not the connection to the server is working. If it has gone down, an automatic reconnection is attempted. This function can be used by scripts that remain idle for a long while, to check whether or not the server has closed the connection and reconnect if necessary.</description>
        <signature>bool mysql_ping ([ resource $link_identifier ])</signature>
        <docrelurl>mysql_ping</docrelurl>
      </item>
      <item name="mysql_get_client_info">
        <description>mysql_get_client_info() returns a string that represents the client library version.</description>
        <signature>string mysql_get_client_info (void)</signature>
        <docrelurl>mysql_get_client_info</docrelurl>
      </item>
      <item name="mysql_get_host_info">
        <description>Describes the type of connection in use for the connection, including the server host name.</description>
        <signature>string mysql_get_host_info ([ resource $link_identifier ])</signature>
        <docrelurl>mysql_get_host_info</docrelurl>
      </item>
      <item name="mysql_get_proto_info">
        <description>Retrieves the MySQL protocol.</description>
        <signature>int mysql_get_proto_info ([ resource $link_identifier ])</signature>
        <docrelurl>mysql_get_proto_info</docrelurl>
      </item>
      <item name="mysql_get_server_info">
        <description>Retrieves the MySQL server version.</description>
        <signature>string mysql_get_server_info ([ resource $link_identifier ])</signature>
        <docrelurl>mysql_get_server_info</docrelurl>
      </item>
      <item name="mysql_info">
        <description>Returns detailed information about the last query.</description>
        <signature>string mysql_info ([ resource $link_identifier ])</signature>
        <docrelurl>mysql_info</docrelurl>
      </item>
      <item name="mysql_set_charset">
        <description>Sets the default character set for the current connection.</description>
        <signature>bool mysql_set_charset (string $charset [, resource $link_identifier ])</signature>
        <docrelurl>mysql_set_charset</docrelurl>
      </item>
      <item name="mysql_db_name">
        <description>Retrieve the database name from a call to mysql_list_dbs().</description>
        <signature>string mysql_db_name (resource $result , int $row [, mixed $field ])</signature>
        <docrelurl>mysql_db_name</docrelurl>
      </item>
      <item name="mysql_tablename">
        <description>Retrieves the table name from a result.</description>
        <signature>string mysql_tablename (resource $result , int $i)</signature>
        <docrelurl>mysql_tablename</docrelurl>
      </item>
      <item name="mysqli_connect">
        <description>Alias of mysqli::__construct mysqli_client_encoding mysqli_disable_reads_from_master Aliases and deprecated Mysqli Functions PHP Manual mysqli_connect (PHP 5)</description>
        <signature>Alias of mysqli::__construct mysqli_client_encoding</signature>
        <docrelurl>mysqli_connect</docrelurl>
      </item>
      <item name="mysqli_execute">
        <description>Alias for mysqli_stmt_execute mysqli_escape_string mysqli_fetch Aliases and deprecated Mysqli Functions PHP Manual mysqli_execute (PHP 5)</description>
        <signature>Alias for mysqli_stmt_execute mysqli_escape_string</signature>
        <docrelurl>mysqli_execute</docrelurl>
      </item>
      <item name="mysqli_report">
        <description>mysqli_report() is a powerful function to improve your queries and code during development and testing phase. Depending on the flags it reports errors from mysqli function calls or queries which don&apos;t use an index (or use a bad index).</description>
        <signature>bool mysqli_report (int $flags)</signature>
        <docrelurl>mysqli_report</docrelurl>
      </item>
      <item name="mysqli_bind_param">
        <description>Alias for mysqli_stmt_bind_param Aliases and deprecated Mysqli Functions mysqli_bind_result Aliases and deprecated Mysqli Functions PHP Manual mysqli_bind_param (PHP 5)</description>
        <signature>Alias for mysqli_stmt_bind_param Aliases and deprecated Mysqli Functions</signature>
        <docrelurl>mysqli_bind_param</docrelurl>
      </item>
      <item name="mysqli_bind_result">
        <description>Alias for mysqli_stmt_bind_result mysqli_bind_param mysqli_client_encoding Aliases and deprecated Mysqli Functions PHP Manual mysqli_bind_result (PHP 5)</description>
        <signature>Alias for mysqli_stmt_bind_result mysqli_bind_param</signature>
        <docrelurl>mysqli_bind_result</docrelurl>
      </item>
      <item name="mysqli_client_encoding">
        <description>Alias of mysqli_character_set_name mysqli_bind_result mysqli_connect Aliases and deprecated Mysqli Functions PHP Manual mysqli_client_encoding (PHP 5)</description>
        <signature>Alias of mysqli_character_set_name mysqli_bind_result</signature>
        <docrelurl>mysqli_client_encoding</docrelurl>
      </item>
      <item name="mysqli_escape_string">
        <description>Alias of mysqli_real_escape_string mysqli_enable_rpl_parse mysqli_execute Aliases and deprecated Mysqli Functions PHP Manual mysqli_escape_string (PHP 5)</description>
        <signature>Alias of mysqli_real_escape_string mysqli_enable_rpl_parse</signature>
        <docrelurl>mysqli_escape_string</docrelurl>
      </item>
      <item name="mysqli_fetch">
        <description>Alias for mysqli_stmt_fetch mysqli_execute mysqli_get_cache_stats Aliases and deprecated Mysqli Functions PHP Manual mysqli_fetch (PHP 5)</description>
        <signature>Alias for mysqli_stmt_fetch mysqli_execute</signature>
        <docrelurl>mysqli_fetch</docrelurl>
      </item>
      <item name="mysqli_param_count">
        <description>Alias for mysqli_stmt_param_count mysqli_master_query mysqli_report Aliases and deprecated Mysqli Functions PHP Manual mysqli_param_count (PHP 5)</description>
        <signature>Alias for mysqli_stmt_param_count mysqli_master_query</signature>
        <docrelurl>mysqli_param_count</docrelurl>
      </item>
      <item name="mysqli_get_metadata">
        <description>Alias for mysqli_stmt_result_metadata mysqli_get_cache_stats mysqli_master_query Aliases and deprecated Mysqli Functions PHP Manual mysqli_get_metadata (PHP 5)</description>
        <signature>Alias for mysqli_stmt_result_metadata mysqli_get_cache_stats</signature>
        <docrelurl>mysqli_get_metadata</docrelurl>
      </item>
      <item name="mysqli_send_long_data">
        <description>Alias for mysqli_stmt_send_long_data mysqli_rpl_query_type mysqli_send_query Aliases and deprecated Mysqli Functions PHP Manual mysqli_send_long_data (PHP 5)</description>
        <signature>Alias for mysqli_stmt_send_long_data mysqli_rpl_query_type</signature>
        <docrelurl>mysqli_send_long_data</docrelurl>
      </item>
      <item name="mysqli_set_opt">
        <description>Alias of mysqli_options mysqli_send_query mysqli_slave_query Aliases and deprecated Mysqli Functions PHP Manual mysqli_set_opt (PHP 5)</description>
        <signature>Alias of mysqli_options mysqli_send_query</signature>
        <docrelurl>mysqli_set_opt</docrelurl>
      </item>
      <item name="mb_convert_case">
        <description>Performs case folding on a string, converted in the way specified by mode.</description>
        <signature>string mb_convert_case (string $str , int $mode = MB_CASE_UPPER [, string $encoding = mb_internal_encoding() ])</signature>
        <docrelurl>mb_convert_case</docrelurl>
      </item>
      <item name="mb_strtoupper">
        <description>Returns str with all alphabetic characters converted to uppercase.</description>
        <signature>string mb_strtoupper (string $str [, string $encoding = mb_internal_encoding() ])</signature>
        <docrelurl>mb_strtoupper</docrelurl>
      </item>
      <item name="mb_strtolower">
        <description>Returns str with all alphabetic characters converted to lowercase.</description>
        <signature>string mb_strtolower (string $str [, string $encoding = mb_internal_encoding() ])</signature>
        <docrelurl>mb_strtolower</docrelurl>
      </item>
      <item name="mb_language">
        <description>Set/Get the current language.</description>
        <signature>mixed mb_language ([ string $language ])</signature>
        <docrelurl>mb_language</docrelurl>
      </item>
      <item name="mb_internal_encoding">
        <description>Set/Get the internal character encoding</description>
        <signature>mixed mb_internal_encoding ([ string $encoding = mb_internal_encoding() ])</signature>
        <docrelurl>mb_internal_encoding</docrelurl>
      </item>
      <item name="mb_http_input">
        <description>mixed mb_http_input ([ string $type = &quot;&quot; ]) Detects the HTTP input character encoding.</description>
        <signature>mixed mb_http_input ([ string $type = &quot;&quot; ])</signature>
        <docrelurl>mb_http_input</docrelurl>
      </item>
      <item name="mb_http_output">
        <description>Set/Get the HTTP output character encoding. Output after this function is converted to encoding.</description>
        <signature>mixed mb_http_output ([ string $encoding ])</signature>
        <docrelurl>mb_http_output</docrelurl>
      </item>
      <item name="mb_detect_order">
        <description>Sets the automatic character encoding detection order to encoding_list.</description>
        <signature>mixed mb_detect_order ([ mixed $encoding_list ])</signature>
        <docrelurl>mb_detect_order</docrelurl>
      </item>
      <item name="mb_substitute_character">
        <description>Specifies a substitution character when input character encoding is invalid or character code does not exist in output character encoding. Invalid characters may be substituted NULL (no output), string or integer value (Unicode character code value).</description>
        <signature>mixed mb_substitute_character ([ mixed $substrchar ])</signature>
        <docrelurl>mb_substitute_character</docrelurl>
      </item>
      <item name="mb_parse_str">
        <description>Parses GET/POST/COOKIE data and sets global variables. Since PHP does not provide raw POST/COOKIE data, it can only be used for GET data for now. It parses URL encoded data, detects encoding, converts coding to internal encoding and set values to the result array or global variables.</description>
        <signature>bool mb_parse_str (string $encoded_string [, array &amp;$result ])</signature>
        <docrelurl>mb_parse_str</docrelurl>
      </item>
      <item name="mb_output_handler">
        <description>mb_output_handler() is ob_start() callback function. mb_output_handler() converts characters in the output buffer from internal character encoding to HTTP output character encoding.</description>
        <signature>string mb_output_handler (string $contents , int $status)</signature>
        <docrelurl>mb_output_handler</docrelurl>
      </item>
      <item name="mb_preferred_mime_name">
        <description>Get a MIME charset string for a specific encoding.</description>
        <signature>string mb_preferred_mime_name (string $encoding)</signature>
        <docrelurl>mb_preferred_mime_name</docrelurl>
      </item>
      <item name="mb_strlen">
        <description>Gets the length of a string.</description>
        <signature>int mb_strlen (string $str [, string $encoding ])</signature>
        <docrelurl>mb_strlen</docrelurl>
      </item>
      <item name="mb_strpos">
        <description>Finds position of the first occurrence of a string in a string.</description>
        <signature>int mb_strpos (string $haystack , string $needle [, int $offset = 0 [, string $encoding ]])</signature>
        <docrelurl>mb_strpos</docrelurl>
      </item>
      <item name="mb_strrpos">
        <description>Performs a multibyte safe strrpos() operation based on the number of characters. needle position is counted from the beginning of haystack. First character&apos;s position is 0. Second character position is 1.</description>
        <signature>int mb_strrpos (string $haystack , string $needle [, int $offset = 0 [, string $encoding ]])</signature>
        <docrelurl>mb_strrpos</docrelurl>
      </item>
      <item name="mb_stripos">
        <description>mb_stripos() returns the numeric position of the first occurrence of needle in the haystack string. Unlike mb_strpos(), mb_stripos() is case-insensitive. If needle is not found, it returns FALSE.</description>
        <signature>int mb_stripos (string $haystack , string $needle [, int $offset [, string $encoding ]])</signature>
        <docrelurl>mb_stripos</docrelurl>
      </item>
      <item name="mb_strripos">
        <description>mb_strripos() performs multi-byte safe strripos() operation based on number of characters. needle position is counted from the beginning of haystack. First character&apos;s position is 0. Second character position is 1. Unlike mb_strrpos(), mb_strripos() is case-insensitive.</description>
        <signature>int mb_strripos (string $haystack , string $needle [, int $offset = 0 [, string $encoding ]])</signature>
        <docrelurl>mb_strripos</docrelurl>
      </item>
      <item name="mb_strstr">
        <description>mb_strstr() finds the first occurrence of needle in haystack and returns the portion of haystack. If needle is not found, it returns FALSE.</description>
        <signature>string mb_strstr (string $haystack , string $needle [, bool $part = false [, string $encoding ]])</signature>
        <docrelurl>mb_strstr</docrelurl>
      </item>
      <item name="mb_strrchr">
        <description>mb_strrchr() finds the last occurrence of needle in haystack and returns the portion of haystack. If needle is not found, it returns FALSE.</description>
        <signature>string mb_strrchr (string $haystack , string $needle [, bool $part = false [, string $encoding ]])</signature>
        <docrelurl>mb_strrchr</docrelurl>
      </item>
      <item name="mb_stristr">
        <description>mb_stristr() finds the first occurrence of needle in haystack and returns the portion of haystack. Unlike mb_strstr(), mb_stristr() is case-insensitive. If needle is not found, it returns FALSE.</description>
        <signature>string mb_stristr (string $haystack , string $needle [, bool $part = false [, string $encoding ]])</signature>
        <docrelurl>mb_stristr</docrelurl>
      </item>
      <item name="mb_strrichr">
        <description>mb_strrichr() finds the last occurrence of needle in haystack and returns the portion of haystack. Unlike mb_strrchr(), mb_strrichr() is case-insensitive. If needle is not found, it returns FALSE.</description>
        <signature>string mb_strrichr (string $haystack , string $needle [, bool $part = false [, string $encoding ]])</signature>
        <docrelurl>mb_strrichr</docrelurl>
      </item>
      <item name="mb_substr_count">
        <description>Counts the number of times the needle substring occurs in the haystack string.</description>
        <signature>int mb_substr_count (string $haystack , string $needle [, string $encoding ])</signature>
        <docrelurl>mb_substr_count</docrelurl>
      </item>
      <item name="mb_substr">
        <description>Performs a multi-byte safe substr() operation based on number of characters. Position is counted from the beginning of str. First character&apos;s position is 0. Second character position is 1, and so on.</description>
        <signature>string mb_substr (string $str , int $start [, int $length [, string $encoding ]])</signature>
        <docrelurl>mb_substr</docrelurl>
      </item>
      <item name="mb_strcut">
        <description>mb_strcut() performs equivalent operation as mb_substr() with different method. If start position is multi-byte character&apos;s second byte or larger, it starts from first byte of multi-byte character.</description>
        <signature>string mb_strcut (string $str , int $start [, int $length [, string $encoding ]])</signature>
        <docrelurl>mb_strcut</docrelurl>
      </item>
      <item name="mb_strwidth">
        <description>Returns the width of string str.</description>
        <signature>int mb_strwidth (string $str [, string $encoding ])</signature>
        <docrelurl>mb_strwidth</docrelurl>
      </item>
      <item name="mb_strimwidth">
        <description>Truncates string str to specified width.</description>
        <signature>string mb_strimwidth (string $str , int $start , int $width [, string $trimmarker [, string $encoding ]])</signature>
        <docrelurl>mb_strimwidth</docrelurl>
      </item>
      <item name="mb_convert_encoding">
        <description>Converts the character encoding of string str to to_encoding from optionally from_encoding.</description>
        <signature>string mb_convert_encoding (string $str , string $to_encoding [, mixed $from_encoding ])</signature>
        <docrelurl>mb_convert_encoding</docrelurl>
      </item>
      <item name="mb_detect_encoding">
        <description>Detects character encoding in string str.</description>
        <signature>string mb_detect_encoding (string $str [, mixed $encoding_list = mb_detect_order() [, bool $strict = false ]])</signature>
        <docrelurl>mb_detect_encoding</docrelurl>
      </item>
      <item name="mb_list_encodings">
        <description>Returns an array containing all supported encodings.</description>
        <signature>array mb_list_encodings (void)</signature>
        <docrelurl>mb_list_encodings</docrelurl>
      </item>
      <item name="mb_encoding_aliases">
        <description>Returns an array of aliases for a known encoding type.</description>
        <signature>array mb_encoding_aliases (string $encoding)</signature>
        <docrelurl>mb_encoding_aliases</docrelurl>
      </item>
      <item name="mb_convert_kana">
        <description>Performs a &quot;han-kaku&quot; - &quot;zen-kaku&quot; conversion for string str. This function is only useful for Japanese.</description>
        <signature>string mb_convert_kana (string $str [, string $option = &quot;KV&quot; [, string $encoding ]])</signature>
        <docrelurl>mb_convert_kana</docrelurl>
      </item>
      <item name="mb_encode_mimeheader">
        <description>Encodes a given string str by the MIME header encoding scheme.</description>
        <signature>string mb_encode_mimeheader (string $str [, string $charset [, string $transfer_encoding [, string $linefeed = &quot;\r\n&quot; [, int $indent = 0 ]]]])</signature>
        <docrelurl>mb_encode_mimeheader</docrelurl>
      </item>
      <item name="mb_decode_mimeheader">
        <description>Decodes encoded-word string str in MIME header.</description>
        <signature>string mb_decode_mimeheader (string $str)</signature>
        <docrelurl>mb_decode_mimeheader</docrelurl>
      </item>
      <item name="mb_convert_variables">
        <description>Converts character encoding of variables vars in encoding from_encoding to encoding to_encoding.</description>
        <signature>string mb_convert_variables (string $to_encoding , mixed $from_encoding , mixed &amp;$vars [, mixed &amp;$... ])</signature>
        <docrelurl>mb_convert_variables</docrelurl>
      </item>
      <item name="mb_encode_numericentity">
        <description>Converts specified character codes in string str from HTML numeric character reference to character code.</description>
        <signature>string mb_encode_numericentity (string $str , array $convmap , string $encoding)</signature>
        <docrelurl>mb_encode_numericentity</docrelurl>
      </item>
      <item name="mb_decode_numericentity">
        <description>Convert numeric string reference of string str in a specified block to character.</description>
        <signature>string mb_decode_numericentity (string $str , array $convmap , string $encoding)</signature>
        <docrelurl>mb_decode_numericentity</docrelurl>
      </item>
      <item name="mb_send_mail">
        <description>Sends email. Headers and messages are converted and encoded according to the mb_language() setting. It&apos;s a wrapper function for mail(), so see also mail() for details.</description>
        <signature>bool mb_send_mail (string $to , string $subject , string $message [, string $additional_headers = NULL [, string $additional_parameter = NULL ]])</signature>
        <docrelurl>mb_send_mail</docrelurl>
      </item>
      <item name="mb_get_info">
        <description>mixed mb_get_info ([ string $type = &quot;all&quot; ]) mb_get_info() returns the internal setting parameters of mbstring.</description>
        <signature>mixed mb_get_info ([ string $type = &quot;all&quot; ])</signature>
        <docrelurl>mb_get_info</docrelurl>
      </item>
      <item name="mb_check_encoding">
        <description>Checks if the specified byte stream is valid for the specified encoding. It is useful to prevent so-called &quot;Invalid Encoding Attack&quot;.</description>
        <signature>bool mb_check_encoding ([ string $var = NULL [, string $encoding = mb_internal_encoding() ]])</signature>
        <docrelurl>mb_check_encoding</docrelurl>
      </item>
      <item name="mb_regex_encoding">
        <description>Returns the current encoding for a multibyte regex as a string.</description>
        <signature>mixed mb_regex_encoding ([ string $encoding ])</signature>
        <docrelurl>mb_regex_encoding</docrelurl>
      </item>
      <item name="mb_regex_set_options">
        <description>string mb_regex_set_options ([ string $options = &quot;msr&quot; ]) Sets the default options described by options for multibyte regex functions.</description>
        <signature>string mb_regex_set_options ([ string $options = &quot;msr&quot; ])</signature>
        <docrelurl>mb_regex_set_options</docrelurl>
      </item>
      <item name="mb_ereg">
        <description>int mb_ereg ( string $pattern , string $string [, array $regs ]) Executes the regular expression match with multibyte support.</description>
        <signature>int mb_ereg (string $pattern , string $string [, array $regs ])</signature>
        <docrelurl>mb_ereg</docrelurl>
      </item>
      <item name="mb_eregi">
        <description>int mb_eregi ( string $pattern , string $string [, array $regs ]) Executes the case insensitive regular expression match with multibyte support.</description>
        <signature>int mb_eregi (string $pattern , string $string [, array $regs ])</signature>
        <docrelurl>mb_eregi</docrelurl>
      </item>
      <item name="mb_ereg_replace">
        <description>string mb_ereg_replace ( string $pattern , string $replacement , string $string [, string $option = &quot;msr&quot; ]) Scans string for matches to pattern, then replaces the matched text with replacement</description>
        <signature>string mb_ereg_replace (string $pattern , string $replacement , string $string [, string $option = &quot;msr&quot; ])</signature>
        <docrelurl>mb_ereg_replace</docrelurl>
      </item>
      <item name="mb_eregi_replace">
        <description>string mb_eregi_replace ( string $pattern , string $replace , string $string [, string $option = &quot;msri&quot; ]) Scans string for matches to pattern, then replaces the matched text with replacement.</description>
        <signature>string mb_eregi_replace (string $pattern , string $replace , string $string [, string $option = &quot;msri&quot; ])</signature>
        <docrelurl>mb_eregi_replace</docrelurl>
      </item>
      <item name="mb_split">
        <description>array mb_split ( string $pattern , string $string [, int $limit = -1 ]) Split a multibyte string using regular expression pattern and returns the result as an array.</description>
        <signature>array mb_split (string $pattern , string $string [, int $limit = -1 ])</signature>
        <docrelurl>mb_split</docrelurl>
      </item>
      <item name="mb_ereg_match">
        <description>A regular expression match for a multibyte string</description>
        <signature>bool mb_ereg_match (string $pattern , string $string [, string $option = &quot;msr&quot; ])</signature>
        <docrelurl>mb_ereg_match</docrelurl>
      </item>
      <item name="mb_ereg_search">
        <description>Performs a multibyte regular expression match for a predefined multibyte string.</description>
        <signature>bool mb_ereg_search ([ string $pattern [, string $option = &quot;ms&quot; ]])</signature>
        <docrelurl>mb_ereg_search</docrelurl>
      </item>
      <item name="mb_ereg_search_pos">
        <description>Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string</description>
        <signature>array mb_ereg_search_pos ([ string $pattern [, string $option = &quot;ms&quot; ]])</signature>
        <docrelurl>mb_ereg_search_pos</docrelurl>
      </item>
      <item name="mb_ereg_search_regs">
        <description>Returns the matched part of a multibyte regular expression.</description>
        <signature>array mb_ereg_search_regs ([ string $pattern [, string $option = &quot;ms&quot; ]])</signature>
        <docrelurl>mb_ereg_search_regs</docrelurl>
      </item>
      <item name="mb_ereg_search_init">
        <description>mb_ereg_search_init() sets string and pattern for a multibyte regular expression. These values are used for mb_ereg_search(), mb_ereg_search_pos(), and mb_ereg_search_regs().</description>
        <signature>bool mb_ereg_search_init (string $string [, string $pattern [, string $option = &quot;msr&quot; ]])</signature>
        <docrelurl>mb_ereg_search_init</docrelurl>
      </item>
      <item name="mb_ereg_search_getregs">
        <description>array mb_ereg_search_getregs ( void) Retrieve the result from the last multibyte regular expression match</description>
        <signature>array mb_ereg_search_getregs (void)</signature>
        <docrelurl>mb_ereg_search_getregs</docrelurl>
      </item>
      <item name="mb_ereg_search_getpos">
        <description>int mb_ereg_search_getpos ( void) Returns the start point for the next regular expression match.</description>
        <signature>int mb_ereg_search_getpos (void)</signature>
        <docrelurl>mb_ereg_search_getpos</docrelurl>
      </item>
      <item name="mb_ereg_search_setpos">
        <description>bool mb_ereg_search_setpos ( int $position) mb_ereg_search_setpos() sets the starting point of a match for mb_ereg_search().</description>
        <signature>bool mb_ereg_search_setpos (int $position)</signature>
        <docrelurl>mb_ereg_search_setpos</docrelurl>
      </item>
      <item name="gd_info">
        <description>Gets information about the version and capabilities of the installed GD library.</description>
        <signature>array gd_info (void)</signature>
        <docrelurl>gd_info</docrelurl>
      </item>
      <item name="imagearc">
        <description>imagearc() draws an arc of circle centered at the given coordinates.</description>
        <signature>bool imagearc (resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color)</signature>
        <docrelurl>imagearc</docrelurl>
      </item>
      <item name="imageellipse">
        <description>Draws an ellipse centered at the specified coordinates.</description>
        <signature>bool imageellipse (resource $image , int $cx , int $cy , int $width , int $height , int $color)</signature>
        <docrelurl>imageellipse</docrelurl>
      </item>
      <item name="imagechar">
        <description>imagechar() draws the first character of c in the image identified by image with its upper-left at x,y (top left is 0, 0) with the color color.</description>
        <signature>bool imagechar (resource $image , int $font , int $x , int $y , string $c , int $color)</signature>
        <docrelurl>imagechar</docrelurl>
      </item>
      <item name="imagecharup">
        <description>Draws the character c vertically at the specified coordinate on the given image.</description>
        <signature>bool imagecharup (resource $image , int $font , int $x , int $y , string $c , int $color)</signature>
        <docrelurl>imagecharup</docrelurl>
      </item>
      <item name="imagecolorat">
        <description>Returns the index of the color of the pixel at the specified location in the image specified by image.</description>
        <signature>int imagecolorat (resource $image , int $x , int $y)</signature>
        <docrelurl>imagecolorat</docrelurl>
      </item>
      <item name="imagecolorallocate">
        <description>Returns a color identifier representing the color composed of the given RGB components.</description>
        <signature>int imagecolorallocate (resource $image , int $red , int $green , int $blue)</signature>
        <docrelurl>imagecolorallocate</docrelurl>
      </item>
      <item name="imagepalettecopy">
        <description>imagepalettecopy() copies the palette from the source image to the destination image.</description>
        <signature>void imagepalettecopy (resource $destination , resource $source)</signature>
        <docrelurl>imagepalettecopy</docrelurl>
      </item>
      <item name="imagecreatefromstring">
        <description>imagecreatefromstring() returns an image identifier representing the image obtained from the given data. These types will be automatically detected if your build of PHP supports them: JPEG, PNG, GIF, WBMP, and GD2.</description>
        <signature>resource imagecreatefromstring (string $data)</signature>
        <docrelurl>imagecreatefromstring</docrelurl>
      </item>
      <item name="imagecolorclosest">
        <description>Returns the index of the color in the palette of the image which is &quot;closest&quot; to the specified RGB value.</description>
        <signature>int imagecolorclosest (resource $image , int $red , int $green , int $blue)</signature>
        <docrelurl>imagecolorclosest</docrelurl>
      </item>
      <item name="imagecolorclosesthwb">
        <description>Get the index of the color which has the hue, white and blackness nearest the given color.</description>
        <signature>int imagecolorclosesthwb (resource $image , int $red , int $green , int $blue)</signature>
        <docrelurl>imagecolorclosesthwb</docrelurl>
      </item>
      <item name="imagecolordeallocate">
        <description>De-allocates a color previously allocated with imagecolorallocate() or imagecolorallocatealpha().</description>
        <signature>bool imagecolordeallocate (resource $image , int $color)</signature>
        <docrelurl>imagecolordeallocate</docrelurl>
      </item>
      <item name="imagecolorresolve">
        <description>This function is guaranteed to return a color index for a requested color, either the exact color or the closest possible alternative.</description>
        <signature>int imagecolorresolve (resource $image , int $red , int $green , int $blue)</signature>
        <docrelurl>imagecolorresolve</docrelurl>
      </item>
      <item name="imagecolorexact">
        <description>Returns the index of the specified color in the palette of the image.</description>
        <signature>int imagecolorexact (resource $image , int $red , int $green , int $blue)</signature>
        <docrelurl>imagecolorexact</docrelurl>
      </item>
      <item name="imagecolorset">
        <description>This sets the specified index in the palette to the specified color. This is useful for creating flood-fill-like effects in palleted images without the overhead of performing the actual flood-fill.</description>
        <signature>void imagecolorset (resource $image , int $index , int $red , int $green , int $blue [, int $alpha = 0 ])</signature>
        <docrelurl>imagecolorset</docrelurl>
      </item>
      <item name="imagecolortransparent">
        <description>Sets the transparent color in the given image.</description>
        <signature>int imagecolortransparent (resource $image [, int $color ])</signature>
        <docrelurl>imagecolortransparent</docrelurl>
      </item>
      <item name="imagecolorstotal">
        <description>Returns the number of colors in an image palette.</description>
        <signature>int imagecolorstotal (resource $image)</signature>
        <docrelurl>imagecolorstotal</docrelurl>
      </item>
      <item name="imagecolorsforindex">
        <description>Gets the color for a specified index.</description>
        <signature>array imagecolorsforindex (resource $image , int $index)</signature>
        <docrelurl>imagecolorsforindex</docrelurl>
      </item>
      <item name="imagecopy">
        <description>Copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y.</description>
        <signature>bool imagecopy (resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h)</signature>
        <docrelurl>imagecopy</docrelurl>
      </item>
      <item name="imagecopymerge">
        <description>Copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y.</description>
        <signature>bool imagecopymerge (resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct)</signature>
        <docrelurl>imagecopymerge</docrelurl>
      </item>
      <item name="imagecopymergegray">
        <description>imagecopymergegray() copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y.</description>
        <signature>bool imagecopymergegray (resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct)</signature>
        <docrelurl>imagecopymergegray</docrelurl>
      </item>
      <item name="imagecopyresized">
        <description>imagecopyresized() copies a rectangular portion of one image to another image. dst_image is the destination image, src_image is the source image identifier.</description>
        <signature>bool imagecopyresized (resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h)</signature>
        <docrelurl>imagecopyresized</docrelurl>
      </item>
      <item name="imagecreate">
        <description>imagecreate() returns an image identifier representing a blank image of specified size.</description>
        <signature>resource imagecreate (int $width , int $height)</signature>
        <docrelurl>imagecreate</docrelurl>
      </item>
      <item name="imagecreatetruecolor">
        <description>imagecreatetruecolor() returns an image identifier representing a black image of the specified size.</description>
        <signature>resource imagecreatetruecolor (int $width , int $height)</signature>
        <docrelurl>imagecreatetruecolor</docrelurl>
      </item>
      <item name="imageistruecolor">
        <description>imageistruecolor() finds whether the image image is a truecolor image.</description>
        <signature>bool imageistruecolor (resource $image)</signature>
        <docrelurl>imageistruecolor</docrelurl>
      </item>
      <item name="imagetruecolortopalette">
        <description>imagetruecolortopalette() converts a truecolor image to a palette image. The code for this function was originally drawn from the Independent JPEG Group library code, which is excellent. The code has been modified to preserve as much alpha channel information as possible in the resulting palette, in addition to preserving colors as well as possible. This does not work as well as might be hoped. It is usually best to simply produce a truecolor output image instead, which guarantees the highest output quality.</description>
        <signature>bool imagetruecolortopalette (resource $image , bool $dither , int $ncolors)</signature>
        <docrelurl>imagetruecolortopalette</docrelurl>
      </item>
      <item name="imagesetthickness">
        <description>imagesetthickness() sets the thickness of the lines drawn when drawing rectangles, polygons, ellipses etc. etc. to thickness pixels.</description>
        <signature>bool imagesetthickness (resource $image , int $thickness)</signature>
        <docrelurl>imagesetthickness</docrelurl>
      </item>
      <item name="imagefilledarc">
        <description>Draws a partial arc centered at the specified coordinate in the given image.</description>
        <signature>bool imagefilledarc (resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color , int $style)</signature>
        <docrelurl>imagefilledarc</docrelurl>
      </item>
      <item name="imagefilledellipse">
        <description>Draws an ellipse centered at the specified coordinate on the given image.</description>
        <signature>bool imagefilledellipse (resource $image , int $cx , int $cy , int $width , int $height , int $color)</signature>
        <docrelurl>imagefilledellipse</docrelurl>
      </item>
      <item name="imagealphablending">
        <description>imagealphablending() allows for two different modes of drawing on truecolor images. In blending mode, the alpha channel component of the color supplied to all drawing function, such as imagesetpixel() determines how much of the underlying color should be allowed to shine through. As a result, gd automatically blends the existing color at that point with the drawing color, and stores the result in the image. The resulting pixel is opaque. In non-blending mode, the drawing color is copied literally with its alpha channel information, replacing the destination pixel. Blending mode is not available when drawing on palette images.</description>
        <signature>bool imagealphablending (resource $image , bool $blendmode)</signature>
        <docrelurl>imagealphablending</docrelurl>
      </item>
      <item name="imagesavealpha">
        <description>imagesavealpha() sets the flag to attempt to save full alpha channel information (as opposed to single-color transparency) when saving PNG images.</description>
        <signature>bool imagesavealpha (resource $image , bool $saveflag)</signature>
        <docrelurl>imagesavealpha</docrelurl>
      </item>
      <item name="imagecolorallocatealpha">
        <description>imagecolorallocatealpha() behaves identically to imagecolorallocate() with the addition of the transparency parameter alpha.</description>
        <signature>int imagecolorallocatealpha (resource $image , int $red , int $green , int $blue , int $alpha)</signature>
        <docrelurl>imagecolorallocatealpha</docrelurl>
      </item>
      <item name="imagecolorresolvealpha">
        <description>This function is guaranteed to return a color index for a requested color, either the exact color or the closest possible alternative.</description>
        <signature>int imagecolorresolvealpha (resource $image , int $red , int $green , int $blue , int $alpha)</signature>
        <docrelurl>imagecolorresolvealpha</docrelurl>
      </item>
      <item name="imagecolorclosestalpha">
        <description>Returns the index of the color in the palette of the image which is &quot;closest&quot; to the specified RGB value and alpha level.</description>
        <signature>int imagecolorclosestalpha (resource $image , int $red , int $green , int $blue , int $alpha)</signature>
        <docrelurl>imagecolorclosestalpha</docrelurl>
      </item>
      <item name="imagecolorexactalpha">
        <description>Returns the index of the specified color+alpha in the palette of the image.</description>
        <signature>int imagecolorexactalpha (resource $image , int $red , int $green , int $blue , int $alpha)</signature>
        <docrelurl>imagecolorexactalpha</docrelurl>
      </item>
      <item name="imagecopyresampled">
        <description>imagecopyresampled() copies a rectangular portion of one image to another image, smoothly interpolating pixel values so that, in particular, reducing the size of an image still retains a great deal of clarity.</description>
        <signature>bool imagecopyresampled (resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h)</signature>
        <docrelurl>imagecopyresampled</docrelurl>
      </item>
      <item name="imagegrabwindow">
        <description>Grabs a window or its client area using a windows handle (HWND property in COM instance)</description>
        <signature>resource imagegrabwindow (int $window_handle [, int $client_area = 0 ])</signature>
        <docrelurl>imagegrabwindow</docrelurl>
      </item>
      <item name="imagegrabscreen">
        <description>Grabs a screenshot of the whole screen.</description>
        <signature>resource imagegrabscreen (void)</signature>
        <docrelurl>imagegrabscreen</docrelurl>
      </item>
      <item name="imagerotate">
        <description>Rotates the image image using the given angle in degrees.</description>
        <signature>resource imagerotate (resource $image , float $angle , int $bgd_color [, int $ignore_transparent = 0 ])</signature>
        <docrelurl>imagerotate</docrelurl>
      </item>
      <item name="imageantialias">
        <description>Activate the fast drawing antialiased methods for lines and wired polygons. It does not support alpha components. It works using a direct blend operation. It works only with truecolor images.</description>
        <signature>bool imageantialias (resource $image , bool $enabled)</signature>
        <docrelurl>imageantialias</docrelurl>
      </item>
      <item name="imagesettile">
        <description>imagesettile() sets the tile image to be used by all region filling functions (such as imagefill() and imagefilledpolygon()) when filling with the special color IMG_COLOR_TILED.</description>
        <signature>bool imagesettile (resource $image , resource $tile)</signature>
        <docrelurl>imagesettile</docrelurl>
      </item>
      <item name="imagesetbrush">
        <description>imagesetbrush() sets the brush image to be used by all line drawing functions (such as imageline() and imagepolygon()) when drawing with the special colors IMG_COLOR_BRUSHED or IMG_COLOR_STYLEDBRUSHED.</description>
        <signature>bool imagesetbrush (resource $image , resource $brush)</signature>
        <docrelurl>imagesetbrush</docrelurl>
      </item>
      <item name="imagesetstyle">
        <description>imagesetstyle() sets the style to be used by all line drawing functions (such as imageline() and imagepolygon()) when drawing with the special color IMG_COLOR_STYLED or lines of images with color IMG_COLOR_STYLEDBRUSHED.</description>
        <signature>bool imagesetstyle (resource $image , array $style)</signature>
        <docrelurl>imagesetstyle</docrelurl>
      </item>
      <item name="imagecreatefrompng">
        <description>imagecreatefrompng() returns an image identifier representing the image obtained from the given filename.</description>
        <signature>resource imagecreatefrompng (string $filename)</signature>
        <docrelurl>imagecreatefrompng</docrelurl>
      </item>
      <item name="imagecreatefromgif">
        <description>imagecreatefromgif() returns an image identifier representing the image obtained from the given filename.</description>
        <signature>resource imagecreatefromgif (string $filename)</signature>
        <docrelurl>imagecreatefromgif</docrelurl>
      </item>
      <item name="imagecreatefromjpeg">
        <description>imagecreatefromjpeg() returns an image identifier representing the image obtained from the given filename.</description>
        <signature>resource imagecreatefromjpeg (string $filename)</signature>
        <docrelurl>imagecreatefromjpeg</docrelurl>
      </item>
      <item name="imagecreatefromwbmp">
        <description>imagecreatefromwbmp() returns an image identifier representing the image obtained from the given filename.</description>
        <signature>resource imagecreatefromwbmp (string $filename)</signature>
        <docrelurl>imagecreatefromwbmp</docrelurl>
      </item>
      <item name="imagecreatefromxbm">
        <description>imagecreatefromxbm() returns an image identifier representing the image obtained from the given filename.</description>
        <signature>resource imagecreatefromxbm (string $filename)</signature>
        <docrelurl>imagecreatefromxbm</docrelurl>
      </item>
      <item name="imagecreatefromgd">
        <description>Create a new image from GD file or URL.</description>
        <signature>resource imagecreatefromgd (string $filename)</signature>
        <docrelurl>imagecreatefromgd</docrelurl>
      </item>
      <item name="imagecreatefromgd2">
        <description>Create a new image from GD2 file or URL.</description>
        <signature>resource imagecreatefromgd2 (string $filename)</signature>
        <docrelurl>imagecreatefromgd2</docrelurl>
      </item>
      <item name="imagecreatefromgd2part">
        <description>Create a new image from a given part of GD2 file or URL.</description>
        <signature>resource imagecreatefromgd2part (string $filename , int $srcX , int $srcY , int $width , int $height)</signature>
        <docrelurl>imagecreatefromgd2part</docrelurl>
      </item>
      <item name="imagepng">
        <description>Outputs or saves a PNG image from the given image.</description>
        <signature>bool imagepng (resource $image [, string $filename [, int $quality [, int $filters ]]])</signature>
        <docrelurl>imagepng</docrelurl>
      </item>
      <item name="imagegif">
        <description>imagegif() creates the GIF file in filename from the image image. The image argument is the return from the imagecreate() or imagecreatefrom* function.</description>
        <signature>bool imagegif (resource $image [, string $filename ])</signature>
        <docrelurl>imagegif</docrelurl>
      </item>
      <item name="imagejpeg">
        <description>imagejpeg() creates a JPEG file from the given image.</description>
        <signature>bool imagejpeg (resource $image [, string $filename [, int $quality ]])</signature>
        <docrelurl>imagejpeg</docrelurl>
      </item>
      <item name="imagewbmp">
        <description>imagewbmp() outputs or save a WBMP version of the given image.</description>
        <signature>bool imagewbmp (resource $image [, string $filename [, int $foreground ]])</signature>
        <docrelurl>imagewbmp</docrelurl>
      </item>
      <item name="imagegd">
        <description>Outputs a GD image to the given filename.</description>
        <signature>bool imagegd (resource $image [, string $filename ])</signature>
        <docrelurl>imagegd</docrelurl>
      </item>
      <item name="imagegd2">
        <description>Outputs a GD2 image to the given filename.</description>
        <signature>bool imagegd2 (resource $image [, string $filename [, int $chunk_size [, int $type = IMG_GD2_RAW ]]])</signature>
        <docrelurl>imagegd2</docrelurl>
      </item>
      <item name="imagedestroy">
        <description>imagedestroy() frees any memory associated with image image.</description>
        <signature>bool imagedestroy (resource $image)</signature>
        <docrelurl>imagedestroy</docrelurl>
      </item>
      <item name="imagegammacorrect">
        <description>Applies gamma correction to the given gd image given an input and an output gamma.</description>
        <signature>bool imagegammacorrect (resource $image , float $inputgamma , float $outputgamma)</signature>
        <docrelurl>imagegammacorrect</docrelurl>
      </item>
      <item name="imagefill">
        <description>Performs a flood fill starting at the given coordinate (top left is 0, 0) with the given color in the image.</description>
        <signature>bool imagefill (resource $image , int $x , int $y , int $color)</signature>
        <docrelurl>imagefill</docrelurl>
      </item>
      <item name="imagefilledpolygon">
        <description>imagefilledpolygon() creates a filled polygon in the given image.</description>
        <signature>bool imagefilledpolygon (resource $image , array $points , int $num_points , int $color)</signature>
        <docrelurl>imagefilledpolygon</docrelurl>
      </item>
      <item name="imagefilledrectangle">
        <description>Creates a rectangle filled with color in the given image starting at point 1 and ending at point 2. 0, 0 is the top left corner of the image.</description>
        <signature>bool imagefilledrectangle (resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color)</signature>
        <docrelurl>imagefilledrectangle</docrelurl>
      </item>
      <item name="imagefilltoborder">
        <description>imagefilltoborder() performs a flood fill whose border color is defined by border. The starting point for the fill is x, y (top left is 0, 0) and the region is filled with color color.</description>
        <signature>bool imagefilltoborder (resource $image , int $x , int $y , int $border , int $color)</signature>
        <docrelurl>imagefilltoborder</docrelurl>
      </item>
      <item name="imagefontwidth">
        <description>Returns the pixel width of a character in font.</description>
        <signature>int imagefontwidth (int $font)</signature>
        <docrelurl>imagefontwidth</docrelurl>
      </item>
      <item name="imagefontheight">
        <description>Returns the pixel height of a character in the specified font.</description>
        <signature>int imagefontheight (int $font)</signature>
        <docrelurl>imagefontheight</docrelurl>
      </item>
      <item name="imageinterlace">
        <description>imageinterlace() turns the interlace bit on or off.</description>
        <signature>int imageinterlace (resource $image [, int $interlace = 0 ])</signature>
        <docrelurl>imageinterlace</docrelurl>
      </item>
      <item name="imageline">
        <description>Draws a line between the two given points.</description>
        <signature>bool imageline (resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color)</signature>
        <docrelurl>imageline</docrelurl>
      </item>
      <item name="imageloadfont">
        <description>imageloadfont() loads a user-defined bitmap and returns its identifier.</description>
        <signature>int imageloadfont (string $file)</signature>
        <docrelurl>imageloadfont</docrelurl>
      </item>
      <item name="imagepolygon">
        <description>imagepolygon() creates a polygon in the given image.</description>
        <signature>bool imagepolygon (resource $image , array $points , int $num_points , int $color)</signature>
        <docrelurl>imagepolygon</docrelurl>
      </item>
      <item name="imagerectangle">
        <description>imagerectangle() creates a rectangle starting at the specified coordinates.</description>
        <signature>bool imagerectangle (resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color)</signature>
        <docrelurl>imagerectangle</docrelurl>
      </item>
      <item name="imagesetpixel">
        <description>imagesetpixel() draws a pixel at the specified coordinate.</description>
        <signature>bool imagesetpixel (resource $image , int $x , int $y , int $color)</signature>
        <docrelurl>imagesetpixel</docrelurl>
      </item>
      <item name="imagestring">
        <description>Draws a string at the given coordinates.</description>
        <signature>bool imagestring (resource $image , int $font , int $x , int $y , string $string , int $color)</signature>
        <docrelurl>imagestring</docrelurl>
      </item>
      <item name="imagestringup">
        <description>Draws a string vertically at the given coordinates.</description>
        <signature>bool imagestringup (resource $image , int $font , int $x , int $y , string $string , int $color)</signature>
        <docrelurl>imagestringup</docrelurl>
      </item>
      <item name="imagesx">
        <description>Returns the width of the given image resource.</description>
        <signature>int imagesx (resource $image)</signature>
        <docrelurl>imagesx</docrelurl>
      </item>
      <item name="imagesy">
        <description>Returns the height of the given image resource.</description>
        <signature>int imagesy (resource $image)</signature>
        <docrelurl>imagesy</docrelurl>
      </item>
      <item name="imagedashedline">
        <description>This function is deprecated. Use combination of imagesetstyle() and imageline() instead.</description>
        <signature>bool imagedashedline (resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color)</signature>
        <docrelurl>imagedashedline</docrelurl>
      </item>
      <item name="imagettfbbox">
        <description>This function calculates and returns the bounding box in pixels for a TrueType text.</description>
        <signature>array imagettfbbox (float $size , float $angle , string $fontfile , string $text)</signature>
        <docrelurl>imagettfbbox</docrelurl>
      </item>
      <item name="imagettftext">
        <description>Writes the given text into the image using TrueType fonts.</description>
        <signature>array imagettftext (resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text)</signature>
        <docrelurl>imagettftext</docrelurl>
      </item>
      <item name="imageftbbox">
        <description>This function calculates and returns the bounding box in pixels for a FreeType text.</description>
        <signature>array imageftbbox (float $size , float $angle , string $fontfile , string $text [, array $extrainfo ])</signature>
        <docrelurl>imageftbbox</docrelurl>
      </item>
      <item name="imagefttext">
        <description>array imagefttext ( resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text [, array $extrainfo ]) Parameters imageAn image resource, returned by one of the image creation functions,such as imagecreatetruecolor().</description>
        <signature>array imagefttext (resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text [, array $extrainfo ])</signature>
        <docrelurl>imagefttext</docrelurl>
      </item>
      <item name="imagetypes">
        <description>Returns the image types supported by the current PHP installation.</description>
        <signature>int imagetypes (void)</signature>
        <docrelurl>imagetypes</docrelurl>
      </item>
      <item name="jpeg2wbmp">
        <description>Converts a JPEG file into a WBMP file.</description>
        <signature>bool jpeg2wbmp (string $jpegname , string $wbmpname , int $dest_height , int $dest_width , int $threshold)</signature>
        <docrelurl>jpeg2wbmp</docrelurl>
      </item>
      <item name="png2wbmp">
        <description>Converts a PNG file into a WBMP file.</description>
        <signature>bool png2wbmp (string $pngname , string $wbmpname , int $dest_height , int $dest_width , int $threshold)</signature>
        <docrelurl>png2wbmp</docrelurl>
      </item>
      <item name="image2wbmp">
        <description>image2wbmp() outputs or save a WBMP version of the given image.</description>
        <signature>bool image2wbmp (resource $image [, string $filename [, int $threshold ]])</signature>
        <docrelurl>image2wbmp</docrelurl>
      </item>
      <item name="imagelayereffect">
        <description>Set the alpha blending flag to use the bundled libgd layering effects.</description>
        <signature>bool imagelayereffect (resource $image , int $effect)</signature>
        <docrelurl>imagelayereffect</docrelurl>
      </item>
      <item name="imagexbm">
        <description>Outputs or save an XBM version of the given image.</description>
        <signature>bool imagexbm (resource $image , string $filename [, int $foreground ])</signature>
        <docrelurl>imagexbm</docrelurl>
      </item>
      <item name="imagecolormatch">
        <description>Makes the colors of the palette version of an image more closely match the true color version.</description>
        <signature>bool imagecolormatch (resource $image1 , resource $image2)</signature>
        <docrelurl>imagecolormatch</docrelurl>
      </item>
      <item name="imagefilter">
        <description>imagefilter() applies the given filter filtertype on the image.</description>
        <signature>bool imagefilter (resource $image , int $filtertype [, int $arg1 [, int $arg2 [, int $arg3 [, int $arg4 ]]]])</signature>
        <docrelurl>imagefilter</docrelurl>
      </item>
      <item name="imageconvolution">
        <description>Applies a convolution matrix on the image, using the given coefficient and offset.</description>
        <signature>bool imageconvolution (resource $image , array $matrix , float $div , float $offset)</signature>
        <docrelurl>imageconvolution</docrelurl>
      </item>
      <item name="textdomain">
        <description>This function sets the domain to search within when calls are made to gettext(), usually the named after an application.</description>
        <signature>string textdomain (string $text_domain)</signature>
        <docrelurl>textdomain</docrelurl>
      </item>
      <item name="gettext">
        <description>Looks up a message in the current domain.</description>
        <signature>string gettext (string $message)</signature>
        <docrelurl>gettext</docrelurl>
      </item>
      <item name="dgettext">
        <description>The dgettext() function allows you to override the current domain for a single message lookup.</description>
        <signature>string dgettext (string $domain , string $message)</signature>
        <docrelurl>dgettext</docrelurl>
      </item>
      <item name="dcgettext">
        <description>This function allows you to override the current domain for a single message lookup.</description>
        <signature>string dcgettext (string $domain , string $message , int $category)</signature>
        <docrelurl>dcgettext</docrelurl>
      </item>
      <item name="bindtextdomain">
        <description>The bindtextdomain() function sets the path for a domain.</description>
        <signature>string bindtextdomain (string $domain , string $directory)</signature>
        <docrelurl>bindtextdomain</docrelurl>
      </item>
      <item name="ngettext">
        <description>The plural version of gettext(). Some languages have more than one form for plural messages dependent on the count.</description>
        <signature>string ngettext (string $msgid1 , string $msgid2 , int $n)</signature>
        <docrelurl>ngettext</docrelurl>
      </item>
      <item name="dngettext">
        <description>The dngettext() function allows you to override the current domain for a single plural message lookup.</description>
        <signature>string dngettext (string $domain , string $msgid1 , string $msgid2 , int $n)</signature>
        <docrelurl>dngettext</docrelurl>
      </item>
      <item name="dcngettext">
        <description>This function allows you to override the current domain for a single plural message lookup.</description>
        <signature>string dcngettext (string $domain , string $msgid1 , string $msgid2 , int $n , int $category)</signature>
        <docrelurl>dcngettext</docrelurl>
      </item>
      <item name="bind_textdomain_codeset">
        <description>With bind_textdomain_codeset(), you can set in which encoding will be messages from domain returned by gettext() and similar functions.</description>
        <signature>string bind_textdomain_codeset (string $domain , string $codeset)</signature>
        <docrelurl>bind_textdomain_codeset</docrelurl>
      </item>
      <item name="curl_init">
        <description>Initializes a new session and return a cURL handle for use with the curl_setopt(), curl_exec(), and curl_close() functions.</description>
        <signature>resource curl_init ([ string $url = NULL ])</signature>
        <docrelurl>curl_init</docrelurl>
      </item>
      <item name="curl_copy_handle">
        <description>Copies a cURL handle keeping the same preferences.</description>
        <signature>resource curl_copy_handle (resource $ch)</signature>
        <docrelurl>curl_copy_handle</docrelurl>
      </item>
      <item name="curl_version">
        <description>Returns information about the cURL version.</description>
        <signature>array curl_version ([ int $age = CURLVERSION_NOW ])</signature>
        <docrelurl>curl_version</docrelurl>
      </item>
      <item name="curl_setopt">
        <description>Sets an option on the given cURL session handle.</description>
        <signature>bool curl_setopt (resource $ch , int $option , mixed $value)</signature>
        <docrelurl>curl_setopt</docrelurl>
      </item>
      <item name="curl_setopt_array">
        <description>Sets multiple options for a cURL session. This function is useful for setting a large amount of cURL options without repetitively calling curl_setopt().</description>
        <signature>bool curl_setopt_array (resource $ch , array $options)</signature>
        <docrelurl>curl_setopt_array</docrelurl>
      </item>
      <item name="curl_exec">
        <description>Execute the given cURL session.</description>
        <signature>mixed curl_exec (resource $ch)</signature>
        <docrelurl>curl_exec</docrelurl>
      </item>
      <item name="curl_getinfo">
        <description>Gets information about the last transfer.</description>
        <signature>mixed curl_getinfo (resource $ch [, int $opt = 0 ])</signature>
        <docrelurl>curl_getinfo</docrelurl>
      </item>
      <item name="curl_error">
        <description>Returns a clear text error message for the last cURL operation.</description>
        <signature>string curl_error (resource $ch)</signature>
        <docrelurl>curl_error</docrelurl>
      </item>
      <item name="curl_errno">
        <description>Returns the error number for the last cURL operation.</description>
        <signature>int curl_errno (resource $ch)</signature>
        <docrelurl>curl_errno</docrelurl>
      </item>
      <item name="curl_close">
        <description>Closes a cURL session and frees all resources. The cURL handle, ch, is also deleted.</description>
        <signature>void curl_close (resource $ch)</signature>
        <docrelurl>curl_close</docrelurl>
      </item>
      <item name="curl_multi_init">
        <description>Allows the processing of multiple cURL handles in parallel.</description>
        <signature>resource curl_multi_init (void)</signature>
        <docrelurl>curl_multi_init</docrelurl>
      </item>
      <item name="curl_multi_add_handle">
        <description>Adds the ch handle to the multi handle mh</description>
        <signature>int curl_multi_add_handle (resource $mh , resource $ch)</signature>
        <docrelurl>curl_multi_add_handle</docrelurl>
      </item>
      <item name="curl_multi_remove_handle">
        <description>Removes a given ch handle from the given mh handle. When the ch handle has been removed, it is again perfectly legal to run curl_exec() on this handle. Removing the ch handle while being used, will effectively halt the transfer in progress involving that handle.</description>
        <signature>int curl_multi_remove_handle (resource $mh , resource $ch)</signature>
        <docrelurl>curl_multi_remove_handle</docrelurl>
      </item>
      <item name="curl_multi_select">
        <description>Blocks until there is activity on any of the curl_multi connections.</description>
        <signature>int curl_multi_select (resource $mh [, float $timeout = 1.0 ])</signature>
        <docrelurl>curl_multi_select</docrelurl>
      </item>
      <item name="curl_multi_exec">
        <description>Processes each of the handles in the stack. This method can be called whether or not a handle needs to read or write data.</description>
        <signature>int curl_multi_exec (resource $mh , int &amp;$still_running)</signature>
        <docrelurl>curl_multi_exec</docrelurl>
      </item>
      <item name="curl_multi_getcontent">
        <description>If CURLOPT_RETURNTRANSFER is an option that is set for a specific handle, then this function will return the content of that cURL handle in the form of a string.</description>
        <signature>string curl_multi_getcontent (resource $ch)</signature>
        <docrelurl>curl_multi_getcontent</docrelurl>
      </item>
      <item name="curl_multi_info_read">
        <description>Ask the multi handle if there are any messages or information from the individual transfers. Messages may include information such as an error code from the transfer or just the fact that a transfer is completed.</description>
        <signature>array curl_multi_info_read (resource $mh [, int &amp;$msgs_in_queue = NULL ])</signature>
        <docrelurl>curl_multi_info_read</docrelurl>
      </item>
      <item name="curl_multi_close">
        <description>Closes a set of cURL handles.</description>
        <signature>void curl_multi_close (resource $mh)</signature>
        <docrelurl>curl_multi_close</docrelurl>
      </item>
      <item name="exif_read_data">
        <description>exif_read_data() reads the EXIF headers from a JPEG or TIFF image file. This way you can read meta data generated by digital cameras.</description>
        <signature>array exif_read_data (string $filename [, string $sections = NULL [, bool $arrays = false [, bool $thumbnail = false ]]])</signature>
        <docrelurl>exif_read_data</docrelurl>
      </item>
      <item name="read_exif_data">
        <description>Alias of exif_read_data exif_thumbnail GD Exif Functions PHP Manual read_exif_data (PHP 4 &gt;= 4.0.1, PHP 5)</description>
        <signature>Alias of exif_read_data exif_thumbnail</signature>
        <docrelurl>read_exif_data</docrelurl>
      </item>
      <item name="exif_tagname">
        <description>string exif_tagname ( int $index) Parameters index The Tag ID for which a Tag Name will be looked up.</description>
        <signature>string exif_tagname (int $index)</signature>
        <docrelurl>exif_tagname</docrelurl>
      </item>
      <item name="exif_thumbnail">
        <description>exif_thumbnail() reads the embedded thumbnail of a TIFF or JPEG image.</description>
        <signature>string exif_thumbnail (string $filename [, int &amp;$width [, int &amp;$height [, int &amp;$imagetype ]]])</signature>
        <docrelurl>exif_thumbnail</docrelurl>
      </item>
      <item name="exif_imagetype">
        <description>exif_imagetype() reads the first bytes of an image and checks its signature.</description>
        <signature>int exif_imagetype (string $filename)</signature>
        <docrelurl>exif_imagetype</docrelurl>
      </item>
      <item name="xmlrpc_encode">
        <description>string xmlrpc_encode ( mixed $value) WarningThis function isEXPERIMENTAL. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</description>
        <signature>string xmlrpc_encode (mixed $value)</signature>
        <docrelurl>xmlrpc_encode</docrelurl>
      </item>
      <item name="xmlrpc_decode">
        <description>mixed xmlrpc_decode ( string $xml [, string $encoding = &quot;iso-8859-1&quot; ]) WarningThis function isEXPERIMENTAL. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</description>
        <signature>mixed xmlrpc_decode (string $xml [, string $encoding = &quot;iso-8859-1&quot; ])</signature>
        <docrelurl>xmlrpc_decode</docrelurl>
      </item>
      <item name="xmlrpc_decode_request">
        <description>mixed xmlrpc_decode_request ( string $xml , string &amp;$method [, string $encoding ]) WarningThis function isEXPERIMENTAL. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</description>
        <signature>mixed xmlrpc_decode_request (string $xml , string &amp;$method [, string $encoding ])</signature>
        <docrelurl>xmlrpc_decode_request</docrelurl>
      </item>
      <item name="xmlrpc_encode_request">
        <description>string xmlrpc_encode_request ( string $method , mixed $params [, array $output_options ]) WarningThis function isEXPERIMENTAL. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</description>
        <signature>string xmlrpc_encode_request (string $method , mixed $params [, array $output_options ])</signature>
        <docrelurl>xmlrpc_encode_request</docrelurl>
      </item>
      <item name="xmlrpc_get_type">
        <description>string xmlrpc_get_type ( mixed $value) WarningThis function isEXPERIMENTAL. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</description>
        <signature>string xmlrpc_get_type (mixed $value)</signature>
        <docrelurl>xmlrpc_get_type</docrelurl>
      </item>
      <item name="xmlrpc_set_type">
        <description>Sets xmlrpc type, base64 or datetime, for a PHP string value.</description>
        <signature>bool xmlrpc_set_type (string &amp;$value , string $type)</signature>
        <docrelurl>xmlrpc_set_type</docrelurl>
      </item>
      <item name="xmlrpc_is_fault">
        <description>bool xmlrpc_is_fault ( array $arg) WarningThis function isEXPERIMENTAL. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</description>
        <signature>bool xmlrpc_is_fault (array $arg)</signature>
        <docrelurl>xmlrpc_is_fault</docrelurl>
      </item>
      <item name="xmlrpc_server_create">
        <description>resource xmlrpc_server_create ( void) WarningThis function isEXPERIMENTAL. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</description>
        <signature>resource xmlrpc_server_create (void)</signature>
        <docrelurl>xmlrpc_server_create</docrelurl>
      </item>
      <item name="xmlrpc_server_destroy">
        <description>int xmlrpc_server_destroy ( resource $server) WarningThis function isEXPERIMENTAL. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</description>
        <signature>int xmlrpc_server_destroy (resource $server)</signature>
        <docrelurl>xmlrpc_server_destroy</docrelurl>
      </item>
      <item name="xmlrpc_server_register_method">
        <description>bool xmlrpc_server_register_method ( resource $server , string $method_name , string $function) WarningThis function isEXPERIMENTAL. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</description>
        <signature>bool xmlrpc_server_register_method (resource $server , string $method_name , string $function)</signature>
        <docrelurl>xmlrpc_server_register_method</docrelurl>
      </item>
      <item name="xmlrpc_server_call_method">
        <description>string xmlrpc_server_call_method ( resource $server , string $xml , mixed $user_data [, array $output_options ]) WarningThis function isEXPERIMENTAL. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</description>
        <signature>string xmlrpc_server_call_method (resource $server , string $xml , mixed $user_data [, array $output_options ])</signature>
        <docrelurl>xmlrpc_server_call_method</docrelurl>
      </item>
      <item name="xmlrpc_parse_method_descriptions">
        <description>array xmlrpc_parse_method_descriptions ( string $xml) WarningThis function isEXPERIMENTAL. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</description>
        <signature>array xmlrpc_parse_method_descriptions (string $xml)</signature>
        <docrelurl>xmlrpc_parse_method_descriptions</docrelurl>
      </item>
      <item name="xmlrpc_server_add_introspection_data">
        <description>int xmlrpc_server_add_introspection_data ( resource $server , array $desc) WarningThis function isEXPERIMENTAL. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</description>
        <signature>int xmlrpc_server_add_introspection_data (resource $server , array $desc)</signature>
        <docrelurl>xmlrpc_server_add_introspection_data</docrelurl>
      </item>
      <item name="xmlrpc_server_register_introspection_callback">
        <description>bool xmlrpc_server_register_introspection_callback ( resource $server , string $function) WarningThis function isEXPERIMENTAL. The behaviour of this function, its name, andsurrounding documentation may change without notice in a future release of PHP.This function should be used at your own risk.</description>
        <signature>bool xmlrpc_server_register_introspection_callback (resource $server , string $function)</signature>
        <docrelurl>xmlrpc_server_register_introspection_callback</docrelurl>
      </item>
      <item name="openssl_pkey_free">
        <description>This function frees a private key created by openssl_pkey_new().</description>
        <signature>void openssl_pkey_free (resource $key)</signature>
        <docrelurl>openssl_pkey_free</docrelurl>
      </item>
      <item name="openssl_pkey_new">
        <description>openssl_pkey_new() generates a new private and public key pair. The public component of the key can be obtained using openssl_pkey_get_public().</description>
        <signature>resource openssl_pkey_new ([ array $configargs ])</signature>
        <docrelurl>openssl_pkey_new</docrelurl>
      </item>
      <item name="openssl_pkey_export">
        <description>openssl_pkey_export() exports key as a PEM encoded string and stores it into out (which is passed by reference).</description>
        <signature>bool openssl_pkey_export (mixed $key , string &amp;$out [, string $passphrase [, array $configargs ]])</signature>
        <docrelurl>openssl_pkey_export</docrelurl>
      </item>
      <item name="openssl_pkey_export_to_file">
        <description>openssl_pkey_export_to_file() saves an ascii-armoured (PEM encoded) rendition of key into the file named by outfilename.</description>
        <signature>bool openssl_pkey_export_to_file (mixed $key , string $outfilename [, string $passphrase [, array $configargs ]])</signature>
        <docrelurl>openssl_pkey_export_to_file</docrelurl>
      </item>
      <item name="openssl_pkey_get_private">
        <description>openssl_get_privatekey() parses key and prepares it for use by other functions.</description>
        <signature>resource openssl_pkey_get_private (mixed $key [, string $passphrase = &quot;&quot; ])</signature>
        <docrelurl>openssl_pkey_get_private</docrelurl>
      </item>
      <item name="openssl_pkey_get_public">
        <description>openssl_get_publickey() extracts the public key from certificate and prepares it for use by other functions.</description>
        <signature>resource openssl_pkey_get_public (mixed $certificate)</signature>
        <docrelurl>openssl_pkey_get_public</docrelurl>
      </item>
      <item name="openssl_pkey_get_details">
        <description>This function returns the key details (bits, key, type).</description>
        <signature>array openssl_pkey_get_details (resource $key)</signature>
        <docrelurl>openssl_pkey_get_details</docrelurl>
      </item>
      <item name="openssl_free_key">
        <description>openssl_free_key() frees the key associated with the specified key_identifier from memory.</description>
        <signature>void openssl_free_key (resource $key_identifier)</signature>
        <docrelurl>openssl_free_key</docrelurl>
      </item>
      <item name="openssl_get_privatekey">
        <description>Alias of openssl_pkey_get_private openssl_get_md_methods openssl_get_publickey OpenSSL Functions PHP Manual openssl_get_privatekey (PHP 4 &gt;= 4.0.4, PHP 5)</description>
        <signature>Alias of openssl_pkey_get_private openssl_get_md_methods</signature>
        <docrelurl>openssl_get_privatekey</docrelurl>
      </item>
      <item name="openssl_get_publickey">
        <description>Alias of openssl_pkey_get_public openssl_get_privatekey openssl_open OpenSSL Functions PHP Manual openssl_get_publickey (PHP 4 &gt;= 4.0.4, PHP 5)</description>
        <signature>Alias of openssl_pkey_get_public openssl_get_privatekey</signature>
        <docrelurl>openssl_get_publickey</docrelurl>
      </item>
      <item name="openssl_x509_read">
        <description>openssl_x509_read() parses the certificate supplied by x509certdata and returns a resource identifier for it.</description>
        <signature>resource openssl_x509_read (mixed $x509certdata)</signature>
        <docrelurl>openssl_x509_read</docrelurl>
      </item>
      <item name="openssl_x509_free">
        <description>openssl_x509_free() frees the certificate associated with the specified x509cert resource from memory.</description>
        <signature>void openssl_x509_free (resource $x509cert)</signature>
        <docrelurl>openssl_x509_free</docrelurl>
      </item>
      <item name="openssl_x509_parse">
        <description>openssl_x509_parse() returns information about the supplied x509cert, including fields such as subject name, issuer name, purposes, valid from and valid to dates etc.</description>
        <signature>array openssl_x509_parse (mixed $x509cert [, bool $shortnames = true ])</signature>
        <docrelurl>openssl_x509_parse</docrelurl>
      </item>
      <item name="openssl_x509_checkpurpose">
        <description>openssl_x509_checkpurpose() examines a certificate to see if it can be used for the specified purpose.</description>
        <signature>int openssl_x509_checkpurpose (mixed $x509cert , int $purpose [, array $cainfo = array() [, string $untrustedfile ]])</signature>
        <docrelurl>openssl_x509_checkpurpose</docrelurl>
      </item>
      <item name="openssl_x509_check_private_key">
        <description>Checks whether the given key is the private key that corresponds to cert.</description>
        <signature>bool openssl_x509_check_private_key (mixed $cert , mixed $key)</signature>
        <docrelurl>openssl_x509_check_private_key</docrelurl>
      </item>
      <item name="openssl_x509_export">
        <description>openssl_x509_export() stores x509 into a string named by output in a PEM encoded format.</description>
        <signature>bool openssl_x509_export (mixed $x509 , string &amp;$output [, bool $notext = TRUE ])</signature>
        <docrelurl>openssl_x509_export</docrelurl>
      </item>
      <item name="openssl_x509_export_to_file">
        <description>openssl_x509_export_to_file() stores x509 into a file named by outfilename in a PEM encoded format.</description>
        <signature>bool openssl_x509_export_to_file (mixed $x509 , string $outfilename [, bool $notext = TRUE ])</signature>
        <docrelurl>openssl_x509_export_to_file</docrelurl>
      </item>
      <item name="openssl_pkcs12_export">
        <description>openssl_pkcs12_export() stores x509 into a string named by out in a PKCS#12 file format.</description>
        <signature>bool openssl_pkcs12_export (mixed $x509 , string &amp;$out , mixed $priv_key , string $pass [, array $args ])</signature>
        <docrelurl>openssl_pkcs12_export</docrelurl>
      </item>
      <item name="openssl_pkcs12_export_to_file">
        <description>openssl_pkcs12_export_to_file() stores x509 into a file named by filename in a PKCS#12 file format.</description>
        <signature>bool openssl_pkcs12_export_to_file (mixed $x509 , string $filename , mixed $priv_key , string $pass [, array $args ])</signature>
        <docrelurl>openssl_pkcs12_export_to_file</docrelurl>
      </item>
      <item name="openssl_pkcs12_read">
        <description>openssl_pkcs12_read() parses the PKCS#12 certificate store supplied by pkcs12 into a array named certs.</description>
        <signature>bool openssl_pkcs12_read (string $pkcs12 , array &amp;$certs , string $pass)</signature>
        <docrelurl>openssl_pkcs12_read</docrelurl>
      </item>
      <item name="openssl_csr_new">
        <description>openssl_csr_new() generates a new CSR (Certificate Signing Request) based on the information provided by dn, which represents the Distinguished Name to be used in the certificate.</description>
        <signature>mixed openssl_csr_new (array $dn , resource &amp;$privkey [, array $configargs [, array $extraattribs ]])</signature>
        <docrelurl>openssl_csr_new</docrelurl>
      </item>
      <item name="openssl_csr_export">
        <description>openssl_csr_export() takes the Certificate Signing Request represented by csr and stores it as ascii-armoured text into out, which is passed by reference.</description>
        <signature>bool openssl_csr_export (resource $csr , string &amp;$out [, bool $notext = true ])</signature>
        <docrelurl>openssl_csr_export</docrelurl>
      </item>
      <item name="openssl_csr_export_to_file">
        <description>openssl_csr_export_to_file() takes the Certificate Signing Request represented by csr and saves it as ascii-armoured text into the file named by outfilename.</description>
        <signature>bool openssl_csr_export_to_file (resource $csr , string $outfilename [, bool $notext = true ])</signature>
        <docrelurl>openssl_csr_export_to_file</docrelurl>
      </item>
      <item name="openssl_csr_sign">
        <description>openssl_csr_sign() generates an x509 certificate resource from the given CSR.</description>
        <signature>resource openssl_csr_sign (mixed $csr , mixed $cacert , mixed $priv_key , int $days [, array $configargs [, int $serial = 0 ]])</signature>
        <docrelurl>openssl_csr_sign</docrelurl>
      </item>
      <item name="openssl_csr_get_subject">
        <description>array openssl_csr_get_subject ( mixed $csr [, bool $use_shortnames = true ]) WarningThis function iscurrently not documented; only its argument list is available.</description>
        <signature>array openssl_csr_get_subject (mixed $csr [, bool $use_shortnames = true ])</signature>
        <docrelurl>openssl_csr_get_subject</docrelurl>
      </item>
      <item name="openssl_csr_get_public_key">
        <description>resource openssl_csr_get_public_key ( mixed $csr [, bool $use_shortnames = true ]) WarningThis function iscurrently not documented; only its argument list is available.</description>
        <signature>resource openssl_csr_get_public_key (mixed $csr [, bool $use_shortnames = true ])</signature>
        <docrelurl>openssl_csr_get_public_key</docrelurl>
      </item>
      <item name="openssl_digest">
        <description>Computes a digest hash value for the given data using a given method, and returns a raw or binhex encoded string.</description>
        <signature>string openssl_digest (string $data , string $method [, bool $raw_output = false ])</signature>
        <docrelurl>openssl_digest</docrelurl>
      </item>
      <item name="openssl_encrypt">
        <description>Encrypts given data with given method and key, returns a raw or base64 encoded string</description>
        <signature>string openssl_encrypt (string $data , string $method , string $password [, bool $raw_output = false [, string $iv = &quot;&quot; ]])</signature>
        <docrelurl>openssl_encrypt</docrelurl>
      </item>
      <item name="openssl_decrypt">
        <description>Takes a raw or base64 encoded string and decrypts it using a given method and key.</description>
        <signature>string openssl_decrypt (string $data , string $method , string $password [, bool $raw_input = false [, string $iv = &quot;&quot; ]])</signature>
        <docrelurl>openssl_decrypt</docrelurl>
      </item>
      <item name="openssl_cipher_iv_length">
        <description>Gets the cipher iv length.</description>
        <signature>integer openssl_cipher_iv_length (string $method)</signature>
        <docrelurl>openssl_cipher_iv_length</docrelurl>
      </item>
      <item name="openssl_sign">
        <description>openssl_sign() computes a signature for the specified data by using SHA1 for hashing followed by encryption using the private key associated with priv_key_id. Note that the data itself is not encrypted.</description>
        <signature>bool openssl_sign (string $data , string &amp;$signature , mixed $priv_key_id [, int $signature_alg = OPENSSL_ALGO_SHA1 ])</signature>
        <docrelurl>openssl_sign</docrelurl>
      </item>
      <item name="openssl_verify">
        <description>openssl_verify() verifies that the signature is correct for the specified data using the public key associated with pub_key_id. This must be the public key corresponding to the private key used for signing.</description>
        <signature>int openssl_verify (string $data , string $signature , mixed $pub_key_id [, int $signature_alg = OPENSSL_ALGO_SHA1 ])</signature>
        <docrelurl>openssl_verify</docrelurl>
      </item>
      <item name="openssl_seal">
        <description>openssl_seal() seals (encrypts) data by using RC4 with a randomly generated secret key. The key is encrypted with each of the public keys associated with the identifiers in pub_key_ids and each encrypted key is returned in env_keys. This means that one can send sealed data to multiple recipients (provided one has obtained their public keys). Each recipient must receive both the sealed data and the envelope key that was encrypted with the recipient&apos;s public key.</description>
        <signature>int openssl_seal (string $data , string &amp;$sealed_data , array &amp;$env_keys , array $pub_key_ids [, string $method ])</signature>
        <docrelurl>openssl_seal</docrelurl>
      </item>
      <item name="openssl_open">
        <description>openssl_open() opens (decrypts) sealed_data using the private key associated with the key identifier priv_key_id and the envelope key env_key, and fills open_data with the decrypted data. The envelope key is generated when the data are sealed and can only be used by one specific private key. See openssl_seal() for more information.</description>
        <signature>bool openssl_open (string $sealed_data , string &amp;$open_data , string $env_key , mixed $priv_key_id [, string $method ])</signature>
        <docrelurl>openssl_open</docrelurl>
      </item>
      <item name="openssl_pkcs7_verify">
        <description>openssl_pkcs7_verify() reads the S/MIME message contained in the given file and examines the digital signature.</description>
        <signature>mixed openssl_pkcs7_verify (string $filename , int $flags [, string $outfilename [, array $cainfo [, string $extracerts [, string $content ]]]])</signature>
        <docrelurl>openssl_pkcs7_verify</docrelurl>
      </item>
      <item name="openssl_pkcs7_decrypt">
        <description>Decrypts the S/MIME encrypted message contained in the file specified by infilename using the certificate and its associated private key specified by recipcert and recipkey.</description>
        <signature>bool openssl_pkcs7_decrypt (string $infilename , string $outfilename , mixed $recipcert [, mixed $recipkey ])</signature>
        <docrelurl>openssl_pkcs7_decrypt</docrelurl>
      </item>
      <item name="openssl_pkcs7_sign">
        <description>openssl_pkcs7_sign() takes the contents of the file named infilename and signs them using the certificate and its matching private key specified by signcert and privkey parameters.</description>
        <signature>bool openssl_pkcs7_sign (string $infilename , string $outfilename , mixed $signcert , mixed $privkey , array $headers [, int $flags = PKCS7_DETACHED [, string $extracerts ]])</signature>
        <docrelurl>openssl_pkcs7_sign</docrelurl>
      </item>
      <item name="openssl_pkcs7_encrypt">
        <description>openssl_pkcs7_encrypt() takes the contents of the file named infile and encrypts them using an RC2 40-bit cipher so that they can only be read by the intended recipients specified by recipcerts.</description>
        <signature>bool openssl_pkcs7_encrypt (string $infile , string $outfile , mixed $recipcerts , array $headers [, int $flags = 0 [, int $cipherid = OPENSSL_CIPHER_RC2_40 ]])</signature>
        <docrelurl>openssl_pkcs7_encrypt</docrelurl>
      </item>
      <item name="openssl_private_encrypt">
        <description>openssl_private_encrypt() encrypts data with private key and stores the result into crypted. Encrypted data can be decrypted via openssl_public_decrypt().</description>
        <signature>bool openssl_private_encrypt (string $data , string &amp;$crypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ])</signature>
        <docrelurl>openssl_private_encrypt</docrelurl>
      </item>
      <item name="openssl_private_decrypt">
        <description>openssl_private_decrypt() decrypts data that was previous encrypted via openssl_public_encrypt() and stores the result into decrypted.</description>
        <signature>bool openssl_private_decrypt (string $data , string &amp;$decrypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ])</signature>
        <docrelurl>openssl_private_decrypt</docrelurl>
      </item>
      <item name="openssl_public_encrypt">
        <description>openssl_public_encrypt() encrypts data with public key and stores the result into crypted. Encrypted data can be decrypted via openssl_private_decrypt().</description>
        <signature>bool openssl_public_encrypt (string $data , string &amp;$crypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ])</signature>
        <docrelurl>openssl_public_encrypt</docrelurl>
      </item>
      <item name="openssl_public_decrypt">
        <description>openssl_public_decrypt() decrypts data that was previous encrypted via openssl_private_encrypt() and stores the result into decrypted.</description>
        <signature>bool openssl_public_decrypt (string $data , string &amp;$decrypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ])</signature>
        <docrelurl>openssl_public_decrypt</docrelurl>
      </item>
      <item name="openssl_get_md_methods">
        <description>Gets a list of available digest methods.</description>
        <signature>array openssl_get_md_methods ([ bool $aliases = false ])</signature>
        <docrelurl>openssl_get_md_methods</docrelurl>
      </item>
      <item name="openssl_get_cipher_methods">
        <description>Gets a list of available cipher methods.</description>
        <signature>array openssl_get_cipher_methods ([ bool $aliases = false ])</signature>
        <docrelurl>openssl_get_cipher_methods</docrelurl>
      </item>
      <item name="openssl_dh_compute_key">
        <description>string openssl_dh_compute_key ( string $pub_key , resource $dh_key) WarningThis function iscurrently not documented; only its argument list is available.</description>
        <signature>string openssl_dh_compute_key (string $pub_key , resource $dh_key)</signature>
        <docrelurl>openssl_dh_compute_key</docrelurl>
      </item>
      <item name="openssl_random_pseudo_bytes">
        <description>Generates a string of pseudo-random bytes, with the number of bytes determined by the length parameter.</description>
        <signature>string openssl_random_pseudo_bytes (int $length [, bool &amp;$crypto_strong ])</signature>
        <docrelurl>openssl_random_pseudo_bytes</docrelurl>
      </item>
      <item name="openssl_error_string">
        <description>openssl_error_string() returns the last error from the openSSL library. Error messages are stacked, so this function should be called multiple times to collect all of the information.</description>
        <signature>string openssl_error_string (void)</signature>
        <docrelurl>openssl_error_string</docrelurl>
      </item>
      <item name="use_soap_error_handler">
        <description>This function sets whether or not to use the SOAP error handler in the SOAP server. It will return the previous value. If set to TRUE, details of errors in a SoapServer application will be sent to the clients. If FALSE, no information will be sent.</description>
        <signature>bool use_soap_error_handler ([ bool $handler = true ])</signature>
        <docrelurl>use_soap_error_handler</docrelurl>
      </item>
      <item name="is_soap_fault">
        <description>This function is useful to check if the SOAP call failed, but without using exceptions. To use it, create a SoapClient object with the exceptions option set to zero or FALSE. In this case, the SOAP method will return a special SoapFault object which encapsulates the fault details (faultcode, faultstring, faultactor and faultdetails).</description>
        <signature>bool is_soap_fault (mixed $object)</signature>
        <docrelurl>is_soap_fault</docrelurl>
      </item>
      <item name="imap_open">
        <description>Opens an IMAP stream to a mailbox.</description>
        <signature>resource imap_open (string $mailbox , string $username , string $password [, int $options = NIL [, int $n_retries = 0 [, array $params = NULL ]]])</signature>
        <docrelurl>imap_open</docrelurl>
      </item>
      <item name="imap_reopen">
        <description>Reopens the specified stream to a new mailbox on an IMAP or NNTP server.</description>
        <signature>bool imap_reopen (resource $imap_stream , string $mailbox [, int $options = 0 [, int $n_retries = 0 ]])</signature>
        <docrelurl>imap_reopen</docrelurl>
      </item>
      <item name="imap_close">
        <description>Closes the imap stream.</description>
        <signature>bool imap_close (resource $imap_stream [, int $flag = 0 ])</signature>
        <docrelurl>imap_close</docrelurl>
      </item>
      <item name="imap_num_msg">
        <description>Gets the number of messages in the current mailbox.</description>
        <signature>int imap_num_msg (resource $imap_stream)</signature>
        <docrelurl>imap_num_msg</docrelurl>
      </item>
      <item name="imap_num_recent">
        <description>Gets the number of recent messages in the current mailbox.</description>
        <signature>int imap_num_recent (resource $imap_stream)</signature>
        <docrelurl>imap_num_recent</docrelurl>
      </item>
      <item name="imap_headers">
        <description>Returns headers for all messages in a mailbox.</description>
        <signature>array imap_headers (resource $imap_stream)</signature>
        <docrelurl>imap_headers</docrelurl>
      </item>
      <item name="imap_headerinfo">
        <description>Gets information about the given message number by reading its headers.</description>
        <signature>object imap_headerinfo (resource $imap_stream , int $msg_number [, int $fromlength = 0 [, int $subjectlength = 0 [, string $defaulthost = NULL ]]])</signature>
        <docrelurl>imap_headerinfo</docrelurl>
      </item>
      <item name="imap_rfc822_parse_headers">
        <description>Gets an object of various header elements, similar to imap_header().</description>
        <signature>object imap_rfc822_parse_headers (string $headers [, string $defaulthost = &quot;UNKNOWN&quot; ])</signature>
        <docrelurl>imap_rfc822_parse_headers</docrelurl>
      </item>
      <item name="imap_rfc822_write_address">
        <description>Returns a properly formatted email address as defined in RFC2822 given the needed information.</description>
        <signature>string imap_rfc822_write_address (string $mailbox , string $host , string $personal)</signature>
        <docrelurl>imap_rfc822_write_address</docrelurl>
      </item>
      <item name="imap_rfc822_parse_adrlist">
        <description>Parses the address string as defined in RFC2822 and for each address.</description>
        <signature>array imap_rfc822_parse_adrlist (string $address , string $default_host)</signature>
        <docrelurl>imap_rfc822_parse_adrlist</docrelurl>
      </item>
      <item name="imap_body">
        <description>imap_body() returns the body of the message, numbered msg_number in the current mailbox.</description>
        <signature>string imap_body (resource $imap_stream , int $msg_number [, int $options = 0 ])</signature>
        <docrelurl>imap_body</docrelurl>
      </item>
      <item name="imap_bodystruct">
        <description>Read the structure of a specified body section of a specific message.</description>
        <signature>object imap_bodystruct (resource $imap_stream , int $msg_number , string $section)</signature>
        <docrelurl>imap_bodystruct</docrelurl>
      </item>
      <item name="imap_fetchbody">
        <description>Fetch of a particular section of the body of the specified messages. Body parts are not decoded by this function.</description>
        <signature>string imap_fetchbody (resource $imap_stream , int $msg_number , string $section [, int $options = 0 ])</signature>
        <docrelurl>imap_fetchbody</docrelurl>
      </item>
      <item name="imap_fetchmime">
        <description>Fetch the MIME headers of a particular section of the body of the specified messages.</description>
        <signature>string imap_fetchmime (resource $imap_stream , int $msg_number , string $section [, int $options = 0 ])</signature>
        <docrelurl>imap_fetchmime</docrelurl>
      </item>
      <item name="imap_savebody">
        <description>Saves a part or the whole body of the specified message.</description>
        <signature>bool imap_savebody (resource $imap_stream , mixed $file , int $msg_number [, string $part_number = &quot;&quot; [, int $options = 0 ]])</signature>
        <docrelurl>imap_savebody</docrelurl>
      </item>
      <item name="imap_fetchheader">
        <description>This function causes a fetch of the complete, unfiltered RFC2822 format header of the specified message.</description>
        <signature>string imap_fetchheader (resource $imap_stream , int $msg_number [, int $options = 0 ])</signature>
        <docrelurl>imap_fetchheader</docrelurl>
      </item>
      <item name="imap_fetchstructure">
        <description>Fetches all the structured information for a given message.</description>
        <signature>object imap_fetchstructure (resource $imap_stream , int $msg_number [, int $options = 0 ])</signature>
        <docrelurl>imap_fetchstructure</docrelurl>
      </item>
      <item name="imap_gc">
        <description>Purges the cache of entries of a specific type.</description>
        <signature>bool imap_gc (resource $imap_stream , int $caches)</signature>
        <docrelurl>imap_gc</docrelurl>
      </item>
      <item name="imap_expunge">
        <description>Deletes all the messages marked for deletion by imap_delete(), imap_mail_move(), or imap_setflag_full().</description>
        <signature>bool imap_expunge (resource $imap_stream)</signature>
        <docrelurl>imap_expunge</docrelurl>
      </item>
      <item name="imap_delete">
        <description>Marks messages listed in msg_number for deletion. Messages marked for deletion will stay in the mailbox until either imap_expunge() is called or imap_close() is called with the optional parameter CL_EXPUNGE.</description>
        <signature>bool imap_delete (resource $imap_stream , int $msg_number [, int $options = 0 ])</signature>
        <docrelurl>imap_delete</docrelurl>
      </item>
      <item name="imap_undelete">
        <description>Removes the deletion flag for a specified message, which is set by imap_delete() or imap_mail_move().</description>
        <signature>bool imap_undelete (resource $imap_stream , int $msg_number [, int $flags = 0 ])</signature>
        <docrelurl>imap_undelete</docrelurl>
      </item>
      <item name="imap_check">
        <description>Checks information about the current mailbox.</description>
        <signature>object imap_check (resource $imap_stream)</signature>
        <docrelurl>imap_check</docrelurl>
      </item>
      <item name="imap_listscan">
        <description>Returns an array containing the names of the mailboxes that have content in the text of the mailbox.</description>
        <signature>array imap_listscan (resource $imap_stream , string $ref , string $pattern , string $content)</signature>
        <docrelurl>imap_listscan</docrelurl>
      </item>
      <item name="imap_mail_copy">
        <description>Copies mail messages specified by msglist to specified mailbox.</description>
        <signature>bool imap_mail_copy (resource $imap_stream , string $msglist , string $mailbox [, int $options = 0 ])</signature>
        <docrelurl>imap_mail_copy</docrelurl>
      </item>
      <item name="imap_mail_move">
        <description>Moves mail messages specified by msglist to the specified mailbox.</description>
        <signature>bool imap_mail_move (resource $imap_stream , string $msglist , string $mailbox [, int $options = 0 ])</signature>
        <docrelurl>imap_mail_move</docrelurl>
      </item>
      <item name="imap_mail_compose">
        <description>Create a MIME message based on the given envelope and body sections.</description>
        <signature>string imap_mail_compose (array $envelope , array $body)</signature>
        <docrelurl>imap_mail_compose</docrelurl>
      </item>
      <item name="imap_createmailbox">
        <description>Creates a new mailbox specified by mailbox.</description>
        <signature>bool imap_createmailbox (resource $imap_stream , string $mailbox)</signature>
        <docrelurl>imap_createmailbox</docrelurl>
      </item>
      <item name="imap_renamemailbox">
        <description>This function renames on old mailbox to new mailbox (see imap_open() for the format of mbox names).</description>
        <signature>bool imap_renamemailbox (resource $imap_stream , string $old_mbox , string $new_mbox)</signature>
        <docrelurl>imap_renamemailbox</docrelurl>
      </item>
      <item name="imap_deletemailbox">
        <description>Deletes the specified mailbox.</description>
        <signature>bool imap_deletemailbox (resource $imap_stream , string $mailbox)</signature>
        <docrelurl>imap_deletemailbox</docrelurl>
      </item>
      <item name="imap_subscribe">
        <description>Subscribe to a new mailbox.</description>
        <signature>bool imap_subscribe (resource $imap_stream , string $mailbox)</signature>
        <docrelurl>imap_subscribe</docrelurl>
      </item>
      <item name="imap_unsubscribe">
        <description>Unsubscribe from the specified mailbox.</description>
        <signature>bool imap_unsubscribe (resource $imap_stream , string $mailbox)</signature>
        <docrelurl>imap_unsubscribe</docrelurl>
      </item>
      <item name="imap_append">
        <description>Appends a string message to the specified mailbox.</description>
        <signature>bool imap_append (resource $imap_stream , string $mailbox , string $message [, string $options = NULL [, string $internal_date = NULL ]])</signature>
        <docrelurl>imap_append</docrelurl>
      </item>
      <item name="imap_ping">
        <description>imap_ping() pings the stream to see if it&apos;s still active. It may discover new mail; this is the preferred method for a periodic &quot;new mail check&quot; as well as a &quot;keep alive&quot; for servers which have inactivity timeout.</description>
        <signature>bool imap_ping (resource $imap_stream)</signature>
        <docrelurl>imap_ping</docrelurl>
      </item>
      <item name="imap_base64">
        <description>Decodes the given BASE-64 encoded text.</description>
        <signature>string imap_base64 (string $text)</signature>
        <docrelurl>imap_base64</docrelurl>
      </item>
      <item name="imap_qprint">
        <description>Convert a quoted-printable string to an 8 bit string according to RFC2045, section 6.7.</description>
        <signature>string imap_qprint (string $string)</signature>
        <docrelurl>imap_qprint</docrelurl>
      </item>
      <item name="imap_8bit">
        <description>Convert an 8bit string to a quoted-printable string (according to RFC2045, section 6.7).</description>
        <signature>string imap_8bit (string $string)</signature>
        <docrelurl>imap_8bit</docrelurl>
      </item>
      <item name="imap_binary">
        <description>Convert an 8bit string to a base64 string according to RFC2045, Section 6.8.</description>
        <signature>string imap_binary (string $string)</signature>
        <docrelurl>imap_binary</docrelurl>
      </item>
      <item name="imap_utf8">
        <description>Converts the given mime_encoded_text to UTF-8.</description>
        <signature>string imap_utf8 (string $mime_encoded_text)</signature>
        <docrelurl>imap_utf8</docrelurl>
      </item>
      <item name="imap_status">
        <description>Gets status information about the given mailbox.</description>
        <signature>object imap_status (resource $imap_stream , string $mailbox , int $options)</signature>
        <docrelurl>imap_status</docrelurl>
      </item>
      <item name="imap_mailboxmsginfo">
        <description>Checks the current mailbox status on the server. It is similar to imap_status(), but will additionally sum up the size of all messages in the mailbox, which will take some additional time to execute.</description>
        <signature>object imap_mailboxmsginfo (resource $imap_stream)</signature>
        <docrelurl>imap_mailboxmsginfo</docrelurl>
      </item>
      <item name="imap_setflag_full">
        <description>Causes a store to add the specified flag to the flags set for the messages in the specified sequence.</description>
        <signature>bool imap_setflag_full (resource $imap_stream , string $sequence , string $flag [, int $options = NIL ])</signature>
        <docrelurl>imap_setflag_full</docrelurl>
      </item>
      <item name="imap_clearflag_full">
        <description>This function causes a store to delete the specified flag to the flags set for the messages in the specified sequence.</description>
        <signature>bool imap_clearflag_full (resource $imap_stream , string $sequence , string $flag [, int $options = 0 ])</signature>
        <docrelurl>imap_clearflag_full</docrelurl>
      </item>
      <item name="imap_sort">
        <description>Gets and sorts message numbers by the given parameters.</description>
        <signature>array imap_sort (resource $imap_stream , int $criteria , int $reverse [, int $options = 0 [, string $search_criteria = NULL [, string $charset = NIL ]]])</signature>
        <docrelurl>imap_sort</docrelurl>
      </item>
      <item name="imap_uid">
        <description>This function returns the UID for the given message sequence number. An UID is a unique identifier that will not change over time while a message sequence number may change whenever the content of the mailbox changes.</description>
        <signature>int imap_uid (resource $imap_stream , int $msg_number)</signature>
        <docrelurl>imap_uid</docrelurl>
      </item>
      <item name="imap_msgno">
        <description>Returns the message sequence number for the given uid.</description>
        <signature>int imap_msgno (resource $imap_stream , int $uid)</signature>
        <docrelurl>imap_msgno</docrelurl>
      </item>
      <item name="imap_list">
        <description>Read the list of mailboxes.</description>
        <signature>array imap_list (resource $imap_stream , string $ref , string $pattern)</signature>
        <docrelurl>imap_list</docrelurl>
      </item>
      <item name="imap_lsub">
        <description>Gets an array of all the mailboxes that you have subscribed.</description>
        <signature>array imap_lsub (resource $imap_stream , string $ref , string $pattern)</signature>
        <docrelurl>imap_lsub</docrelurl>
      </item>
      <item name="imap_fetch_overview">
        <description>This function fetches mail headers for the given sequence and returns an overview of their contents.</description>
        <signature>array imap_fetch_overview (resource $imap_stream , string $sequence [, int $options = 0 ])</signature>
        <docrelurl>imap_fetch_overview</docrelurl>
      </item>
      <item name="imap_alerts">
        <description>Returns all of the IMAP alert messages generated since the last imap_alerts() call, or the beginning of the page.</description>
        <signature>array imap_alerts (void)</signature>
        <docrelurl>imap_alerts</docrelurl>
      </item>
      <item name="imap_errors">
        <description>Gets all of the IMAP errors (if any) that have occurred during this page request or since the error stack was reset.</description>
        <signature>array imap_errors (void)</signature>
        <docrelurl>imap_errors</docrelurl>
      </item>
      <item name="imap_last_error">
        <description>Gets the full text of the last IMAP error message that occurred on the current page. The error stack is untouched; calling imap_last_error() subsequently, with no intervening errors, will return the same error.</description>
        <signature>string imap_last_error (void)</signature>
        <docrelurl>imap_last_error</docrelurl>
      </item>
      <item name="imap_search">
        <description>This function performs a search on the mailbox currently opened in the given IMAP stream.</description>
        <signature>array imap_search (resource $imap_stream , string $criteria [, int $options = SE_FREE [, string $charset = NIL ]])</signature>
        <docrelurl>imap_search</docrelurl>
      </item>
      <item name="imap_utf7_decode">
        <description>Decodes modified UTF-7 text into ISO-8859-1 string.</description>
        <signature>string imap_utf7_decode (string $text)</signature>
        <docrelurl>imap_utf7_decode</docrelurl>
      </item>
      <item name="imap_utf7_encode">
        <description>Converts data to modified UTF-7 text.</description>
        <signature>string imap_utf7_encode (string $data)</signature>
        <docrelurl>imap_utf7_encode</docrelurl>
      </item>
      <item name="imap_mime_header_decode">
        <description>Decodes MIME message header extensions that are non ASCII text (see RFC2047).</description>
        <signature>array imap_mime_header_decode (string $text)</signature>
        <docrelurl>imap_mime_header_decode</docrelurl>
      </item>
      <item name="imap_thread">
        <description>Gets a tree of a threaded message.</description>
        <signature>array imap_thread (resource $imap_stream [, int $options = SE_FREE ])</signature>
        <docrelurl>imap_thread</docrelurl>
      </item>
      <item name="imap_timeout">
        <description>Sets or fetches the imap timeout.</description>
        <signature>mixed imap_timeout (int $timeout_type [, int $timeout = -1 ])</signature>
        <docrelurl>imap_timeout</docrelurl>
      </item>
      <item name="imap_get_quota">
        <description>Retrieve the quota level settings, and usage statics per mailbox.</description>
        <signature>array imap_get_quota (resource $imap_stream , string $quota_root)</signature>
        <docrelurl>imap_get_quota</docrelurl>
      </item>
      <item name="imap_get_quotaroot">
        <description>Retrieve the quota settings per user. The limit value represents the total amount of space allowed for this user&apos;s total mailbox usage. The usage value represents the user&apos;s current total mailbox capacity.</description>
        <signature>array imap_get_quotaroot (resource $imap_stream , string $quota_root)</signature>
        <docrelurl>imap_get_quotaroot</docrelurl>
      </item>
      <item name="imap_set_quota">
        <description>Sets an upper limit quota on a per mailbox basis.</description>
        <signature>bool imap_set_quota (resource $imap_stream , string $quota_root , int $quota_limit)</signature>
        <docrelurl>imap_set_quota</docrelurl>
      </item>
      <item name="imap_setacl">
        <description>Sets the ACL for a giving mailbox.</description>
        <signature>bool imap_setacl (resource $imap_stream , string $mailbox , string $id , string $rights)</signature>
        <docrelurl>imap_setacl</docrelurl>
      </item>
      <item name="imap_getacl">
        <description>Gets the ACL for a given mailbox.</description>
        <signature>array imap_getacl (resource $imap_stream , string $mailbox)</signature>
        <docrelurl>imap_getacl</docrelurl>
      </item>
      <item name="imap_mail">
        <description>This function allows sending of emails with correct handling of Cc and Bcc receivers.</description>
        <signature>bool imap_mail (string $to , string $subject , string $message [, string $additional_headers = NULL [, string $cc = NULL [, string $bcc = NULL [, string $rpath = NULL ]]]])</signature>
        <docrelurl>imap_mail</docrelurl>
      </item>
      <item name="imap_header">
        <description>Alias of imap_headerinfo imap_getsubscribed imap_headerinfo IMAP Functions PHP Manual imap_header (PHP 4, PHP 5)</description>
        <signature>Alias of imap_headerinfo imap_getsubscribed</signature>
        <docrelurl>imap_header</docrelurl>
      </item>
      <item name="imap_listmailbox">
        <description>Alias of imap_list imap_list imap_listscan IMAP Functions PHP Manual imap_listmailbox (PHP 4, PHP 5)</description>
        <signature>Alias of imap_list imap_list</signature>
        <docrelurl>imap_listmailbox</docrelurl>
      </item>
      <item name="imap_getmailboxes">
        <description>Gets information on the mailboxes.</description>
        <signature>array imap_getmailboxes (resource $imap_stream , string $ref , string $pattern)</signature>
        <docrelurl>imap_getmailboxes</docrelurl>
      </item>
      <item name="imap_scanmailbox">
        <description>Alias of imap_listscan imap_scan imap_search IMAP Functions PHP Manual imap_scanmailbox (PHP 4, PHP 5)</description>
        <signature>Alias of imap_listscan imap_scan</signature>
        <docrelurl>imap_scanmailbox</docrelurl>
      </item>
      <item name="imap_listsubscribed">
        <description>Alias of imap_lsub imap_listscan imap_lsub IMAP Functions PHP Manual imap_listsubscribed (PHP 4, PHP 5)</description>
        <signature>Alias of imap_lsub imap_listscan</signature>
        <docrelurl>imap_listsubscribed</docrelurl>
      </item>
      <item name="imap_getsubscribed">
        <description>Gets information about the subscribed mailboxes.</description>
        <signature>array imap_getsubscribed (resource $imap_stream , string $ref , string $pattern)</signature>
        <docrelurl>imap_getsubscribed</docrelurl>
      </item>
      <item name="imap_fetchtext">
        <description>Alias of imap_body imap_fetchstructure imap_gc IMAP Functions PHP Manual imap_fetchtext (PHP 4, PHP 5)</description>
        <signature>Alias of imap_body imap_fetchstructure</signature>
        <docrelurl>imap_fetchtext</docrelurl>
      </item>
      <item name="imap_scan">
        <description>Alias of imap_listscan imap_savebody imap_scanmailbox IMAP Functions PHP Manual imap_scan (PHP 4, PHP 5)</description>
        <signature>Alias of imap_listscan imap_savebody</signature>
        <docrelurl>imap_scan</docrelurl>
      </item>
      <item name="imap_create">
        <description>Alias of imap_createmailbox imap_close imap_createmailbox IMAP Functions PHP Manual imap_create (PHP 4, PHP 5)</description>
        <signature>Alias of imap_createmailbox imap_close</signature>
        <docrelurl>imap_create</docrelurl>
      </item>
      <item name="imap_rename">
        <description>Alias of imap_renamemailbox imap_qprint imap_renamemailbox IMAP Functions PHP Manual imap_rename (PHP 4, PHP 5)</description>
        <signature>Alias of imap_renamemailbox imap_qprint</signature>
        <docrelurl>imap_rename</docrelurl>
      </item>
      <item name="tidy_get_output">
        <description>Gets a string with the repaired html.</description>
        <signature>string tidy_get_output (tidy $object)</signature>
        <docrelurl>tidy_get_output</docrelurl>
      </item>
      <item name="tidy_get_error_buffer">
        <description>Object oriented style (property):</description>
        <signature>string tidy_get_error_buffer (tidy $object)</signature>
        <docrelurl>tidy_get_error_buffer</docrelurl>
      </item>
      <item name="tidy_diagnose">
        <description>Procedural style</description>
        <signature>bool tidy::diagnose (void)</signature>
        <docrelurl>tidy_diagnose</docrelurl>
      </item>
      <item name="tidy_error_count">
        <description>Returns the number of Tidy errors encountered for the specified document.</description>
        <signature>int tidy_error_count (tidy $object)</signature>
        <docrelurl>tidy_error_count</docrelurl>
      </item>
      <item name="tidy_warning_count">
        <description>Returns the number of Tidy warnings encountered for the specified document.</description>
        <signature>int tidy_warning_count (tidy $object)</signature>
        <docrelurl>tidy_warning_count</docrelurl>
      </item>
      <item name="tidy_access_count">
        <description>tidy_access_count() returns the number of accessibility warnings found for the specified document.</description>
        <signature>int tidy_access_count (tidy $object)</signature>
        <docrelurl>tidy_access_count</docrelurl>
      </item>
      <item name="tidy_config_count">
        <description>Returns the number of errors encountered in the configuration of the specified tidy object.</description>
        <signature>int tidy_config_count (tidy $object)</signature>
        <docrelurl>tidy_config_count</docrelurl>
      </item>
      <item name="ob_tidyhandler">
        <description>Callback function for ob_start() to repair the buffer.</description>
        <signature>string ob_tidyhandler (string $input [, int $mode ])</signature>
        <docrelurl>ob_tidyhandler</docrelurl>
      </item>
    </items>
  </globalfunctions>
  <keywords>
    <items>
      <!-- Language Constructs -->
      <item name="define" suppressafter="true">
        <description>Defines a named constant at runtime.</description>
        <signature>bool define ( string $name , mixed $value [, bool $case_insensitive = false ] )</signature>
        <docrelurl>define</docrelurl>
      </item>
      <item name="die">
        <description>This language construct is equivalent to exit().</description>
        <signature></signature>
        <docrelurl>die</docrelurl>
      </item>
      <item name="echo">
        <description>Outputs all parameters. &#13;&#10;&#13;&#10;echo() is not actually a function (it is a language construct), so you are not required to use parentheses with it. echo() (unlike some other language constructs) does not behave like a function, so it cannot always be used in the context of a function. Additionally, if you want to pass more than one parameter to echo(), the parameters must not be enclosed within parentheses.&#13;&#10;&#13;&#10;echo() also has a shortcut syntax, where you can immediately follow the opening tag with an equals sign. This short syntax only works with the short_open_tag configuration setting enabled.</description>
        <signature>void echo ( string $arg1 [, string $... ] )</signature>
        <docrelurl>echo</docrelurl>
      </item>
      <item name="empty">
        <description>Determine whether a variable is considered to be empty.</description>
        <signature>bool empty ( mixed $var )</signature>
        <docrelurl>empty</docrelurl>
      </item>
      <item name="exit">
        <description>Terminates execution of the script. Shutdown functions and object destructors will always be executed even if exit() is called.</description>
        <signature>void exit ([ string $status ] )&#13;&#10;void exit ( int $status )</signature>
        <docrelurl>exit</docrelurl>
      </item>
      <item name="eval">
        <description>Evaluates the string given in code_str as PHP code. Among other things, this can be useful for storing code in a database text field for later execution.&#13;&#10;There are some factors to keep in mind when using eval(). Remember that the string passed must be valid PHP code, including things like terminating statements with a semicolon so the parser doesn't die on the line after the eval(), and properly escaping things in code_str. To mix HTML output and PHP code you can use a closing PHP tag to leave PHP mode.&#13;&#10;Also remember that variables given values under eval() will retain these values in the main script afterwards.</description>
        <signature>mixed eval ( string $code_str )</signature>
        <docrelurl>eval</docrelurl>
      </item>
      <item name="include" suppressafter="true">
        <description>The include() statement includes and evaluates the specified file.</description>
        <signature></signature>
        <docrelurl>include</docrelurl>
      </item>
      <item name="include_once" suppressafter="true">
        <description>The include_once() statement includes and evaluates the specified file during the execution of the script. This is a behavior similar to the include() statement, with the only difference being that if the code from a file has already been included, it will not be included again. As the name suggests, it will be included just once. &#13;&#10;&#13;&#10;include_once() may be used in cases where the same file might be included and evaluated more than once during a particular execution of a script, so in this case it may help avoid problems such as function redefinitions, variable value reassignments, etc.</description>
        <signature></signature>
        <docrelurl>include_once</docrelurl>
      </item>
      <item name="isset">
        <description>Determine if a variable is set and is not NULL. &#13;&#10;&#13;&#10;If a variable has been unset with unset(), it will no longer be set. isset() will return FALSE if testing a variable that has been set to NULL. Also note that a NULL byte is not equivalent to the PHP NULL constant. &#13;&#10;&#13;&#10;If multiple parameters are supplied then isset() will return TRUE only if all of the parameters are set. Evaluation goes from left to right and stops as soon as an unset variable is encountered.</description>
        <signature>bool isset ( mixed $var [, mixed $... ] )</signature>
        <docrelurl>isset</docrelurl>
      </item>
      <item name="list">
        <description>Like array(), this is not really a function, but a language construct. list() is used to assign a list of variables in one operation.</description>
        <signature>array list ( mixed $varname [, mixed $... ] )</signature>
        <docrelurl>list</docrelurl>
      </item>
      <item name="require" suppressafter="true">
        <description>require() is identical to include() except upon failure it will also produce a fatal E_COMPILE_ERROR level error. In other words, it will halt the script whereas include() only emits a warning (E_WARNING) which allows the script to continue.</description>
        <signature></signature>
        <docrelurl>require</docrelurl>
      </item>
      <item name="require_once" suppressafter="true">
        <description>The require_once() statement is identical to require() except PHP will check if the file has already been included, and if so, not include (require) it again.</description>
        <signature></signature>
        <docrelurl>require_once</docrelurl>
      </item>
      <item name="return">
        <description>If called from within a function, the return() statement immediately ends execution of the current function, and returns its argument as the value of the function call. return() will also end the execution of an eval() statement or script file. &#13;&#10;&#13;&#10;If called from the global scope, then execution of the current script file is ended. If the current script file was include()ed or require()ed, then control is passed back to the calling file. Furthermore, if the current script file was include()ed, then the value given to return() will be returned as the value of the include() call. If return() is called from within the main script file, then script execution ends. If the current script file was named by the auto_prepend_file or auto_append_file configuration options in php.ini, then that script file's execution is ended.</description>
        <signature></signature>
        <docrelurl>return</docrelurl>
      </item>
      <item name="print">
        <description>Outputs arg. &#13;&#10;&#13;&#10;print() is not actually a real function (it is a language construct) so you are not required to use parentheses with its argument list.</description>
        <signature>int print ( string $arg )</signature>
        <docrelurl>print</docrelurl>
      </item>
      <item name="unset">
        <description>unset() destroys the specified variables. &#13;&#10;&#13;&#10;The behavior of unset() inside of a function can vary depending on what type of variable you are attempting to destroy. &#13;&#10;&#13;&#10;If a globalized variable is unset() inside of a function, only the local variable is destroyed. The variable in the calling environment will retain the same value as before unset() was called.</description>
        <signature>void unset ( mixed $var [, mixed $... ] )</signature>
        <docrelurl>unset</docrelurl>
      </item>     
      <item name="yield">
        <description>The heart of a generator function is the yield keyword. In its simplest form, a yield statement looks much like a return statement, except that instead of stopping execution of the function and returning, yield instead provides a value to the code looping over the generator and pauses execution of the generator function.</description>
        <signature></signature>
        <docrelurl>yield</docrelurl>
      </item> 

      <!-- Actual Keywords -->
      <item name="abstract" />
      <item name="and"/>
      <item name="array" suppressafter="true"/>
      <item name="as"/>
      <item name="break" suppressafter="true" />
      <item name="case"/>
      <item name="catch" suppressafter="true" />
      <item name="class" suppressafter="true" />
      <item name="clone"/>
      <item name="const" suppressafter="true" />
      <item name="continue"/>
      <item name="declare" suppressafter="true"/>
      <item name="default" suppressafter="true"/>
      <item name="do" suppressafter="true"/>
      <item name="else" suppressafter="true"/>
      <item name="elseif" suppressafter="true"/>
      <item name="enddeclare"/>
      <item name="endfor" suppressafter="true"/>
      <item name="endforeach" suppressafter="true"/>
      <item name="endif" suppressafter="true"/>
      <item name="endswitch" suppressafter="true"/>
      <item name="endwhile" suppressafter="true"/>
      <item name="extends" suppressafter="true"/>
      <item name="final"/>
      <item name="finally" suppressafter="true"/>
      <item name="for" suppressafter="true"/>
      <item name="foreach" suppressafter="true"/>
      <item name="function" suppressafter="true"/>
      <item name="global"/>
      <item name="goto"/>
      <item name="if" suppressafter="true"/>
      <item name="implements"/>
      <item name="interface" suppressafter="true"/>
      <item name="instanceof" suppressafter="true"/>
      <item name="insteadOf" />
      <item name="namespace" suppressafter="true"/>
      <item name="new"/>
      <item name="or"/>
      <item name="parent"/>
      <item name="private"/>
      <item name="protected"/>
      <item name="public"/>
      <item name="self"/>
      <item name="static"/>
      <item name="switch" suppressafter="true"/>
      <item name="throw"/>
      <item name="trait" suppressafter="true"/>
      <item name="try" suppressafter="true"/>
      <item name="use" suppressafter="true"/>
      <item name="var" suppressafter="true"/>
      <item name="while" suppressafter="true"/>
      <item name="xor"/>


    </items>
  </keywords>
  <compiletimeconstants>
    <items>
      <item name="__CLASS__">
        <description>The class name. (Added in PHP 4.3.0) As of PHP 5 this constant returns the class name as it was declared (case-sensitive). In PHP 4 its value is always lowercased.</description>
        <docrelurl>language.constants.predefined.php</docrelurl>
      </item>
      <item name="__DIR__">
        <description>The directory of the file. If used inside an include, the directory of the included file is returned. This is equivalent to dirname(__FILE__). This directory name does not have a trailing slash unless it is the root directory. (Added in PHP 5.3.0.)</description>
        <docrelurl>language.constants.predefined.php</docrelurl>
      </item>
      <item name="__FILE__">
        <description>The full path and filename of the file. If used inside an include, the name of the included file is returned. Since PHP 4.0.2, __FILE__ always contains an absolute path with symlinks resolved whereas in older versions it contained relative path under some circumstances.</description>
        <docrelurl>language.constants.predefined.php</docrelurl>
      </item>
      <item name="__FUNCTION__">
        <description>The function name. (Added in PHP 4.3.0) As of PHP 5 this constant returns the function name as it was declared (case-sensitive). In PHP 4 its value is always lowercased.</description>
        <docrelurl>language.constants.predefined.php</docrelurl>
      </item>
      <item name="__LINE__">
        <description>The current line number of the file.</description>
        <docrelurl>language.constants.predefined.php</docrelurl>
      </item>
      <item name="__METHOD__">
        <description>The class method name. (Added in PHP 5.0.0) The method name is returned as it was declared (case-sensitive).</description>
        <docrelurl>language.constants.predefined.php</docrelurl>
      </item>
      <item name="__NAMESPACE__">
        <description>The name of the current namespace (case-sensitive). This constant is defined in compile-time (Added in PHP 5.3.0).</description>
        <docrelurl>language.constants.predefined.php</docrelurl>
      </item>
      <!-- Documentation for TRUE/FALSE/NULL is not supported -->
      <item name="TRUE"/>
      <item name="FALSE"/>
      <item name="NULL"/>
      <item name="M_PI">
        <description>The constant Pi: 3.14159265358979323846</description>
        <docrooturl>www.php.net/manual/math.constants.php</docrooturl>
      </item>
      <item name="M_E">
        <description>The constant e: 2.7182818284590452354</description>
        <docroot>www.php.net/manual/math.constants.php</docroot>
      </item>
      <item name="M_LOG2E">
        <description>The constant log_2 e: 1.4426950408889634074</description>
        <docroot>www.php.net/manual/math.constants.php</docroot>
      </item>
      <item name="M_LOG10E">
        <description>The constant log_10 e: 0.43429448190325182765</description>
        <docroot>www.php.net/manual/math.constants.php</docroot>
      </item>
      <item name="M_LN2">
        <description>The constant log_e 2: 0.69314718055994530942</description>
        <docroot>www.php.net/manual/math.constants.php</docroot>
      </item>
      <item name="M_LN10">
        <description>The constant log_e 10: 2.30258509299404568402</description>
        <docroot>www.php.net/manual/math.constants.php</docroot>
      </item>

      <item name="M_PI_2">
        <description>The constant pi/2: 1.57079632679489661923</description>
        <docroot>www.php.net/manual/math.constants.php</docroot>
      </item>
      <item name="M_PI_4">
        <description>The constant pi/4: 0.78539816339744830962</description>
        <docroot>www.php.net/manual/math.constants.php</docroot>
      </item>
      <item name="M_1_PI">
        <description>The constant 1/pi: 0.31830988618379067154</description>
        <docroot>www.php.net/manual/math.constants.php</docroot>
      </item>
      <item name="M_2_PI">
        <description>The constant 2/pi: 0.63661977236758134308</description>
        <docroot>www.php.net/manual/math.constants.php</docroot>
      </item>
      <item name="M_SQRTPI">
        <description>The constant sqrt(pi): 1.77245385090551602729</description>
        <docroot>www.php.net/manual/math.constants.php</docroot>
      </item>
      <item name="M_2_SQRTPI">
        <description>The constant 2/sqrt(pi): 1.12837916709551257390</description>
        <docroot>www.php.net/manual/math.constants.php</docroot>
      </item>
      <item name="M_SQRT2">
        <description>The constant sqrt(2): 1.41421356237309504880</description>
        <docroot>www.php.net/manual/math.constants.php</docroot>
      </item>
      <item name="M_SQRT3">
        <description>The constant sqrt(3): 1.73205080756887729352</description>
        <docroot>www.php.net/manual/math.constants.php</docroot>
      </item>
      <item name="M_SQRT1_2">
        <description>The constant 1/sqrt(2): 0.7071067811865475244</description>
        <docroot>www.php.net/manual/math.constants.php</docroot>
      </item>
      <item name="M_LNPI">
        <description>The constant log_e(pi): 1.14472988584940017414</description>
        <docroot>www.php.net/manual/math.constants.php</docroot>
      </item>
      <item name="M_EULER">
        <description>Euler constant: 0.57721566490153286061</description>
        <docroot>www.php.net/manual/math.constants.php</docroot>
      </item>
      <item name="PHP_ROUND_HALF_UP">
        <description>Round halves up = 1</description>
        <docroot>www.php.net/manual/math.constants.php</docroot>
      </item>
      <item name="PHP_ROUND_HALF_DOWN">
        <description>Round halves down = 2</description>
        <docroot>www.php.net/manual/math.constants.php</docroot>
      </item>
      <item name="PHP_ROUND_HALF_EVEN">
        <description>Round halves to even numbers = 3</description>
        <docroot>www.php.net/manual/math.constants.php</docroot>
      </item>
      <item name="PHP_ROUND_HALF_ODD">
        <description>Round halvesto odd numbers = 4</description>
        <docroot>www.php.net/manual/math.constants.php</docroot>
      </item>
      <item name="NAN">
        <description>NAN (as a float): Not A Number</description>
        <docroot>www.php.net/manual/math.constants.php</docroot>
      </item>
      <item name="INF">
        <description>INF (as a float): The infinite</description>
        <docroot>www.php.net/manual/math.constants.php</docroot>
      </item>

      <!-- PHP 5.5 constants -->
      <item name="PASSWORD_BCRYPT">
        <description>PASSWORD_BCRYPT is used to create new password hashes using the CRYPT_BLOWFISH algorithm.</description>
        <docroot>www.php.net/manual/password.constants.php</docroot>
      </item>
      <item name="PASSWORD_DEFAULT">
        <description>The default algorithm to use for hashing if no algorithm is provided. This may change in newer PHP releases when newer, stronger hashing algorithms are supported.</description>
        <docroot>www.php.net/manual/password.constants.php</docroot>
      </item>

    </items>
  </compiletimeconstants>
  <globalvariables>
    <items>
      <item name="$GLOBALS">
        <description>An associative array containing references to all variables which are currently defined in the global scope of the script. The variable names are the keys of the array.</description>
        <docrelurl>reserved.variables.globals.php</docrelurl>
      </item>
      <item name="$_SERVER">
        <description>$_SERVER is an array containing information such as headers, paths, and script locations. The entries in this array are created by the web server. There is no guarantee that every web server will provide any of these; servers may omit some, or provide others not listed here. That said, a large number of these variables are accounted for in the CGI/1.1 specification, so you should be able to expect those.</description>
        <docrelurl>reserved.variables.server.php</docrelurl>
      </item>
      <item name="$_GET">
        <description>An associative array of variables passed to the current script via the URL parameters.</description>
        <docrelurl>reserved.variables.get.php</docrelurl>
      </item>
      <item name="$_POST">
        <description>An associative array of variables passed to the current script via the HTTP POST method.</description>
        <docrelurl>reserved.variables.post.php</docrelurl>
      </item>
      <item name="$_FILES">
        <description>An associative array of items uploaded to the current script via the HTTP POST method.</description>
        <docrelurl>reserved.variables.files.php</docrelurl>
      </item>
      <item name="$_REQUEST">
        <description>An associative array that by default contains the contents of $_GET, $_POST and $_COOKIE.</description>
        <docrelurl>reserved.variables.request.php</docrelurl>
      </item>
      <item name="$_SESSION">
        <description>An associative array containing session variables available to the current script. See the Session functions documentation for more information on how this is used.</description>
        <docrelurl>reserved.variables.session.php</docrelurl>
      </item>
      <item name="$_ENV">
        <description>An associative array of variables passed to the current script via the environment method. &#13;&#10;&#13;&#10;These variables are imported into PHP's global namespace from the environment under which the PHP parser is running. Many are provided by the shell under which PHP is running and different systems are likely running different kinds of shells, a definitive list is impossible. Please see your shell's documentation for a list of defined environment variables. &#13;&#10;&#13;&#10;Other environment variables include the CGI variables, placed there regardless of whether PHP is running as a server module or CGI processor.</description>
        <docrelurl>reserved.variables.environment.php</docrelurl>
      </item>
      <item name="$_COOKIE">
        <description>An associative array of variables passed to the current script via HTTP Cookies.</description>
        <docrelurl>reserved.variables.cookies.php</docrelurl>
      </item>
      <item name="$php_errormsg">
        <description>$php_errormsg is a variable containing the text of the last error message generated by PHP. This variable will only be available within the scope in which the error occurred, and only if the track_errors configuration option is turned on (it defaults to off).</description>
        <docrelurl>reserved.variables.phperrormsg.php</docrelurl>
      </item>
      <item name="$HTTP_RAW_POST_DATA">
        <description>$HTTP_RAW_POST_DATA contains the raw POST data. See always_populate_raw_post_data</description>
        <docrelurl>reserved.variables.httprawpostdata.php</docrelurl>
      </item>
      <item name="$http_response_header">
        <description>The $http_response_header array is similar to the get_headers() function. When using the HTTP wrapper, $http_response_header will be populated with the HTTP response headers. $http_response_header will be created in the local scope.</description>
        <docrelurl>reserved.variables.httpresponseheader.php</docrelurl>
      </item>
      <item name="$argc">
        <description>Contains the number of arguments passed to the current script when running from the command line.</description>
        <docrelurl>reserved.variables.argc.php</docrelurl>
      </item>
      <item name="$argv">
        <description>Contains an array of all the arguments passed to the script when running from the command line.</description>
        <docrelurl>reserved.variables.argv.php</docrelurl>
      </item>
      <item name="$this">
        <description>Refers to the current object</description>
        <docrelurl>reserved.variables.argv.php</docrelurl>
      </item>
    </items>
  </globalvariables>
</php>
